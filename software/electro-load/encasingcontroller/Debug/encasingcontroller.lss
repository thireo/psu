
encasingcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c2  00800100  00000cf2  00000d86  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cf2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  008001c2  008001c2  00000e48  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e48  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ea4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000ee4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002109  00000000  00000000  00000ffc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b03  00000000  00000000  00003105  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000db9  00000000  00000000  00003c08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  000049c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000536  00000000  00000000  00004c08  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000109e  00000000  00000000  0000513e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000061dc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ef       	ldi	r30, 0xF2	; 242
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 3c       	cpi	r26, 0xC2	; 194
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 ec       	ldi	r26, 0xC2	; 194
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <main>
  9e:	0c 94 77 06 	jmp	0xcee	; 0xcee <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <fan_init>:
 */ 
#include "fan.h"

void fan_init(void)
{
	DDRB |= 1 << FAN_PWM_PORT;
  a6:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= 1 << RELAY_PORT;
  a8:	22 9a       	sbi	0x04, 2	; 4
	
	ICR1 = 320;
  aa:	80 e4       	ldi	r24, 0x40	; 64
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  b2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 160;
  b6:	80 ea       	ldi	r24, 0xA0	; 160
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  be:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	TCCR1A |= (1 << COM1A1) | (1 << COM1A0);
  c2:	e0 e8       	ldi	r30, 0x80	; 128
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 6c       	ori	r24, 0xC0	; 192
  ca:	80 83       	st	Z, r24
	TCCR1A |= (1 << WGM11);
  cc:	80 81       	ld	r24, Z
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13);
  d2:	e1 e8       	ldi	r30, 0x81	; 129
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 61       	ori	r24, 0x18	; 24
  da:	80 83       	st	Z, r24
	//TCCR1A |= (1 << WGM11);
	//TCCR1A |= (1 << WGM12) | (1 << WGM13);
	
	TCCR1B &= ~((1 << CS11) | (1 << CS12));
  dc:	80 81       	ld	r24, Z
  de:	89 7f       	andi	r24, 0xF9	; 249
  e0:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS10);
  e2:	80 81       	ld	r24, Z
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret

000000ea <i2c_init>:
void i2c_write_byte(uint8_t byte_in)
{
	TWDR = byte_in;
	TWCR = (1<<TWINT | 1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
}
  ea:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  ee:	88 e4       	ldi	r24, 0x48	; 72
  f0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  f4:	08 95       	ret

000000f6 <i2c_read>:

int32_t i2c_read(uint8_t addr,uint16_t reg)
{
  f6:	af 92       	push	r10
  f8:	bf 92       	push	r11
  fa:	cf 92       	push	r12
  fc:	df 92       	push	r13
  fe:	ef 92       	push	r14
 100:	ff 92       	push	r15
 102:	0f 93       	push	r16
 104:	1f 93       	push	r17
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	a0 97       	sbiw	r28, 0x20	; 32
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	de bf       	out	0x3e, r29	; 62
 116:	0f be       	out	0x3f, r0	; 63
 118:	cd bf       	out	0x3d, r28	; 61
 11a:	18 2f       	mov	r17, r24
 11c:	06 2f       	mov	r16, r22
	char *string_buf[16];
	int32_t databuf;
	TWCR = (1<<TWINT | 1<<TWEN | 1<<TWSTA);
 11e:	84 ea       	ldi	r24, 0xA4	; 164
 120:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 124:	ec eb       	ldi	r30, 0xBC	; 188
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	88 23       	and	r24, r24
 12c:	ec f7       	brge	.-6      	; 0x128 <i2c_read+0x32>
	if ((TWSR & 0xF8) == MR_START)
 12e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 132:	88 7f       	andi	r24, 0xF8	; 248
 134:	88 30       	cpi	r24, 0x08	; 8
 136:	51 f4       	brne	.+20     	; 0x14c <i2c_read+0x56>
	{
		lcd_clear_screen();
 138:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		lcd_set_line(1);
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		lcd_send_string("MR_START Sent!");
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 14a:	1e c0       	rjmp	.+60     	; 0x188 <i2c_read+0x92>
		//USART_send('\n');
	}
	else
	{
		sprintf(string_buf,"ERR0: %x",(TWSR & 0xF8));
 14c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 150:	88 7f       	andi	r24, 0xF8	; 248
 152:	1f 92       	push	r1
 154:	8f 93       	push	r24
 156:	8f e0       	ldi	r24, 0x0F	; 15
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	9f 93       	push	r25
 15c:	8f 93       	push	r24
 15e:	ce 01       	movw	r24, r28
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	5c 01       	movw	r10, r24
 164:	9f 93       	push	r25
 166:	8f 93       	push	r24
 168:	0e 94 8d 03 	call	0x71a	; 0x71a <sprintf>
		lcd_clear_screen();
 16c:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		lcd_set_line(1);
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		lcd_send_string(string_buf);
 176:	c5 01       	movw	r24, r10
 178:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
	}
	TWDR = addr;
 188:	10 93 bb 00 	sts	0x00BB, r17	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 18c:	84 e8       	ldi	r24, 0x84	; 132
 18e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 192:	ec eb       	ldi	r30, 0xBC	; 188
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	88 23       	and	r24, r24
 19a:	ec f7       	brge	.-6      	; 0x196 <i2c_read+0xa0>
	if ((TWSR & 0xF8) == MR_SLA_R_ACK)
 19c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1a0:	88 7f       	andi	r24, 0xF8	; 248
 1a2:	80 34       	cpi	r24, 0x40	; 64
 1a4:	51 f4       	brne	.+20     	; 0x1ba <i2c_read+0xc4>
	{
		lcd_clear_screen();
 1a6:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		lcd_set_line(1);
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		lcd_send_string("MR_SLA_R_ACK Sent!");
 1b0:	88 e1       	ldi	r24, 0x18	; 24
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 1b8:	1e c0       	rjmp	.+60     	; 0x1f6 <i2c_read+0x100>
		//USART_send('\n');
	}
	else
	{
		sprintf(string_buf,"ERR1: 0x%x",(TWSR & 0xF8));
 1ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1be:	88 7f       	andi	r24, 0xF8	; 248
 1c0:	1f 92       	push	r1
 1c2:	8f 93       	push	r24
 1c4:	8b e2       	ldi	r24, 0x2B	; 43
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	9f 93       	push	r25
 1ca:	8f 93       	push	r24
 1cc:	ce 01       	movw	r24, r28
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	5c 01       	movw	r10, r24
 1d2:	9f 93       	push	r25
 1d4:	8f 93       	push	r24
 1d6:	0e 94 8d 03 	call	0x71a	; 0x71a <sprintf>
		lcd_clear_screen();
 1da:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		lcd_set_line(1);
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		lcd_send_string(string_buf);
 1e4:	c5 01       	movw	r24, r10
 1e6:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
	}
	TWDR = (uint8_t) ((reg & 0xFF) >> 8);
 1f6:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT | 1<<TWEN);
 1fa:	84 e8       	ldi	r24, 0x84	; 132
 1fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 200:	ec eb       	ldi	r30, 0xBC	; 188
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	88 23       	and	r24, r24
 208:	ec f7       	brge	.-6      	; 0x204 <i2c_read+0x10e>
	if ((TWSR & 0xF8) == MR_DATA_ACK)
 20a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 20e:	88 7f       	andi	r24, 0xF8	; 248
 210:	80 35       	cpi	r24, 0x50	; 80
 212:	51 f4       	brne	.+20     	; 0x228 <i2c_read+0x132>
	{
		lcd_clear_screen();
 214:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		lcd_set_line(1);
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		lcd_send_string("MR_DATA_ACK sent");
 21e:	86 e3       	ldi	r24, 0x36	; 54
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 226:	1e c0       	rjmp	.+60     	; 0x264 <i2c_read+0x16e>
		//USART_send('\n');
	}
	else
	{
		sprintf(string_buf,"ERR2: 0x%x",(TWSR & 0xF8));
 228:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 22c:	88 7f       	andi	r24, 0xF8	; 248
 22e:	1f 92       	push	r1
 230:	8f 93       	push	r24
 232:	87 e4       	ldi	r24, 0x47	; 71
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	9f 93       	push	r25
 238:	8f 93       	push	r24
 23a:	ce 01       	movw	r24, r28
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	5c 01       	movw	r10, r24
 240:	9f 93       	push	r25
 242:	8f 93       	push	r24
 244:	0e 94 8d 03 	call	0x71a	; 0x71a <sprintf>
		lcd_clear_screen();
 248:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		lcd_set_line(1);
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		lcd_send_string(string_buf);
 252:	c5 01       	movw	r24, r10
 254:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
	}
	TWDR = (uint8_t) (reg & 0xFF);
 264:	00 93 bb 00 	sts	0x00BB, r16	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT | 1<<TWEN);
 268:	84 e8       	ldi	r24, 0x84	; 132
 26a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 26e:	ec eb       	ldi	r30, 0xBC	; 188
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	88 23       	and	r24, r24
 276:	ec f7       	brge	.-6      	; 0x272 <i2c_read+0x17c>
	if ((TWSR & 0xF8) == MR_DATA_ACK)
 278:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 27c:	88 7f       	andi	r24, 0xF8	; 248
 27e:	80 35       	cpi	r24, 0x50	; 80
 280:	51 f4       	brne	.+20     	; 0x296 <i2c_read+0x1a0>
	{
		lcd_clear_screen();
 282:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		lcd_set_line(1);
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		lcd_send_string("MR_DATA_ACK sent!");
 28c:	82 e5       	ldi	r24, 0x52	; 82
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 294:	1e c0       	rjmp	.+60     	; 0x2d2 <i2c_read+0x1dc>
		//USART_send('\n');
	}
	else
	{
		sprintf(string_buf,"ERR3: 0x%x",(TWSR & 0xF8));
 296:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 29a:	88 7f       	andi	r24, 0xF8	; 248
 29c:	1f 92       	push	r1
 29e:	8f 93       	push	r24
 2a0:	84 e6       	ldi	r24, 0x64	; 100
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	9f 93       	push	r25
 2a6:	8f 93       	push	r24
 2a8:	ce 01       	movw	r24, r28
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	5c 01       	movw	r10, r24
 2ae:	9f 93       	push	r25
 2b0:	8f 93       	push	r24
 2b2:	0e 94 8d 03 	call	0x71a	; 0x71a <sprintf>
		lcd_clear_screen();
 2b6:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		lcd_set_line(1);
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		lcd_send_string(string_buf);
 2c0:	c5 01       	movw	r24, r10
 2c2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 2c6:	0f 90       	pop	r0
 2c8:	0f 90       	pop	r0
 2ca:	0f 90       	pop	r0
 2cc:	0f 90       	pop	r0
 2ce:	0f 90       	pop	r0
 2d0:	0f 90       	pop	r0
	}
	TWDR = addr+0x01;
 2d2:	1f 5f       	subi	r17, 0xFF	; 255
 2d4:	10 93 bb 00 	sts	0x00BB, r17	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT | 1<<TWSTA | 1<<TWEN);
 2d8:	84 ea       	ldi	r24, 0xA4	; 164
 2da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 2de:	ec eb       	ldi	r30, 0xBC	; 188
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	88 23       	and	r24, r24
 2e6:	ec f7       	brge	.-6      	; 0x2e2 <i2c_read+0x1ec>

	if ((TWSR & 0xF8) == MR_REP_START)
 2e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2ec:	88 7f       	andi	r24, 0xF8	; 248
 2ee:	80 31       	cpi	r24, 0x10	; 16
 2f0:	51 f4       	brne	.+20     	; 0x306 <i2c_read+0x210>
	{
		lcd_clear_screen();
 2f2:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		lcd_set_line(1);
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		lcd_send_string("MR_REP_START sent!");
 2fc:	8f e6       	ldi	r24, 0x6F	; 111
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 304:	1e c0       	rjmp	.+60     	; 0x342 <i2c_read+0x24c>
		//USART_putstring("High Byte Received NACK Sent!");
		//USART_send('\n');
	}
	else
	{
		sprintf(string_buf,"ERR4: 0x%x",(TWSR & 0xF8));
 306:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 30a:	88 7f       	andi	r24, 0xF8	; 248
 30c:	1f 92       	push	r1
 30e:	8f 93       	push	r24
 310:	82 e8       	ldi	r24, 0x82	; 130
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	9f 93       	push	r25
 316:	8f 93       	push	r24
 318:	8e 01       	movw	r16, r28
 31a:	0f 5f       	subi	r16, 0xFF	; 255
 31c:	1f 4f       	sbci	r17, 0xFF	; 255
 31e:	1f 93       	push	r17
 320:	0f 93       	push	r16
 322:	0e 94 8d 03 	call	0x71a	; 0x71a <sprintf>
		lcd_clear_screen();
 326:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		lcd_set_line(1);
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		lcd_send_string(string_buf);
 330:	c8 01       	movw	r24, r16
 332:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 336:	0f 90       	pop	r0
 338:	0f 90       	pop	r0
 33a:	0f 90       	pop	r0
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
	}
	
	TWCR = (1<<TWINT | 1<<TWEN);
 342:	84 e8       	ldi	r24, 0x84	; 132
 344:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	while(!(TWCR & (1<<TWINT)));
 348:	ec eb       	ldi	r30, 0xBC	; 188
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	88 23       	and	r24, r24
 350:	ec f7       	brge	.-6      	; 0x34c <i2c_read+0x256>
	if ((TWSR & 0xF8) == MR_SLA_R_ACK)
 352:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 356:	88 7f       	andi	r24, 0xF8	; 248
 358:	80 34       	cpi	r24, 0x40	; 64
 35a:	69 f5       	brne	.+90     	; 0x3b6 <i2c_read+0x2c0>
	{
		databuf = (TWDR << 8);
 35c:	c0 90 bb 00 	lds	r12, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 360:	d1 2c       	mov	r13, r1
 362:	dc 2c       	mov	r13, r12
 364:	cc 24       	eor	r12, r12
 366:	0d 2c       	mov	r0, r13
 368:	00 0c       	add	r0, r0
 36a:	ee 08       	sbc	r14, r14
 36c:	ff 08       	sbc	r15, r15
		lcd_clear_screen();
 36e:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		lcd_set_line(1);
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		lcd_send_string("MR_DATA_ACK sent!");
 378:	82 e5       	ldi	r24, 0x52	; 82
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
		lcd_set_line(2);
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		sprintf(string_buf,"val: 0x%02x",databuf);
 386:	ff 92       	push	r15
 388:	ef 92       	push	r14
 38a:	df 92       	push	r13
 38c:	cf 92       	push	r12
 38e:	8d e8       	ldi	r24, 0x8D	; 141
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	9f 93       	push	r25
 394:	8f 93       	push	r24
 396:	8e 01       	movw	r16, r28
 398:	0f 5f       	subi	r16, 0xFF	; 255
 39a:	1f 4f       	sbci	r17, 0xFF	; 255
 39c:	1f 93       	push	r17
 39e:	0f 93       	push	r16
 3a0:	0e 94 8d 03 	call	0x71a	; 0x71a <sprintf>
		lcd_send_string(string_buf);
 3a4:	c8 01       	movw	r24, r16
 3a6:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	f8 94       	cli
 3ae:	de bf       	out	0x3e, r29	; 62
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	cd bf       	out	0x3d, r28	; 61
 3b4:	1e c0       	rjmp	.+60     	; 0x3f2 <i2c_read+0x2fc>
	}
	else
	{
		sprintf(string_buf,"ERR5: 0x%x",(TWSR & 0xF8));
 3b6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 3ba:	88 7f       	andi	r24, 0xF8	; 248
 3bc:	1f 92       	push	r1
 3be:	8f 93       	push	r24
 3c0:	89 e9       	ldi	r24, 0x99	; 153
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	9f 93       	push	r25
 3c6:	8f 93       	push	r24
 3c8:	8e 01       	movw	r16, r28
 3ca:	0f 5f       	subi	r16, 0xFF	; 255
 3cc:	1f 4f       	sbci	r17, 0xFF	; 255
 3ce:	1f 93       	push	r17
 3d0:	0f 93       	push	r16
 3d2:	0e 94 8d 03 	call	0x71a	; 0x71a <sprintf>
		lcd_clear_screen();
 3d6:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		lcd_set_line(1);
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		lcd_send_string(string_buf);
 3e0:	c8 01       	movw	r24, r16
 3e2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 3e6:	0f 90       	pop	r0
 3e8:	0f 90       	pop	r0
 3ea:	0f 90       	pop	r0
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
	//itoa(databuf,buffer,10);
	//USART_putstring(buffer);
	//USART_send('\n');
	//databuf = TWDR;
	//databuf = (databuf << 8) && 0xFF00;
	TWCR = (1<<TWINT | 1<<TWEN);
 3f2:	84 e8       	ldi	r24, 0x84	; 132
 3f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 3f8:	ec eb       	ldi	r30, 0xBC	; 188
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	88 23       	and	r24, r24
 400:	ec f7       	brge	.-6      	; 0x3fc <i2c_read+0x306>

	if ((TWSR & 0xf8) == 0x58)
 402:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	{
		//USART_putstring("Low Byte Received NACK Sent!");
		//USART_send('\n');
	}
	LowByte = TWDR;
 406:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <LowByte+0x1>
 410:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <LowByte>
	databuf |= LowByte;// && 0xFF;
 414:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <LowByte>
 418:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <LowByte+0x1>
	//dtostrf(LowByte,10,5,buffer);
	//itoa(LowByte,buffer,10);
	//USART_putstring(buffer);
	//USART_send('\n');
	TWCR = (1 << TWINT ) | (1 << TWEN ) | (1 << TWSTO );
 41c:	84 e9       	ldi	r24, 0x94	; 148
 41e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		//USART_putstring("NOT BAD!!");
		//USART_send('\n');
		//itoa(databuf,buffer,10);
		//USART_putstring(buffer);
	}
	return databuf;
 422:	cb 01       	movw	r24, r22
 424:	77 0f       	add	r23, r23
 426:	aa 0b       	sbc	r26, r26
 428:	bb 0b       	sbc	r27, r27
 42a:	bc 01       	movw	r22, r24
 42c:	cd 01       	movw	r24, r26
 42e:	6c 29       	or	r22, r12
 430:	7d 29       	or	r23, r13
 432:	8e 29       	or	r24, r14
 434:	9f 29       	or	r25, r15
 436:	a0 96       	adiw	r28, 0x20	; 32
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	f8 94       	cli
 43c:	de bf       	out	0x3e, r29	; 62
 43e:	0f be       	out	0x3f, r0	; 63
 440:	cd bf       	out	0x3d, r28	; 61
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	1f 91       	pop	r17
 448:	0f 91       	pop	r16
 44a:	ff 90       	pop	r15
 44c:	ef 90       	pop	r14
 44e:	df 90       	pop	r13
 450:	cf 90       	pop	r12
 452:	bf 90       	pop	r11
 454:	af 90       	pop	r10
 456:	08 95       	ret

00000458 <lcd_pin_init>:
{
	while(*str != '\0')
	{
		lcd_write_data((unsigned char)*str++);
	}
}
 458:	53 9a       	sbi	0x0a, 3	; 10
 45a:	8a b1       	in	r24, 0x0a	; 10
 45c:	80 6f       	ori	r24, 0xF0	; 240
 45e:	8a b9       	out	0x0a, r24	; 10
 460:	8a b1       	in	r24, 0x0a	; 10
 462:	86 60       	ori	r24, 0x06	; 6
 464:	8a b9       	out	0x0a, r24	; 10
 466:	08 95       	ret

00000468 <lcd_e_toggle>:
 468:	59 9a       	sbi	0x0b, 1	; 11
 46a:	83 ef       	ldi	r24, 0xF3	; 243
 46c:	91 e0       	ldi	r25, 0x01	; 1
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <lcd_e_toggle+0x6>
 472:	00 c0       	rjmp	.+0      	; 0x474 <lcd_e_toggle+0xc>
 474:	00 00       	nop
 476:	59 98       	cbi	0x0b, 1	; 11
 478:	08 95       	ret

0000047a <lcd_rs_high>:
 47a:	5b 9a       	sbi	0x0b, 3	; 11
 47c:	08 95       	ret

0000047e <lcd_rs_low>:
 47e:	5b 98       	cbi	0x0b, 3	; 11
 480:	08 95       	ret

00000482 <lcd_rw_low>:
 482:	5a 98       	cbi	0x0b, 2	; 11
 484:	08 95       	ret

00000486 <lcd_send_byte>:
 486:	cf 93       	push	r28
 488:	c8 2f       	mov	r28, r24
 48a:	66 23       	and	r22, r22
 48c:	19 f0       	breq	.+6      	; 0x494 <lcd_send_byte+0xe>
 48e:	0e 94 3d 02 	call	0x47a	; 0x47a <lcd_rs_high>
 492:	02 c0       	rjmp	.+4      	; 0x498 <lcd_send_byte+0x12>
 494:	0e 94 3f 02 	call	0x47e	; 0x47e <lcd_rs_low>
 498:	0e 94 41 02 	call	0x482	; 0x482 <lcd_rw_low>
 49c:	5c 98       	cbi	0x0b, 4	; 11
 49e:	5f 98       	cbi	0x0b, 7	; 11
 4a0:	5e 98       	cbi	0x0b, 6	; 11
 4a2:	5d 98       	cbi	0x0b, 5	; 11
 4a4:	c4 fd       	sbrc	r28, 4
 4a6:	5c 9a       	sbi	0x0b, 4	; 11
 4a8:	c5 fd       	sbrc	r28, 5
 4aa:	5f 9a       	sbi	0x0b, 7	; 11
 4ac:	c6 fd       	sbrc	r28, 6
 4ae:	5e 9a       	sbi	0x0b, 6	; 11
 4b0:	cc 23       	and	r28, r28
 4b2:	0c f4       	brge	.+2      	; 0x4b6 <lcd_send_byte+0x30>
 4b4:	5d 9a       	sbi	0x0b, 5	; 11
 4b6:	0e 94 34 02 	call	0x468	; 0x468 <lcd_e_toggle>
 4ba:	5c 98       	cbi	0x0b, 4	; 11
 4bc:	5f 98       	cbi	0x0b, 7	; 11
 4be:	5e 98       	cbi	0x0b, 6	; 11
 4c0:	5d 98       	cbi	0x0b, 5	; 11
 4c2:	c0 fd       	sbrc	r28, 0
 4c4:	5c 9a       	sbi	0x0b, 4	; 11
 4c6:	c1 fd       	sbrc	r28, 1
 4c8:	5f 9a       	sbi	0x0b, 7	; 11
 4ca:	c2 fd       	sbrc	r28, 2
 4cc:	5e 9a       	sbi	0x0b, 6	; 11
 4ce:	c3 fd       	sbrc	r28, 3
 4d0:	5d 9a       	sbi	0x0b, 5	; 11
 4d2:	0e 94 34 02 	call	0x468	; 0x468 <lcd_e_toggle>
 4d6:	cf 91       	pop	r28
 4d8:	08 95       	ret

000004da <lcd_write_cmd>:
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	0e 94 43 02 	call	0x486	; 0x486 <lcd_send_byte>
 4e0:	08 95       	ret

000004e2 <lcd_write_data>:
 4e2:	61 e0       	ldi	r22, 0x01	; 1
 4e4:	0e 94 43 02 	call	0x486	; 0x486 <lcd_send_byte>
 4e8:	08 95       	ret

000004ea <lcd_2004_init>:
 4ea:	83 ed       	ldi	r24, 0xD3	; 211
 4ec:	90 e3       	ldi	r25, 0x30	; 48
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <lcd_2004_init+0x4>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <lcd_2004_init+0xa>
 4f4:	00 00       	nop
 4f6:	80 e3       	ldi	r24, 0x30	; 48
 4f8:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 4fc:	90 e1       	ldi	r25, 0x10	; 16
 4fe:	9a 95       	dec	r25
 500:	f1 f7       	brne	.-4      	; 0x4fe <lcd_2004_init+0x14>
 502:	00 c0       	rjmp	.+0      	; 0x504 <lcd_2004_init+0x1a>
 504:	80 e2       	ldi	r24, 0x20	; 32
 506:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 50a:	80 ec       	ldi	r24, 0xC0	; 192
 50c:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 510:	80 e1       	ldi	r24, 0x10	; 16
 512:	8a 95       	dec	r24
 514:	f1 f7       	brne	.-4      	; 0x512 <lcd_2004_init+0x28>
 516:	00 c0       	rjmp	.+0      	; 0x518 <lcd_2004_init+0x2e>
 518:	80 e2       	ldi	r24, 0x20	; 32
 51a:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 51e:	80 ec       	ldi	r24, 0xC0	; 192
 520:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 524:	90 e1       	ldi	r25, 0x10	; 16
 526:	9a 95       	dec	r25
 528:	f1 f7       	brne	.-4      	; 0x526 <lcd_2004_init+0x3c>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <lcd_2004_init+0x42>
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 532:	80 ef       	ldi	r24, 0xF0	; 240
 534:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 538:	80 e1       	ldi	r24, 0x10	; 16
 53a:	8a 95       	dec	r24
 53c:	f1 f7       	brne	.-4      	; 0x53a <lcd_2004_init+0x50>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <lcd_2004_init+0x56>
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 546:	80 e1       	ldi	r24, 0x10	; 16
 548:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 54c:	90 e1       	ldi	r25, 0x10	; 16
 54e:	9a 95       	dec	r25
 550:	f1 f7       	brne	.-4      	; 0x54e <lcd_2004_init+0x64>
 552:	00 c0       	rjmp	.+0      	; 0x554 <lcd_2004_init+0x6a>
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 55a:	80 ef       	ldi	r24, 0xF0	; 240
 55c:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 560:	80 e1       	ldi	r24, 0x10	; 16
 562:	8a 95       	dec	r24
 564:	f1 f7       	brne	.-4      	; 0x562 <lcd_2004_init+0x78>
 566:	00 c0       	rjmp	.+0      	; 0x568 <lcd_2004_init+0x7e>
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 56e:	80 ee       	ldi	r24, 0xE0	; 224
 570:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 574:	08 95       	ret

00000576 <lcd_set_line>:
 576:	81 30       	cpi	r24, 0x01	; 1
 578:	19 f0       	breq	.+6      	; 0x580 <lcd_set_line+0xa>
 57a:	82 30       	cpi	r24, 0x02	; 2
 57c:	29 f0       	breq	.+10     	; 0x588 <lcd_set_line+0x12>
 57e:	08 95       	ret
 580:	80 e8       	ldi	r24, 0x80	; 128
 582:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 586:	08 95       	ret
 588:	80 ec       	ldi	r24, 0xC0	; 192
 58a:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 58e:	08 95       	ret

00000590 <lcd_clear_screen>:
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 596:	83 ec       	ldi	r24, 0xC3	; 195
 598:	99 e0       	ldi	r25, 0x09	; 9
 59a:	01 97       	sbiw	r24, 0x01	; 1
 59c:	f1 f7       	brne	.-4      	; 0x59a <lcd_clear_screen+0xa>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <lcd_clear_screen+0x10>
 5a0:	00 00       	nop
 5a2:	08 95       	ret

000005a4 <lcd_send_string>:
void lcd_send_string(char* string)
{
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	ec 01       	movw	r28, r24
	while(*string)
 5aa:	88 81       	ld	r24, Y
 5ac:	88 23       	and	r24, r24
 5ae:	31 f0       	breq	.+12     	; 0x5bc <lcd_send_string+0x18>
 5b0:	21 96       	adiw	r28, 0x01	; 1
	{
		//Send value of pointer as data to LCD
		lcd_write_data(*string);
 5b2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <lcd_write_data>
		lcd_write_data((unsigned char)*str++);
	}
}
void lcd_send_string(char* string)
{
	while(*string)
 5b6:	89 91       	ld	r24, Y+
 5b8:	81 11       	cpse	r24, r1
 5ba:	fb cf       	rjmp	.-10     	; 0x5b2 <lcd_send_string+0xe>
		//Send value of pointer as data to LCD
		lcd_write_data(*string);
		//Increment string pointer
		string++;
	}
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	08 95       	ret

000005c2 <main>:
	//int dutycycle = 0x3FFF;
	unsigned int dutycycle = 300;
	static char buffer[64];
	uint8_t val = 0x00;
	//buffer = "Hello world";
	sprintf(buffer,"hello world");
 5c2:	c2 ec       	ldi	r28, 0xC2	; 194
 5c4:	d1 e0       	ldi	r29, 0x01	; 1
 5c6:	8c e0       	ldi	r24, 0x0C	; 12
 5c8:	e4 ea       	ldi	r30, 0xA4	; 164
 5ca:	f1 e0       	ldi	r31, 0x01	; 1
 5cc:	de 01       	movw	r26, r28
 5ce:	01 90       	ld	r0, Z+
 5d0:	0d 92       	st	X+, r0
 5d2:	8a 95       	dec	r24
 5d4:	e1 f7       	brne	.-8      	; 0x5ce <main+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d6:	2f ef       	ldi	r18, 0xFF	; 255
 5d8:	84 e3       	ldi	r24, 0x34	; 52
 5da:	9c e0       	ldi	r25, 0x0C	; 12
 5dc:	21 50       	subi	r18, 0x01	; 1
 5de:	80 40       	sbci	r24, 0x00	; 0
 5e0:	90 40       	sbci	r25, 0x00	; 0
 5e2:	e1 f7       	brne	.-8      	; 0x5dc <main+0x1a>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <main+0x24>
 5e6:	00 00       	nop
	static unsigned char hello[] = "Hello WORLD";
	_delay_ms(500);
	lcd_pin_init();
 5e8:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_pin_init>
	lcd_2004_init();
 5ec:	0e 94 75 02 	call	0x4ea	; 0x4ea <lcd_2004_init>
	lcd_clear_screen();
 5f0:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
	fan_init();
 5f4:	0e 94 53 00 	call	0xa6	; 0xa6 <fan_init>
	i2c_init();
 5f8:	0e 94 75 00 	call	0xea	; 0xea <i2c_init>
 5fc:	ef ef       	ldi	r30, 0xFF	; 255
 5fe:	f4 e3       	ldi	r31, 0x34	; 52
 600:	2c e0       	ldi	r18, 0x0C	; 12
 602:	e1 50       	subi	r30, 0x01	; 1
 604:	f0 40       	sbci	r31, 0x00	; 0
 606:	20 40       	sbci	r18, 0x00	; 0
 608:	e1 f7       	brne	.-8      	; 0x602 <main+0x40>
 60a:	00 c0       	rjmp	.+0      	; 0x60c <main+0x4a>
 60c:	00 00       	nop
	_delay_ms(500);
	val = i2c_read(MCP_ADDR_0,0x0001);
 60e:	61 e0       	ldi	r22, 0x01	; 1
 610:	70 e0       	ldi	r23, 0x00	; 0
 612:	80 ec       	ldi	r24, 0xC0	; 192
 614:	0e 94 7b 00 	call	0xf6	; 0xf6 <i2c_read>
 618:	16 2f       	mov	r17, r22
 61a:	8f ef       	ldi	r24, 0xFF	; 255
 61c:	91 e1       	ldi	r25, 0x11	; 17
 61e:	ea e7       	ldi	r30, 0x7A	; 122
 620:	81 50       	subi	r24, 0x01	; 1
 622:	90 40       	sbci	r25, 0x00	; 0
 624:	e0 40       	sbci	r30, 0x00	; 0
 626:	e1 f7       	brne	.-8      	; 0x620 <main+0x5e>
 628:	00 c0       	rjmp	.+0      	; 0x62a <main+0x68>
 62a:	00 00       	nop
	_delay_ms(5000);
	lcd_set_line(2);
 62c:	82 e0       	ldi	r24, 0x02	; 2
 62e:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
	sprintf(buffer,"val: %d",val);
 632:	1f 92       	push	r1
 634:	1f 93       	push	r17
 636:	80 eb       	ldi	r24, 0xB0	; 176
 638:	91 e0       	ldi	r25, 0x01	; 1
 63a:	9f 93       	push	r25
 63c:	8f 93       	push	r24
 63e:	df 93       	push	r29
 640:	cf 93       	push	r28
 642:	0e 94 8d 03 	call	0x71a	; 0x71a <sprintf>
	lcd_send_string(buffer);
 646:	ce 01       	movw	r24, r28
 648:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
	PORTB |= (1<<RELAY_PORT);
 64c:	2a 9a       	sbi	0x05, 2	; 5
 64e:	8f ef       	ldi	r24, 0xFF	; 255
 650:	94 e3       	ldi	r25, 0x34	; 52
 652:	ec e0       	ldi	r30, 0x0C	; 12
 654:	81 50       	subi	r24, 0x01	; 1
 656:	90 40       	sbci	r25, 0x00	; 0
 658:	e0 40       	sbci	r30, 0x00	; 0
 65a:	e1 f7       	brne	.-8      	; 0x654 <main+0x92>
 65c:	00 c0       	rjmp	.+0      	; 0x65e <main+0x9c>
 65e:	00 00       	nop
	_delay_ms(500);
	PORTB &= ~(1<<RELAY_PORT);
 660:	2a 98       	cbi	0x05, 2	; 5
 662:	ff ef       	ldi	r31, 0xFF	; 255
 664:	20 e7       	ldi	r18, 0x70	; 112
 666:	82 e0       	ldi	r24, 0x02	; 2
 668:	f1 50       	subi	r31, 0x01	; 1
 66a:	20 40       	sbci	r18, 0x00	; 0
 66c:	80 40       	sbci	r24, 0x00	; 0
 66e:	e1 f7       	brne	.-8      	; 0x668 <main+0xa6>
 670:	00 c0       	rjmp	.+0      	; 0x672 <main+0xb0>
 672:	00 00       	nop
	_delay_ms(100);
	PORTB |= (1<<RELAY_PORT);
 674:	2a 9a       	sbi	0x05, 2	; 5
 676:	9f ef       	ldi	r25, 0xFF	; 255
 678:	e0 e7       	ldi	r30, 0x70	; 112
 67a:	f2 e0       	ldi	r31, 0x02	; 2
 67c:	91 50       	subi	r25, 0x01	; 1
 67e:	e0 40       	sbci	r30, 0x00	; 0
 680:	f0 40       	sbci	r31, 0x00	; 0
 682:	e1 f7       	brne	.-8      	; 0x67c <main+0xba>
 684:	00 c0       	rjmp	.+0      	; 0x686 <main+0xc4>
 686:	00 00       	nop
	_delay_ms(100);
	PORTB &= ~(1<<RELAY_PORT);
 688:	2a 98       	cbi	0x05, 2	; 5
 68a:	2f ef       	ldi	r18, 0xFF	; 255
 68c:	89 e6       	ldi	r24, 0x69	; 105
 68e:	98 e1       	ldi	r25, 0x18	; 24
 690:	21 50       	subi	r18, 0x01	; 1
 692:	80 40       	sbci	r24, 0x00	; 0
 694:	90 40       	sbci	r25, 0x00	; 0
 696:	e1 f7       	brne	.-8      	; 0x690 <main+0xce>
 698:	00 c0       	rjmp	.+0      	; 0x69a <main+0xd8>
 69a:	00 00       	nop
		//_delay_ms(10);
		lcd_send_string("b");
		lcd_send_string("o");
		lcd_send_string("p");*/
		_delay_ms(1000);
		PORTB &= ~(1<<RELAY_PORT);
 69c:	2a 98       	cbi	0x05, 2	; 5
 69e:	0f 90       	pop	r0
 6a0:	0f 90       	pop	r0
 6a2:	0f 90       	pop	r0
 6a4:	0f 90       	pop	r0
 6a6:	0f 90       	pop	r0
 6a8:	0f 90       	pop	r0
		//dutycycle += 0x00FF;
		dutycycle -= 10;
 6aa:	c2 e2       	ldi	r28, 0x22	; 34
 6ac:	d1 e0       	ldi	r29, 0x01	; 1
		if (dutycycle <= 0)
		{
			dutycycle = 320;
		}
		OCR1A = dutycycle;
 6ae:	0f 2e       	mov	r0, r31
 6b0:	f8 e8       	ldi	r31, 0x88	; 136
 6b2:	cf 2e       	mov	r12, r31
 6b4:	d1 2c       	mov	r13, r1
 6b6:	f0 2d       	mov	r31, r0
		
		sprintf(buffer,"hello %d",dutycycle);
 6b8:	0f 2e       	mov	r0, r31
 6ba:	f8 eb       	ldi	r31, 0xB8	; 184
 6bc:	ef 2e       	mov	r14, r31
 6be:	f1 e0       	ldi	r31, 0x01	; 1
 6c0:	ff 2e       	mov	r15, r31
 6c2:	f0 2d       	mov	r31, r0
 6c4:	02 ec       	ldi	r16, 0xC2	; 194
 6c6:	11 e0       	ldi	r17, 0x01	; 1
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <main+0x10c>
		PORTB &= ~(1<<RELAY_PORT);
		//dutycycle += 0x00FF;
		dutycycle -= 10;
		if (dutycycle <= 0)
		{
			dutycycle = 320;
 6ca:	c0 e4       	ldi	r28, 0x40	; 64
 6cc:	d1 e0       	ldi	r29, 0x01	; 1
		}
		OCR1A = dutycycle;
 6ce:	f6 01       	movw	r30, r12
 6d0:	d1 83       	std	Z+1, r29	; 0x01
 6d2:	c0 83       	st	Z, r28
		
		sprintf(buffer,"hello %d",dutycycle);
 6d4:	df 93       	push	r29
 6d6:	cf 93       	push	r28
 6d8:	ff 92       	push	r15
 6da:	ef 92       	push	r14
 6dc:	1f 93       	push	r17
 6de:	0f 93       	push	r16
 6e0:	0e 94 8d 03 	call	0x71a	; 0x71a <sprintf>
		lcd_clear_screen();
 6e4:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		//_delay_ms(10);
		lcd_set_line(1);
 6e8:	81 e0       	ldi	r24, 0x01	; 1
 6ea:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		//_delay_ms(10);
		lcd_send_string(buffer);
 6ee:	c8 01       	movw	r24, r16
 6f0:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 6f4:	8f ef       	ldi	r24, 0xFF	; 255
 6f6:	99 e6       	ldi	r25, 0x69	; 105
 6f8:	e8 e1       	ldi	r30, 0x18	; 24
 6fa:	81 50       	subi	r24, 0x01	; 1
 6fc:	90 40       	sbci	r25, 0x00	; 0
 6fe:	e0 40       	sbci	r30, 0x00	; 0
 700:	e1 f7       	brne	.-8      	; 0x6fa <main+0x138>
 702:	00 c0       	rjmp	.+0      	; 0x704 <main+0x142>
 704:	00 00       	nop
		//_delay_ms(10);
		lcd_send_string("b");
		lcd_send_string("o");
		lcd_send_string("p");*/
		_delay_ms(1000);
		PORTB &= ~(1<<RELAY_PORT);
 706:	2a 98       	cbi	0x05, 2	; 5
		//dutycycle += 0x00FF;
		dutycycle -= 10;
 708:	2a 97       	sbiw	r28, 0x0a	; 10
		if (dutycycle <= 0)
 70a:	0f 90       	pop	r0
 70c:	0f 90       	pop	r0
 70e:	0f 90       	pop	r0
 710:	0f 90       	pop	r0
 712:	0f 90       	pop	r0
 714:	0f 90       	pop	r0
 716:	c9 f2       	breq	.-78     	; 0x6ca <main+0x108>
 718:	da cf       	rjmp	.-76     	; 0x6ce <main+0x10c>

0000071a <sprintf>:
 71a:	ae e0       	ldi	r26, 0x0E	; 14
 71c:	b0 e0       	ldi	r27, 0x00	; 0
 71e:	e3 e9       	ldi	r30, 0x93	; 147
 720:	f3 e0       	ldi	r31, 0x03	; 3
 722:	0c 94 4e 06 	jmp	0xc9c	; 0xc9c <__prologue_saves__+0x1c>
 726:	0d 89       	ldd	r16, Y+21	; 0x15
 728:	1e 89       	ldd	r17, Y+22	; 0x16
 72a:	86 e0       	ldi	r24, 0x06	; 6
 72c:	8c 83       	std	Y+4, r24	; 0x04
 72e:	1a 83       	std	Y+2, r17	; 0x02
 730:	09 83       	std	Y+1, r16	; 0x01
 732:	8f ef       	ldi	r24, 0xFF	; 255
 734:	9f e7       	ldi	r25, 0x7F	; 127
 736:	9e 83       	std	Y+6, r25	; 0x06
 738:	8d 83       	std	Y+5, r24	; 0x05
 73a:	ae 01       	movw	r20, r28
 73c:	47 5e       	subi	r20, 0xE7	; 231
 73e:	5f 4f       	sbci	r21, 0xFF	; 255
 740:	6f 89       	ldd	r22, Y+23	; 0x17
 742:	78 8d       	ldd	r23, Y+24	; 0x18
 744:	ce 01       	movw	r24, r28
 746:	01 96       	adiw	r24, 0x01	; 1
 748:	0e 94 af 03 	call	0x75e	; 0x75e <vfprintf>
 74c:	ef 81       	ldd	r30, Y+7	; 0x07
 74e:	f8 85       	ldd	r31, Y+8	; 0x08
 750:	e0 0f       	add	r30, r16
 752:	f1 1f       	adc	r31, r17
 754:	10 82       	st	Z, r1
 756:	2e 96       	adiw	r28, 0x0e	; 14
 758:	e4 e0       	ldi	r30, 0x04	; 4
 75a:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <__epilogue_restores__+0x1c>

0000075e <vfprintf>:
 75e:	ab e0       	ldi	r26, 0x0B	; 11
 760:	b0 e0       	ldi	r27, 0x00	; 0
 762:	e5 eb       	ldi	r30, 0xB5	; 181
 764:	f3 e0       	ldi	r31, 0x03	; 3
 766:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__prologue_saves__>
 76a:	6c 01       	movw	r12, r24
 76c:	7b 01       	movw	r14, r22
 76e:	8a 01       	movw	r16, r20
 770:	fc 01       	movw	r30, r24
 772:	17 82       	std	Z+7, r1	; 0x07
 774:	16 82       	std	Z+6, r1	; 0x06
 776:	83 81       	ldd	r24, Z+3	; 0x03
 778:	81 ff       	sbrs	r24, 1
 77a:	cc c1       	rjmp	.+920    	; 0xb14 <__stack+0x215>
 77c:	ce 01       	movw	r24, r28
 77e:	01 96       	adiw	r24, 0x01	; 1
 780:	3c 01       	movw	r6, r24
 782:	f6 01       	movw	r30, r12
 784:	93 81       	ldd	r25, Z+3	; 0x03
 786:	f7 01       	movw	r30, r14
 788:	93 fd       	sbrc	r25, 3
 78a:	85 91       	lpm	r24, Z+
 78c:	93 ff       	sbrs	r25, 3
 78e:	81 91       	ld	r24, Z+
 790:	7f 01       	movw	r14, r30
 792:	88 23       	and	r24, r24
 794:	09 f4       	brne	.+2      	; 0x798 <vfprintf+0x3a>
 796:	ba c1       	rjmp	.+884    	; 0xb0c <__stack+0x20d>
 798:	85 32       	cpi	r24, 0x25	; 37
 79a:	39 f4       	brne	.+14     	; 0x7aa <vfprintf+0x4c>
 79c:	93 fd       	sbrc	r25, 3
 79e:	85 91       	lpm	r24, Z+
 7a0:	93 ff       	sbrs	r25, 3
 7a2:	81 91       	ld	r24, Z+
 7a4:	7f 01       	movw	r14, r30
 7a6:	85 32       	cpi	r24, 0x25	; 37
 7a8:	29 f4       	brne	.+10     	; 0x7b4 <vfprintf+0x56>
 7aa:	b6 01       	movw	r22, r12
 7ac:	90 e0       	ldi	r25, 0x00	; 0
 7ae:	0e 94 a6 05 	call	0xb4c	; 0xb4c <fputc>
 7b2:	e7 cf       	rjmp	.-50     	; 0x782 <vfprintf+0x24>
 7b4:	91 2c       	mov	r9, r1
 7b6:	21 2c       	mov	r2, r1
 7b8:	31 2c       	mov	r3, r1
 7ba:	ff e1       	ldi	r31, 0x1F	; 31
 7bc:	f3 15       	cp	r31, r3
 7be:	d8 f0       	brcs	.+54     	; 0x7f6 <vfprintf+0x98>
 7c0:	8b 32       	cpi	r24, 0x2B	; 43
 7c2:	79 f0       	breq	.+30     	; 0x7e2 <vfprintf+0x84>
 7c4:	38 f4       	brcc	.+14     	; 0x7d4 <vfprintf+0x76>
 7c6:	80 32       	cpi	r24, 0x20	; 32
 7c8:	79 f0       	breq	.+30     	; 0x7e8 <vfprintf+0x8a>
 7ca:	83 32       	cpi	r24, 0x23	; 35
 7cc:	a1 f4       	brne	.+40     	; 0x7f6 <vfprintf+0x98>
 7ce:	23 2d       	mov	r18, r3
 7d0:	20 61       	ori	r18, 0x10	; 16
 7d2:	1d c0       	rjmp	.+58     	; 0x80e <vfprintf+0xb0>
 7d4:	8d 32       	cpi	r24, 0x2D	; 45
 7d6:	61 f0       	breq	.+24     	; 0x7f0 <vfprintf+0x92>
 7d8:	80 33       	cpi	r24, 0x30	; 48
 7da:	69 f4       	brne	.+26     	; 0x7f6 <vfprintf+0x98>
 7dc:	23 2d       	mov	r18, r3
 7de:	21 60       	ori	r18, 0x01	; 1
 7e0:	16 c0       	rjmp	.+44     	; 0x80e <vfprintf+0xb0>
 7e2:	83 2d       	mov	r24, r3
 7e4:	82 60       	ori	r24, 0x02	; 2
 7e6:	38 2e       	mov	r3, r24
 7e8:	e3 2d       	mov	r30, r3
 7ea:	e4 60       	ori	r30, 0x04	; 4
 7ec:	3e 2e       	mov	r3, r30
 7ee:	2a c0       	rjmp	.+84     	; 0x844 <vfprintf+0xe6>
 7f0:	f3 2d       	mov	r31, r3
 7f2:	f8 60       	ori	r31, 0x08	; 8
 7f4:	1d c0       	rjmp	.+58     	; 0x830 <vfprintf+0xd2>
 7f6:	37 fc       	sbrc	r3, 7
 7f8:	2d c0       	rjmp	.+90     	; 0x854 <vfprintf+0xf6>
 7fa:	20 ed       	ldi	r18, 0xD0	; 208
 7fc:	28 0f       	add	r18, r24
 7fe:	2a 30       	cpi	r18, 0x0A	; 10
 800:	40 f0       	brcs	.+16     	; 0x812 <vfprintf+0xb4>
 802:	8e 32       	cpi	r24, 0x2E	; 46
 804:	b9 f4       	brne	.+46     	; 0x834 <vfprintf+0xd6>
 806:	36 fc       	sbrc	r3, 6
 808:	81 c1       	rjmp	.+770    	; 0xb0c <__stack+0x20d>
 80a:	23 2d       	mov	r18, r3
 80c:	20 64       	ori	r18, 0x40	; 64
 80e:	32 2e       	mov	r3, r18
 810:	19 c0       	rjmp	.+50     	; 0x844 <vfprintf+0xe6>
 812:	36 fe       	sbrs	r3, 6
 814:	06 c0       	rjmp	.+12     	; 0x822 <vfprintf+0xc4>
 816:	8a e0       	ldi	r24, 0x0A	; 10
 818:	98 9e       	mul	r9, r24
 81a:	20 0d       	add	r18, r0
 81c:	11 24       	eor	r1, r1
 81e:	92 2e       	mov	r9, r18
 820:	11 c0       	rjmp	.+34     	; 0x844 <vfprintf+0xe6>
 822:	ea e0       	ldi	r30, 0x0A	; 10
 824:	2e 9e       	mul	r2, r30
 826:	20 0d       	add	r18, r0
 828:	11 24       	eor	r1, r1
 82a:	22 2e       	mov	r2, r18
 82c:	f3 2d       	mov	r31, r3
 82e:	f0 62       	ori	r31, 0x20	; 32
 830:	3f 2e       	mov	r3, r31
 832:	08 c0       	rjmp	.+16     	; 0x844 <vfprintf+0xe6>
 834:	8c 36       	cpi	r24, 0x6C	; 108
 836:	21 f4       	brne	.+8      	; 0x840 <vfprintf+0xe2>
 838:	83 2d       	mov	r24, r3
 83a:	80 68       	ori	r24, 0x80	; 128
 83c:	38 2e       	mov	r3, r24
 83e:	02 c0       	rjmp	.+4      	; 0x844 <vfprintf+0xe6>
 840:	88 36       	cpi	r24, 0x68	; 104
 842:	41 f4       	brne	.+16     	; 0x854 <vfprintf+0xf6>
 844:	f7 01       	movw	r30, r14
 846:	93 fd       	sbrc	r25, 3
 848:	85 91       	lpm	r24, Z+
 84a:	93 ff       	sbrs	r25, 3
 84c:	81 91       	ld	r24, Z+
 84e:	7f 01       	movw	r14, r30
 850:	81 11       	cpse	r24, r1
 852:	b3 cf       	rjmp	.-154    	; 0x7ba <vfprintf+0x5c>
 854:	98 2f       	mov	r25, r24
 856:	9f 7d       	andi	r25, 0xDF	; 223
 858:	95 54       	subi	r25, 0x45	; 69
 85a:	93 30       	cpi	r25, 0x03	; 3
 85c:	28 f4       	brcc	.+10     	; 0x868 <vfprintf+0x10a>
 85e:	0c 5f       	subi	r16, 0xFC	; 252
 860:	1f 4f       	sbci	r17, 0xFF	; 255
 862:	9f e3       	ldi	r25, 0x3F	; 63
 864:	99 83       	std	Y+1, r25	; 0x01
 866:	0d c0       	rjmp	.+26     	; 0x882 <vfprintf+0x124>
 868:	83 36       	cpi	r24, 0x63	; 99
 86a:	31 f0       	breq	.+12     	; 0x878 <vfprintf+0x11a>
 86c:	83 37       	cpi	r24, 0x73	; 115
 86e:	71 f0       	breq	.+28     	; 0x88c <vfprintf+0x12e>
 870:	83 35       	cpi	r24, 0x53	; 83
 872:	09 f0       	breq	.+2      	; 0x876 <vfprintf+0x118>
 874:	59 c0       	rjmp	.+178    	; 0x928 <__stack+0x29>
 876:	21 c0       	rjmp	.+66     	; 0x8ba <vfprintf+0x15c>
 878:	f8 01       	movw	r30, r16
 87a:	80 81       	ld	r24, Z
 87c:	89 83       	std	Y+1, r24	; 0x01
 87e:	0e 5f       	subi	r16, 0xFE	; 254
 880:	1f 4f       	sbci	r17, 0xFF	; 255
 882:	88 24       	eor	r8, r8
 884:	83 94       	inc	r8
 886:	91 2c       	mov	r9, r1
 888:	53 01       	movw	r10, r6
 88a:	13 c0       	rjmp	.+38     	; 0x8b2 <vfprintf+0x154>
 88c:	28 01       	movw	r4, r16
 88e:	f2 e0       	ldi	r31, 0x02	; 2
 890:	4f 0e       	add	r4, r31
 892:	51 1c       	adc	r5, r1
 894:	f8 01       	movw	r30, r16
 896:	a0 80       	ld	r10, Z
 898:	b1 80       	ldd	r11, Z+1	; 0x01
 89a:	36 fe       	sbrs	r3, 6
 89c:	03 c0       	rjmp	.+6      	; 0x8a4 <vfprintf+0x146>
 89e:	69 2d       	mov	r22, r9
 8a0:	70 e0       	ldi	r23, 0x00	; 0
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <vfprintf+0x14a>
 8a4:	6f ef       	ldi	r22, 0xFF	; 255
 8a6:	7f ef       	ldi	r23, 0xFF	; 255
 8a8:	c5 01       	movw	r24, r10
 8aa:	0e 94 9b 05 	call	0xb36	; 0xb36 <strnlen>
 8ae:	4c 01       	movw	r8, r24
 8b0:	82 01       	movw	r16, r4
 8b2:	f3 2d       	mov	r31, r3
 8b4:	ff 77       	andi	r31, 0x7F	; 127
 8b6:	3f 2e       	mov	r3, r31
 8b8:	16 c0       	rjmp	.+44     	; 0x8e6 <vfprintf+0x188>
 8ba:	28 01       	movw	r4, r16
 8bc:	22 e0       	ldi	r18, 0x02	; 2
 8be:	42 0e       	add	r4, r18
 8c0:	51 1c       	adc	r5, r1
 8c2:	f8 01       	movw	r30, r16
 8c4:	a0 80       	ld	r10, Z
 8c6:	b1 80       	ldd	r11, Z+1	; 0x01
 8c8:	36 fe       	sbrs	r3, 6
 8ca:	03 c0       	rjmp	.+6      	; 0x8d2 <vfprintf+0x174>
 8cc:	69 2d       	mov	r22, r9
 8ce:	70 e0       	ldi	r23, 0x00	; 0
 8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <vfprintf+0x178>
 8d2:	6f ef       	ldi	r22, 0xFF	; 255
 8d4:	7f ef       	ldi	r23, 0xFF	; 255
 8d6:	c5 01       	movw	r24, r10
 8d8:	0e 94 90 05 	call	0xb20	; 0xb20 <strnlen_P>
 8dc:	4c 01       	movw	r8, r24
 8de:	f3 2d       	mov	r31, r3
 8e0:	f0 68       	ori	r31, 0x80	; 128
 8e2:	3f 2e       	mov	r3, r31
 8e4:	82 01       	movw	r16, r4
 8e6:	33 fc       	sbrc	r3, 3
 8e8:	1b c0       	rjmp	.+54     	; 0x920 <__stack+0x21>
 8ea:	82 2d       	mov	r24, r2
 8ec:	90 e0       	ldi	r25, 0x00	; 0
 8ee:	88 16       	cp	r8, r24
 8f0:	99 06       	cpc	r9, r25
 8f2:	b0 f4       	brcc	.+44     	; 0x920 <__stack+0x21>
 8f4:	b6 01       	movw	r22, r12
 8f6:	80 e2       	ldi	r24, 0x20	; 32
 8f8:	90 e0       	ldi	r25, 0x00	; 0
 8fa:	0e 94 a6 05 	call	0xb4c	; 0xb4c <fputc>
 8fe:	2a 94       	dec	r2
 900:	f4 cf       	rjmp	.-24     	; 0x8ea <vfprintf+0x18c>
 902:	f5 01       	movw	r30, r10
 904:	37 fc       	sbrc	r3, 7
 906:	85 91       	lpm	r24, Z+
 908:	37 fe       	sbrs	r3, 7
 90a:	81 91       	ld	r24, Z+
 90c:	5f 01       	movw	r10, r30
 90e:	b6 01       	movw	r22, r12
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	0e 94 a6 05 	call	0xb4c	; 0xb4c <fputc>
 916:	21 10       	cpse	r2, r1
 918:	2a 94       	dec	r2
 91a:	21 e0       	ldi	r18, 0x01	; 1
 91c:	82 1a       	sub	r8, r18
 91e:	91 08       	sbc	r9, r1
 920:	81 14       	cp	r8, r1
 922:	91 04       	cpc	r9, r1
 924:	71 f7       	brne	.-36     	; 0x902 <__stack+0x3>
 926:	e8 c0       	rjmp	.+464    	; 0xaf8 <__stack+0x1f9>
 928:	84 36       	cpi	r24, 0x64	; 100
 92a:	11 f0       	breq	.+4      	; 0x930 <__stack+0x31>
 92c:	89 36       	cpi	r24, 0x69	; 105
 92e:	41 f5       	brne	.+80     	; 0x980 <__stack+0x81>
 930:	f8 01       	movw	r30, r16
 932:	37 fe       	sbrs	r3, 7
 934:	07 c0       	rjmp	.+14     	; 0x944 <__stack+0x45>
 936:	60 81       	ld	r22, Z
 938:	71 81       	ldd	r23, Z+1	; 0x01
 93a:	82 81       	ldd	r24, Z+2	; 0x02
 93c:	93 81       	ldd	r25, Z+3	; 0x03
 93e:	0c 5f       	subi	r16, 0xFC	; 252
 940:	1f 4f       	sbci	r17, 0xFF	; 255
 942:	08 c0       	rjmp	.+16     	; 0x954 <__stack+0x55>
 944:	60 81       	ld	r22, Z
 946:	71 81       	ldd	r23, Z+1	; 0x01
 948:	07 2e       	mov	r0, r23
 94a:	00 0c       	add	r0, r0
 94c:	88 0b       	sbc	r24, r24
 94e:	99 0b       	sbc	r25, r25
 950:	0e 5f       	subi	r16, 0xFE	; 254
 952:	1f 4f       	sbci	r17, 0xFF	; 255
 954:	f3 2d       	mov	r31, r3
 956:	ff 76       	andi	r31, 0x6F	; 111
 958:	3f 2e       	mov	r3, r31
 95a:	97 ff       	sbrs	r25, 7
 95c:	09 c0       	rjmp	.+18     	; 0x970 <__stack+0x71>
 95e:	90 95       	com	r25
 960:	80 95       	com	r24
 962:	70 95       	com	r23
 964:	61 95       	neg	r22
 966:	7f 4f       	sbci	r23, 0xFF	; 255
 968:	8f 4f       	sbci	r24, 0xFF	; 255
 96a:	9f 4f       	sbci	r25, 0xFF	; 255
 96c:	f0 68       	ori	r31, 0x80	; 128
 96e:	3f 2e       	mov	r3, r31
 970:	2a e0       	ldi	r18, 0x0A	; 10
 972:	30 e0       	ldi	r19, 0x00	; 0
 974:	a3 01       	movw	r20, r6
 976:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__ultoa_invert>
 97a:	88 2e       	mov	r8, r24
 97c:	86 18       	sub	r8, r6
 97e:	45 c0       	rjmp	.+138    	; 0xa0a <__stack+0x10b>
 980:	85 37       	cpi	r24, 0x75	; 117
 982:	31 f4       	brne	.+12     	; 0x990 <__stack+0x91>
 984:	23 2d       	mov	r18, r3
 986:	2f 7e       	andi	r18, 0xEF	; 239
 988:	b2 2e       	mov	r11, r18
 98a:	2a e0       	ldi	r18, 0x0A	; 10
 98c:	30 e0       	ldi	r19, 0x00	; 0
 98e:	25 c0       	rjmp	.+74     	; 0x9da <__stack+0xdb>
 990:	93 2d       	mov	r25, r3
 992:	99 7f       	andi	r25, 0xF9	; 249
 994:	b9 2e       	mov	r11, r25
 996:	8f 36       	cpi	r24, 0x6F	; 111
 998:	c1 f0       	breq	.+48     	; 0x9ca <__stack+0xcb>
 99a:	18 f4       	brcc	.+6      	; 0x9a2 <__stack+0xa3>
 99c:	88 35       	cpi	r24, 0x58	; 88
 99e:	79 f0       	breq	.+30     	; 0x9be <__stack+0xbf>
 9a0:	b5 c0       	rjmp	.+362    	; 0xb0c <__stack+0x20d>
 9a2:	80 37       	cpi	r24, 0x70	; 112
 9a4:	19 f0       	breq	.+6      	; 0x9ac <__stack+0xad>
 9a6:	88 37       	cpi	r24, 0x78	; 120
 9a8:	21 f0       	breq	.+8      	; 0x9b2 <__stack+0xb3>
 9aa:	b0 c0       	rjmp	.+352    	; 0xb0c <__stack+0x20d>
 9ac:	e9 2f       	mov	r30, r25
 9ae:	e0 61       	ori	r30, 0x10	; 16
 9b0:	be 2e       	mov	r11, r30
 9b2:	b4 fe       	sbrs	r11, 4
 9b4:	0d c0       	rjmp	.+26     	; 0x9d0 <__stack+0xd1>
 9b6:	fb 2d       	mov	r31, r11
 9b8:	f4 60       	ori	r31, 0x04	; 4
 9ba:	bf 2e       	mov	r11, r31
 9bc:	09 c0       	rjmp	.+18     	; 0x9d0 <__stack+0xd1>
 9be:	34 fe       	sbrs	r3, 4
 9c0:	0a c0       	rjmp	.+20     	; 0x9d6 <__stack+0xd7>
 9c2:	29 2f       	mov	r18, r25
 9c4:	26 60       	ori	r18, 0x06	; 6
 9c6:	b2 2e       	mov	r11, r18
 9c8:	06 c0       	rjmp	.+12     	; 0x9d6 <__stack+0xd7>
 9ca:	28 e0       	ldi	r18, 0x08	; 8
 9cc:	30 e0       	ldi	r19, 0x00	; 0
 9ce:	05 c0       	rjmp	.+10     	; 0x9da <__stack+0xdb>
 9d0:	20 e1       	ldi	r18, 0x10	; 16
 9d2:	30 e0       	ldi	r19, 0x00	; 0
 9d4:	02 c0       	rjmp	.+4      	; 0x9da <__stack+0xdb>
 9d6:	20 e1       	ldi	r18, 0x10	; 16
 9d8:	32 e0       	ldi	r19, 0x02	; 2
 9da:	f8 01       	movw	r30, r16
 9dc:	b7 fe       	sbrs	r11, 7
 9de:	07 c0       	rjmp	.+14     	; 0x9ee <__stack+0xef>
 9e0:	60 81       	ld	r22, Z
 9e2:	71 81       	ldd	r23, Z+1	; 0x01
 9e4:	82 81       	ldd	r24, Z+2	; 0x02
 9e6:	93 81       	ldd	r25, Z+3	; 0x03
 9e8:	0c 5f       	subi	r16, 0xFC	; 252
 9ea:	1f 4f       	sbci	r17, 0xFF	; 255
 9ec:	06 c0       	rjmp	.+12     	; 0x9fa <__stack+0xfb>
 9ee:	60 81       	ld	r22, Z
 9f0:	71 81       	ldd	r23, Z+1	; 0x01
 9f2:	80 e0       	ldi	r24, 0x00	; 0
 9f4:	90 e0       	ldi	r25, 0x00	; 0
 9f6:	0e 5f       	subi	r16, 0xFE	; 254
 9f8:	1f 4f       	sbci	r17, 0xFF	; 255
 9fa:	a3 01       	movw	r20, r6
 9fc:	0e 94 e2 05 	call	0xbc4	; 0xbc4 <__ultoa_invert>
 a00:	88 2e       	mov	r8, r24
 a02:	86 18       	sub	r8, r6
 a04:	fb 2d       	mov	r31, r11
 a06:	ff 77       	andi	r31, 0x7F	; 127
 a08:	3f 2e       	mov	r3, r31
 a0a:	36 fe       	sbrs	r3, 6
 a0c:	0d c0       	rjmp	.+26     	; 0xa28 <__stack+0x129>
 a0e:	23 2d       	mov	r18, r3
 a10:	2e 7f       	andi	r18, 0xFE	; 254
 a12:	a2 2e       	mov	r10, r18
 a14:	89 14       	cp	r8, r9
 a16:	58 f4       	brcc	.+22     	; 0xa2e <__stack+0x12f>
 a18:	34 fe       	sbrs	r3, 4
 a1a:	0b c0       	rjmp	.+22     	; 0xa32 <__stack+0x133>
 a1c:	32 fc       	sbrc	r3, 2
 a1e:	09 c0       	rjmp	.+18     	; 0xa32 <__stack+0x133>
 a20:	83 2d       	mov	r24, r3
 a22:	8e 7e       	andi	r24, 0xEE	; 238
 a24:	a8 2e       	mov	r10, r24
 a26:	05 c0       	rjmp	.+10     	; 0xa32 <__stack+0x133>
 a28:	b8 2c       	mov	r11, r8
 a2a:	a3 2c       	mov	r10, r3
 a2c:	03 c0       	rjmp	.+6      	; 0xa34 <__stack+0x135>
 a2e:	b8 2c       	mov	r11, r8
 a30:	01 c0       	rjmp	.+2      	; 0xa34 <__stack+0x135>
 a32:	b9 2c       	mov	r11, r9
 a34:	a4 fe       	sbrs	r10, 4
 a36:	0f c0       	rjmp	.+30     	; 0xa56 <__stack+0x157>
 a38:	fe 01       	movw	r30, r28
 a3a:	e8 0d       	add	r30, r8
 a3c:	f1 1d       	adc	r31, r1
 a3e:	80 81       	ld	r24, Z
 a40:	80 33       	cpi	r24, 0x30	; 48
 a42:	21 f4       	brne	.+8      	; 0xa4c <__stack+0x14d>
 a44:	9a 2d       	mov	r25, r10
 a46:	99 7e       	andi	r25, 0xE9	; 233
 a48:	a9 2e       	mov	r10, r25
 a4a:	09 c0       	rjmp	.+18     	; 0xa5e <__stack+0x15f>
 a4c:	a2 fe       	sbrs	r10, 2
 a4e:	06 c0       	rjmp	.+12     	; 0xa5c <__stack+0x15d>
 a50:	b3 94       	inc	r11
 a52:	b3 94       	inc	r11
 a54:	04 c0       	rjmp	.+8      	; 0xa5e <__stack+0x15f>
 a56:	8a 2d       	mov	r24, r10
 a58:	86 78       	andi	r24, 0x86	; 134
 a5a:	09 f0       	breq	.+2      	; 0xa5e <__stack+0x15f>
 a5c:	b3 94       	inc	r11
 a5e:	a3 fc       	sbrc	r10, 3
 a60:	11 c0       	rjmp	.+34     	; 0xa84 <__stack+0x185>
 a62:	a0 fe       	sbrs	r10, 0
 a64:	06 c0       	rjmp	.+12     	; 0xa72 <__stack+0x173>
 a66:	b2 14       	cp	r11, r2
 a68:	88 f4       	brcc	.+34     	; 0xa8c <__stack+0x18d>
 a6a:	28 0c       	add	r2, r8
 a6c:	92 2c       	mov	r9, r2
 a6e:	9b 18       	sub	r9, r11
 a70:	0e c0       	rjmp	.+28     	; 0xa8e <__stack+0x18f>
 a72:	b2 14       	cp	r11, r2
 a74:	60 f4       	brcc	.+24     	; 0xa8e <__stack+0x18f>
 a76:	b6 01       	movw	r22, r12
 a78:	80 e2       	ldi	r24, 0x20	; 32
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	0e 94 a6 05 	call	0xb4c	; 0xb4c <fputc>
 a80:	b3 94       	inc	r11
 a82:	f7 cf       	rjmp	.-18     	; 0xa72 <__stack+0x173>
 a84:	b2 14       	cp	r11, r2
 a86:	18 f4       	brcc	.+6      	; 0xa8e <__stack+0x18f>
 a88:	2b 18       	sub	r2, r11
 a8a:	02 c0       	rjmp	.+4      	; 0xa90 <__stack+0x191>
 a8c:	98 2c       	mov	r9, r8
 a8e:	21 2c       	mov	r2, r1
 a90:	a4 fe       	sbrs	r10, 4
 a92:	10 c0       	rjmp	.+32     	; 0xab4 <__stack+0x1b5>
 a94:	b6 01       	movw	r22, r12
 a96:	80 e3       	ldi	r24, 0x30	; 48
 a98:	90 e0       	ldi	r25, 0x00	; 0
 a9a:	0e 94 a6 05 	call	0xb4c	; 0xb4c <fputc>
 a9e:	a2 fe       	sbrs	r10, 2
 aa0:	17 c0       	rjmp	.+46     	; 0xad0 <__stack+0x1d1>
 aa2:	a1 fc       	sbrc	r10, 1
 aa4:	03 c0       	rjmp	.+6      	; 0xaac <__stack+0x1ad>
 aa6:	88 e7       	ldi	r24, 0x78	; 120
 aa8:	90 e0       	ldi	r25, 0x00	; 0
 aaa:	02 c0       	rjmp	.+4      	; 0xab0 <__stack+0x1b1>
 aac:	88 e5       	ldi	r24, 0x58	; 88
 aae:	90 e0       	ldi	r25, 0x00	; 0
 ab0:	b6 01       	movw	r22, r12
 ab2:	0c c0       	rjmp	.+24     	; 0xacc <__stack+0x1cd>
 ab4:	8a 2d       	mov	r24, r10
 ab6:	86 78       	andi	r24, 0x86	; 134
 ab8:	59 f0       	breq	.+22     	; 0xad0 <__stack+0x1d1>
 aba:	a1 fe       	sbrs	r10, 1
 abc:	02 c0       	rjmp	.+4      	; 0xac2 <__stack+0x1c3>
 abe:	8b e2       	ldi	r24, 0x2B	; 43
 ac0:	01 c0       	rjmp	.+2      	; 0xac4 <__stack+0x1c5>
 ac2:	80 e2       	ldi	r24, 0x20	; 32
 ac4:	a7 fc       	sbrc	r10, 7
 ac6:	8d e2       	ldi	r24, 0x2D	; 45
 ac8:	b6 01       	movw	r22, r12
 aca:	90 e0       	ldi	r25, 0x00	; 0
 acc:	0e 94 a6 05 	call	0xb4c	; 0xb4c <fputc>
 ad0:	89 14       	cp	r8, r9
 ad2:	38 f4       	brcc	.+14     	; 0xae2 <__stack+0x1e3>
 ad4:	b6 01       	movw	r22, r12
 ad6:	80 e3       	ldi	r24, 0x30	; 48
 ad8:	90 e0       	ldi	r25, 0x00	; 0
 ada:	0e 94 a6 05 	call	0xb4c	; 0xb4c <fputc>
 ade:	9a 94       	dec	r9
 ae0:	f7 cf       	rjmp	.-18     	; 0xad0 <__stack+0x1d1>
 ae2:	8a 94       	dec	r8
 ae4:	f3 01       	movw	r30, r6
 ae6:	e8 0d       	add	r30, r8
 ae8:	f1 1d       	adc	r31, r1
 aea:	80 81       	ld	r24, Z
 aec:	b6 01       	movw	r22, r12
 aee:	90 e0       	ldi	r25, 0x00	; 0
 af0:	0e 94 a6 05 	call	0xb4c	; 0xb4c <fputc>
 af4:	81 10       	cpse	r8, r1
 af6:	f5 cf       	rjmp	.-22     	; 0xae2 <__stack+0x1e3>
 af8:	22 20       	and	r2, r2
 afa:	09 f4       	brne	.+2      	; 0xafe <__stack+0x1ff>
 afc:	42 ce       	rjmp	.-892    	; 0x782 <vfprintf+0x24>
 afe:	b6 01       	movw	r22, r12
 b00:	80 e2       	ldi	r24, 0x20	; 32
 b02:	90 e0       	ldi	r25, 0x00	; 0
 b04:	0e 94 a6 05 	call	0xb4c	; 0xb4c <fputc>
 b08:	2a 94       	dec	r2
 b0a:	f6 cf       	rjmp	.-20     	; 0xaf8 <__stack+0x1f9>
 b0c:	f6 01       	movw	r30, r12
 b0e:	86 81       	ldd	r24, Z+6	; 0x06
 b10:	97 81       	ldd	r25, Z+7	; 0x07
 b12:	02 c0       	rjmp	.+4      	; 0xb18 <__stack+0x219>
 b14:	8f ef       	ldi	r24, 0xFF	; 255
 b16:	9f ef       	ldi	r25, 0xFF	; 255
 b18:	2b 96       	adiw	r28, 0x0b	; 11
 b1a:	e2 e1       	ldi	r30, 0x12	; 18
 b1c:	0c 94 5c 06 	jmp	0xcb8	; 0xcb8 <__epilogue_restores__>

00000b20 <strnlen_P>:
 b20:	fc 01       	movw	r30, r24
 b22:	05 90       	lpm	r0, Z+
 b24:	61 50       	subi	r22, 0x01	; 1
 b26:	70 40       	sbci	r23, 0x00	; 0
 b28:	01 10       	cpse	r0, r1
 b2a:	d8 f7       	brcc	.-10     	; 0xb22 <strnlen_P+0x2>
 b2c:	80 95       	com	r24
 b2e:	90 95       	com	r25
 b30:	8e 0f       	add	r24, r30
 b32:	9f 1f       	adc	r25, r31
 b34:	08 95       	ret

00000b36 <strnlen>:
 b36:	fc 01       	movw	r30, r24
 b38:	61 50       	subi	r22, 0x01	; 1
 b3a:	70 40       	sbci	r23, 0x00	; 0
 b3c:	01 90       	ld	r0, Z+
 b3e:	01 10       	cpse	r0, r1
 b40:	d8 f7       	brcc	.-10     	; 0xb38 <strnlen+0x2>
 b42:	80 95       	com	r24
 b44:	90 95       	com	r25
 b46:	8e 0f       	add	r24, r30
 b48:	9f 1f       	adc	r25, r31
 b4a:	08 95       	ret

00000b4c <fputc>:
 b4c:	0f 93       	push	r16
 b4e:	1f 93       	push	r17
 b50:	cf 93       	push	r28
 b52:	df 93       	push	r29
 b54:	fb 01       	movw	r30, r22
 b56:	23 81       	ldd	r18, Z+3	; 0x03
 b58:	21 fd       	sbrc	r18, 1
 b5a:	03 c0       	rjmp	.+6      	; 0xb62 <fputc+0x16>
 b5c:	8f ef       	ldi	r24, 0xFF	; 255
 b5e:	9f ef       	ldi	r25, 0xFF	; 255
 b60:	2c c0       	rjmp	.+88     	; 0xbba <fputc+0x6e>
 b62:	22 ff       	sbrs	r18, 2
 b64:	16 c0       	rjmp	.+44     	; 0xb92 <fputc+0x46>
 b66:	46 81       	ldd	r20, Z+6	; 0x06
 b68:	57 81       	ldd	r21, Z+7	; 0x07
 b6a:	24 81       	ldd	r18, Z+4	; 0x04
 b6c:	35 81       	ldd	r19, Z+5	; 0x05
 b6e:	42 17       	cp	r20, r18
 b70:	53 07       	cpc	r21, r19
 b72:	44 f4       	brge	.+16     	; 0xb84 <fputc+0x38>
 b74:	a0 81       	ld	r26, Z
 b76:	b1 81       	ldd	r27, Z+1	; 0x01
 b78:	9d 01       	movw	r18, r26
 b7a:	2f 5f       	subi	r18, 0xFF	; 255
 b7c:	3f 4f       	sbci	r19, 0xFF	; 255
 b7e:	31 83       	std	Z+1, r19	; 0x01
 b80:	20 83       	st	Z, r18
 b82:	8c 93       	st	X, r24
 b84:	26 81       	ldd	r18, Z+6	; 0x06
 b86:	37 81       	ldd	r19, Z+7	; 0x07
 b88:	2f 5f       	subi	r18, 0xFF	; 255
 b8a:	3f 4f       	sbci	r19, 0xFF	; 255
 b8c:	37 83       	std	Z+7, r19	; 0x07
 b8e:	26 83       	std	Z+6, r18	; 0x06
 b90:	14 c0       	rjmp	.+40     	; 0xbba <fputc+0x6e>
 b92:	8b 01       	movw	r16, r22
 b94:	ec 01       	movw	r28, r24
 b96:	fb 01       	movw	r30, r22
 b98:	00 84       	ldd	r0, Z+8	; 0x08
 b9a:	f1 85       	ldd	r31, Z+9	; 0x09
 b9c:	e0 2d       	mov	r30, r0
 b9e:	09 95       	icall
 ba0:	89 2b       	or	r24, r25
 ba2:	e1 f6       	brne	.-72     	; 0xb5c <fputc+0x10>
 ba4:	d8 01       	movw	r26, r16
 ba6:	16 96       	adiw	r26, 0x06	; 6
 ba8:	8d 91       	ld	r24, X+
 baa:	9c 91       	ld	r25, X
 bac:	17 97       	sbiw	r26, 0x07	; 7
 bae:	01 96       	adiw	r24, 0x01	; 1
 bb0:	17 96       	adiw	r26, 0x07	; 7
 bb2:	9c 93       	st	X, r25
 bb4:	8e 93       	st	-X, r24
 bb6:	16 97       	sbiw	r26, 0x06	; 6
 bb8:	ce 01       	movw	r24, r28
 bba:	df 91       	pop	r29
 bbc:	cf 91       	pop	r28
 bbe:	1f 91       	pop	r17
 bc0:	0f 91       	pop	r16
 bc2:	08 95       	ret

00000bc4 <__ultoa_invert>:
 bc4:	fa 01       	movw	r30, r20
 bc6:	aa 27       	eor	r26, r26
 bc8:	28 30       	cpi	r18, 0x08	; 8
 bca:	51 f1       	breq	.+84     	; 0xc20 <__ultoa_invert+0x5c>
 bcc:	20 31       	cpi	r18, 0x10	; 16
 bce:	81 f1       	breq	.+96     	; 0xc30 <__ultoa_invert+0x6c>
 bd0:	e8 94       	clt
 bd2:	6f 93       	push	r22
 bd4:	6e 7f       	andi	r22, 0xFE	; 254
 bd6:	6e 5f       	subi	r22, 0xFE	; 254
 bd8:	7f 4f       	sbci	r23, 0xFF	; 255
 bda:	8f 4f       	sbci	r24, 0xFF	; 255
 bdc:	9f 4f       	sbci	r25, 0xFF	; 255
 bde:	af 4f       	sbci	r26, 0xFF	; 255
 be0:	b1 e0       	ldi	r27, 0x01	; 1
 be2:	3e d0       	rcall	.+124    	; 0xc60 <__ultoa_invert+0x9c>
 be4:	b4 e0       	ldi	r27, 0x04	; 4
 be6:	3c d0       	rcall	.+120    	; 0xc60 <__ultoa_invert+0x9c>
 be8:	67 0f       	add	r22, r23
 bea:	78 1f       	adc	r23, r24
 bec:	89 1f       	adc	r24, r25
 bee:	9a 1f       	adc	r25, r26
 bf0:	a1 1d       	adc	r26, r1
 bf2:	68 0f       	add	r22, r24
 bf4:	79 1f       	adc	r23, r25
 bf6:	8a 1f       	adc	r24, r26
 bf8:	91 1d       	adc	r25, r1
 bfa:	a1 1d       	adc	r26, r1
 bfc:	6a 0f       	add	r22, r26
 bfe:	71 1d       	adc	r23, r1
 c00:	81 1d       	adc	r24, r1
 c02:	91 1d       	adc	r25, r1
 c04:	a1 1d       	adc	r26, r1
 c06:	20 d0       	rcall	.+64     	; 0xc48 <__ultoa_invert+0x84>
 c08:	09 f4       	brne	.+2      	; 0xc0c <__ultoa_invert+0x48>
 c0a:	68 94       	set
 c0c:	3f 91       	pop	r19
 c0e:	2a e0       	ldi	r18, 0x0A	; 10
 c10:	26 9f       	mul	r18, r22
 c12:	11 24       	eor	r1, r1
 c14:	30 19       	sub	r19, r0
 c16:	30 5d       	subi	r19, 0xD0	; 208
 c18:	31 93       	st	Z+, r19
 c1a:	de f6       	brtc	.-74     	; 0xbd2 <__ultoa_invert+0xe>
 c1c:	cf 01       	movw	r24, r30
 c1e:	08 95       	ret
 c20:	46 2f       	mov	r20, r22
 c22:	47 70       	andi	r20, 0x07	; 7
 c24:	40 5d       	subi	r20, 0xD0	; 208
 c26:	41 93       	st	Z+, r20
 c28:	b3 e0       	ldi	r27, 0x03	; 3
 c2a:	0f d0       	rcall	.+30     	; 0xc4a <__ultoa_invert+0x86>
 c2c:	c9 f7       	brne	.-14     	; 0xc20 <__ultoa_invert+0x5c>
 c2e:	f6 cf       	rjmp	.-20     	; 0xc1c <__ultoa_invert+0x58>
 c30:	46 2f       	mov	r20, r22
 c32:	4f 70       	andi	r20, 0x0F	; 15
 c34:	40 5d       	subi	r20, 0xD0	; 208
 c36:	4a 33       	cpi	r20, 0x3A	; 58
 c38:	18 f0       	brcs	.+6      	; 0xc40 <__ultoa_invert+0x7c>
 c3a:	49 5d       	subi	r20, 0xD9	; 217
 c3c:	31 fd       	sbrc	r19, 1
 c3e:	40 52       	subi	r20, 0x20	; 32
 c40:	41 93       	st	Z+, r20
 c42:	02 d0       	rcall	.+4      	; 0xc48 <__ultoa_invert+0x84>
 c44:	a9 f7       	brne	.-22     	; 0xc30 <__ultoa_invert+0x6c>
 c46:	ea cf       	rjmp	.-44     	; 0xc1c <__ultoa_invert+0x58>
 c48:	b4 e0       	ldi	r27, 0x04	; 4
 c4a:	a6 95       	lsr	r26
 c4c:	97 95       	ror	r25
 c4e:	87 95       	ror	r24
 c50:	77 95       	ror	r23
 c52:	67 95       	ror	r22
 c54:	ba 95       	dec	r27
 c56:	c9 f7       	brne	.-14     	; 0xc4a <__ultoa_invert+0x86>
 c58:	00 97       	sbiw	r24, 0x00	; 0
 c5a:	61 05       	cpc	r22, r1
 c5c:	71 05       	cpc	r23, r1
 c5e:	08 95       	ret
 c60:	9b 01       	movw	r18, r22
 c62:	ac 01       	movw	r20, r24
 c64:	0a 2e       	mov	r0, r26
 c66:	06 94       	lsr	r0
 c68:	57 95       	ror	r21
 c6a:	47 95       	ror	r20
 c6c:	37 95       	ror	r19
 c6e:	27 95       	ror	r18
 c70:	ba 95       	dec	r27
 c72:	c9 f7       	brne	.-14     	; 0xc66 <__ultoa_invert+0xa2>
 c74:	62 0f       	add	r22, r18
 c76:	73 1f       	adc	r23, r19
 c78:	84 1f       	adc	r24, r20
 c7a:	95 1f       	adc	r25, r21
 c7c:	a0 1d       	adc	r26, r0
 c7e:	08 95       	ret

00000c80 <__prologue_saves__>:
 c80:	2f 92       	push	r2
 c82:	3f 92       	push	r3
 c84:	4f 92       	push	r4
 c86:	5f 92       	push	r5
 c88:	6f 92       	push	r6
 c8a:	7f 92       	push	r7
 c8c:	8f 92       	push	r8
 c8e:	9f 92       	push	r9
 c90:	af 92       	push	r10
 c92:	bf 92       	push	r11
 c94:	cf 92       	push	r12
 c96:	df 92       	push	r13
 c98:	ef 92       	push	r14
 c9a:	ff 92       	push	r15
 c9c:	0f 93       	push	r16
 c9e:	1f 93       	push	r17
 ca0:	cf 93       	push	r28
 ca2:	df 93       	push	r29
 ca4:	cd b7       	in	r28, 0x3d	; 61
 ca6:	de b7       	in	r29, 0x3e	; 62
 ca8:	ca 1b       	sub	r28, r26
 caa:	db 0b       	sbc	r29, r27
 cac:	0f b6       	in	r0, 0x3f	; 63
 cae:	f8 94       	cli
 cb0:	de bf       	out	0x3e, r29	; 62
 cb2:	0f be       	out	0x3f, r0	; 63
 cb4:	cd bf       	out	0x3d, r28	; 61
 cb6:	09 94       	ijmp

00000cb8 <__epilogue_restores__>:
 cb8:	2a 88       	ldd	r2, Y+18	; 0x12
 cba:	39 88       	ldd	r3, Y+17	; 0x11
 cbc:	48 88       	ldd	r4, Y+16	; 0x10
 cbe:	5f 84       	ldd	r5, Y+15	; 0x0f
 cc0:	6e 84       	ldd	r6, Y+14	; 0x0e
 cc2:	7d 84       	ldd	r7, Y+13	; 0x0d
 cc4:	8c 84       	ldd	r8, Y+12	; 0x0c
 cc6:	9b 84       	ldd	r9, Y+11	; 0x0b
 cc8:	aa 84       	ldd	r10, Y+10	; 0x0a
 cca:	b9 84       	ldd	r11, Y+9	; 0x09
 ccc:	c8 84       	ldd	r12, Y+8	; 0x08
 cce:	df 80       	ldd	r13, Y+7	; 0x07
 cd0:	ee 80       	ldd	r14, Y+6	; 0x06
 cd2:	fd 80       	ldd	r15, Y+5	; 0x05
 cd4:	0c 81       	ldd	r16, Y+4	; 0x04
 cd6:	1b 81       	ldd	r17, Y+3	; 0x03
 cd8:	aa 81       	ldd	r26, Y+2	; 0x02
 cda:	b9 81       	ldd	r27, Y+1	; 0x01
 cdc:	ce 0f       	add	r28, r30
 cde:	d1 1d       	adc	r29, r1
 ce0:	0f b6       	in	r0, 0x3f	; 63
 ce2:	f8 94       	cli
 ce4:	de bf       	out	0x3e, r29	; 62
 ce6:	0f be       	out	0x3f, r0	; 63
 ce8:	cd bf       	out	0x3d, r28	; 61
 cea:	ed 01       	movw	r28, r26
 cec:	08 95       	ret

00000cee <_exit>:
 cee:	f8 94       	cli

00000cf0 <__stop_program>:
 cf0:	ff cf       	rjmp	.-2      	; 0xcf0 <__stop_program>
