
encasingcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000004a  00800100  00000c7e  00000d12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000040  0080014a  0080014a  00000d5c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d5c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000db8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002573  00000000  00000000  00000f80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e98  00000000  00000000  000034f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001055  00000000  00000000  0000438b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  000053e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b3  00000000  00000000  000056f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001272  00000000  00000000  00005ca3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000128  00000000  00000000  00006f15  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e7       	ldi	r30, 0x7E	; 126
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	aa 34       	cpi	r26, 0x4A	; 74
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	aa e4       	ldi	r26, 0x4A	; 74
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 38       	cpi	r26, 0x8A	; 138
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 ce 02 	call	0x59c	; 0x59c <main>
  9e:	0c 94 3d 06 	jmp	0xc7a	; 0xc7a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
#define F_CPU 8000000UL

#include "adc.h"

void adc_init(void)
{
  a6:	bf 92       	push	r11
  a8:	cf 92       	push	r12
  aa:	df 92       	push	r13
  ac:	ef 92       	push	r14
  ae:	ff 92       	push	r15
  b0:	0f 93       	push	r16
  b2:	1f 93       	push	r17
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	a0 97       	sbiw	r28, 0x20	; 32
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
	i2c_init();
  c8:	0e 94 a6 01 	call	0x34c	; 0x34c <i2c_init>
	uint32_t val = 0x0000;
	char* buf[16];
	
	i2c_start_wait(ADS_ADDR_0+I2C_WRITE);     // set device address and write mode
  cc:	80 e9       	ldi	r24, 0x90	; 144
  ce:	0e 94 ce 01 	call	0x39c	; 0x39c <i2c_start_wait>
	i2c_write(ADS1115_RA_CONFIG);                        // write address = 5
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	0e 94 ff 01 	call	0x3fe	; 0x3fe <i2c_write>
	i2c_rep_start(ADS_ADDR_0+I2C_READ);       // set device address and read mode
  d8:	81 e9       	ldi	r24, 0x91	; 145
  da:	0e 94 f5 01 	call	0x3ea	; 0x3ea <i2c_rep_start>
	unsigned char ret = i2c_readAck();                    // read one byte
  de:	0e 94 10 02 	call	0x420	; 0x420 <i2c_readAck>
  e2:	f8 2e       	mov	r15, r24
	unsigned char ret1 = i2c_readNack();                    // read one byte
  e4:	0e 94 1a 02 	call	0x434	; 0x434 <i2c_readNack>
  e8:	8c 01       	movw	r16, r24
	i2c_stop();
  ea:	0e 94 f7 01 	call	0x3ee	; 0x3ee <i2c_stop>
	lcd_clear_screen();
  ee:	0e 94 b8 02 	call	0x570	; 0x570 <lcd_clear_screen>
	lcd_set_line(1);
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	0e 94 ae 02 	call	0x55c	; 0x55c <lcd_set_line>
	lcd_send_string("ADS0: OK");
  f8:	80 e0       	ldi	r24, 0x00	; 0
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	0e 94 c2 02 	call	0x584	; 0x584 <lcd_send_string>
	lcd_set_line(2);
 100:	82 e0       	ldi	r24, 0x02	; 2
 102:	0e 94 ae 02 	call	0x55c	; 0x55c <lcd_set_line>
	sprintf(buf,"val: 0x%02x%02x",ret,ret1);
 106:	c8 01       	movw	r24, r16
 108:	99 27       	eor	r25, r25
 10a:	9f 93       	push	r25
 10c:	8f 93       	push	r24
 10e:	1f 92       	push	r1
 110:	ff 92       	push	r15
 112:	89 e0       	ldi	r24, 0x09	; 9
 114:	e8 2e       	mov	r14, r24
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	f8 2e       	mov	r15, r24
 11a:	ff 92       	push	r15
 11c:	ef 92       	push	r14
 11e:	8e 01       	movw	r16, r28
 120:	0f 5f       	subi	r16, 0xFF	; 255
 122:	1f 4f       	sbci	r17, 0xFF	; 255
 124:	1f 93       	push	r17
 126:	0f 93       	push	r16
 128:	0e 94 53 03 	call	0x6a6	; 0x6a6 <sprintf>
	lcd_send_string(buf);
 12c:	c8 01       	movw	r24, r16
 12e:	0e 94 c2 02 	call	0x584	; 0x584 <lcd_send_string>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 132:	2f ef       	ldi	r18, 0xFF	; 255
 134:	89 e6       	ldi	r24, 0x69	; 105
 136:	98 e1       	ldi	r25, 0x18	; 24
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	80 40       	sbci	r24, 0x00	; 0
 13c:	90 40       	sbci	r25, 0x00	; 0
 13e:	e1 f7       	brne	.-8      	; 0x138 <adc_init+0x92>
 140:	00 c0       	rjmp	.+0      	; 0x142 <adc_init+0x9c>
 142:	00 00       	nop
	_delay_ms(1*1000);
	
	
	i2c_start_wait(ADS_ADDR_1+I2C_WRITE);     // set device address and write mode
 144:	82 e9       	ldi	r24, 0x92	; 146
 146:	0e 94 ce 01 	call	0x39c	; 0x39c <i2c_start_wait>
	i2c_write(ADS1115_RA_CONFIG);                        // write address = 5
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 ff 01 	call	0x3fe	; 0x3fe <i2c_write>
	i2c_rep_start(ADS_ADDR_1+I2C_READ);       // set device address and read mode
 150:	83 e9       	ldi	r24, 0x93	; 147
 152:	0e 94 f5 01 	call	0x3ea	; 0x3ea <i2c_rep_start>
	ret = i2c_readAck();                    // read one byte
 156:	0e 94 10 02 	call	0x420	; 0x420 <i2c_readAck>
 15a:	b8 2e       	mov	r11, r24
	ret1 = i2c_readNack();                    // read one byte
 15c:	0e 94 1a 02 	call	0x434	; 0x434 <i2c_readNack>
 160:	6c 01       	movw	r12, r24
	i2c_stop();
 162:	0e 94 f7 01 	call	0x3ee	; 0x3ee <i2c_stop>
	lcd_clear_screen();
 166:	0e 94 b8 02 	call	0x570	; 0x570 <lcd_clear_screen>
	lcd_set_line(1);
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	0e 94 ae 02 	call	0x55c	; 0x55c <lcd_set_line>
	lcd_send_string("ADS1: OK");
 170:	89 e1       	ldi	r24, 0x19	; 25
 172:	91 e0       	ldi	r25, 0x01	; 1
 174:	0e 94 c2 02 	call	0x584	; 0x584 <lcd_send_string>
	lcd_set_line(2);
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	0e 94 ae 02 	call	0x55c	; 0x55c <lcd_set_line>
	sprintf(buf,"val: 0x%02x%02x",ret,ret1);
 17e:	c6 01       	movw	r24, r12
 180:	99 27       	eor	r25, r25
 182:	9f 93       	push	r25
 184:	8f 93       	push	r24
 186:	1f 92       	push	r1
 188:	bf 92       	push	r11
 18a:	ff 92       	push	r15
 18c:	ef 92       	push	r14
 18e:	1f 93       	push	r17
 190:	0f 93       	push	r16
 192:	0e 94 53 03 	call	0x6a6	; 0x6a6 <sprintf>
	lcd_send_string(buf);
 196:	c8 01       	movw	r24, r16
 198:	0e 94 c2 02 	call	0x584	; 0x584 <lcd_send_string>
 19c:	2f ef       	ldi	r18, 0xFF	; 255
 19e:	89 e6       	ldi	r24, 0x69	; 105
 1a0:	98 e1       	ldi	r25, 0x18	; 24
 1a2:	21 50       	subi	r18, 0x01	; 1
 1a4:	80 40       	sbci	r24, 0x00	; 0
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	e1 f7       	brne	.-8      	; 0x1a2 <adc_init+0xfc>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <adc_init+0x106>
 1ac:	00 00       	nop
		lcd_set_line(2);
		sprintf(buf,"val: 0x%02x",val);
		lcd_send_string(buf);
	}
	_delay_ms(5000);*/
}
 1ae:	0f b6       	in	r0, 0x3f	; 63
 1b0:	f8 94       	cli
 1b2:	de bf       	out	0x3e, r29	; 62
 1b4:	0f be       	out	0x3f, r0	; 63
 1b6:	cd bf       	out	0x3d, r28	; 61
 1b8:	a0 96       	adiw	r28, 0x20	; 32
 1ba:	0f b6       	in	r0, 0x3f	; 63
 1bc:	f8 94       	cli
 1be:	de bf       	out	0x3e, r29	; 62
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	cd bf       	out	0x3d, r28	; 61
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	ff 90       	pop	r15
 1ce:	ef 90       	pop	r14
 1d0:	df 90       	pop	r13
 1d2:	cf 90       	pop	r12
 1d4:	bf 90       	pop	r11
 1d6:	08 95       	ret

000001d8 <dac_init>:
#define F_CPU 8000000UL
#include "dac.h"


void dac_init(void)
{
 1d8:	ff 92       	push	r15
 1da:	0f 93       	push	r16
 1dc:	1f 93       	push	r17
 1de:	cf 93       	push	r28
 1e0:	df 93       	push	r29
 1e2:	cd b7       	in	r28, 0x3d	; 61
 1e4:	de b7       	in	r29, 0x3e	; 62
 1e6:	a0 97       	sbiw	r28, 0x20	; 32
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	f8 94       	cli
 1ec:	de bf       	out	0x3e, r29	; 62
 1ee:	0f be       	out	0x3f, r0	; 63
 1f0:	cd bf       	out	0x3d, r28	; 61
	uint32_t val;
	char* buf[16];
	
	
	i2c_start_wait(MCP_ADDR_0+I2C_WRITE);     // set device address and write mode
 1f2:	80 ec       	ldi	r24, 0xC0	; 192
 1f4:	0e 94 ce 01 	call	0x39c	; 0x39c <i2c_start_wait>
	i2c_write(0x00);                        // write address = 5
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 ff 01 	call	0x3fe	; 0x3fe <i2c_write>
	i2c_rep_start(MCP_ADDR_0+I2C_READ);       // set device address and read mode
 1fe:	81 ec       	ldi	r24, 0xC1	; 193
 200:	0e 94 f5 01 	call	0x3ea	; 0x3ea <i2c_rep_start>
	unsigned char ret = i2c_readAck();                    // read one byte
 204:	0e 94 10 02 	call	0x420	; 0x420 <i2c_readAck>
 208:	f8 2e       	mov	r15, r24
	unsigned char ret1 = i2c_readNack();                    // read one byte
 20a:	0e 94 1a 02 	call	0x434	; 0x434 <i2c_readNack>
 20e:	8c 01       	movw	r16, r24
	i2c_stop();
 210:	0e 94 f7 01 	call	0x3ee	; 0x3ee <i2c_stop>
	lcd_clear_screen();
 214:	0e 94 b8 02 	call	0x570	; 0x570 <lcd_clear_screen>
	lcd_set_line(1);
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 ae 02 	call	0x55c	; 0x55c <lcd_set_line>
	lcd_send_string("MCP: OK");
 21e:	82 e2       	ldi	r24, 0x22	; 34
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	0e 94 c2 02 	call	0x584	; 0x584 <lcd_send_string>
	lcd_set_line(2);
 226:	82 e0       	ldi	r24, 0x02	; 2
 228:	0e 94 ae 02 	call	0x55c	; 0x55c <lcd_set_line>
	sprintf(buf,"val: 0x%02x%02x",ret,ret1);
 22c:	c8 01       	movw	r24, r16
 22e:	99 27       	eor	r25, r25
 230:	9f 93       	push	r25
 232:	8f 93       	push	r24
 234:	1f 92       	push	r1
 236:	ff 92       	push	r15
 238:	89 e0       	ldi	r24, 0x09	; 9
 23a:	91 e0       	ldi	r25, 0x01	; 1
 23c:	9f 93       	push	r25
 23e:	8f 93       	push	r24
 240:	8e 01       	movw	r16, r28
 242:	0f 5f       	subi	r16, 0xFF	; 255
 244:	1f 4f       	sbci	r17, 0xFF	; 255
 246:	1f 93       	push	r17
 248:	0f 93       	push	r16
 24a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <sprintf>
	lcd_send_string(buf);
 24e:	c8 01       	movw	r24, r16
 250:	0e 94 c2 02 	call	0x584	; 0x584 <lcd_send_string>
 254:	2f ef       	ldi	r18, 0xFF	; 255
 256:	89 e6       	ldi	r24, 0x69	; 105
 258:	98 e1       	ldi	r25, 0x18	; 24
 25a:	21 50       	subi	r18, 0x01	; 1
 25c:	80 40       	sbci	r24, 0x00	; 0
 25e:	90 40       	sbci	r25, 0x00	; 0
 260:	e1 f7       	brne	.-8      	; 0x25a <dac_init+0x82>
 262:	00 c0       	rjmp	.+0      	; 0x264 <dac_init+0x8c>
 264:	00 00       	nop
	_delay_ms(1000);
	lcd_clear_screen();
 266:	0e 94 b8 02 	call	0x570	; 0x570 <lcd_clear_screen>
		lcd_set_line(2);
		sprintf(buf,"val: 0x%02x",val);
		lcd_send_string(buf);
		_delay_ms(1000);
	}*/
}
 26a:	0f b6       	in	r0, 0x3f	; 63
 26c:	f8 94       	cli
 26e:	de bf       	out	0x3e, r29	; 62
 270:	0f be       	out	0x3f, r0	; 63
 272:	cd bf       	out	0x3d, r28	; 61
 274:	a0 96       	adiw	r28, 0x20	; 32
 276:	0f b6       	in	r0, 0x3f	; 63
 278:	f8 94       	cli
 27a:	de bf       	out	0x3e, r29	; 62
 27c:	0f be       	out	0x3f, r0	; 63
 27e:	cd bf       	out	0x3d, r28	; 61
 280:	df 91       	pop	r29
 282:	cf 91       	pop	r28
 284:	1f 91       	pop	r17
 286:	0f 91       	pop	r16
 288:	ff 90       	pop	r15
 28a:	08 95       	ret

0000028c <mcp_fast_write>:

void mcp_fast_write(uint16_t data_in)
{
 28c:	0f 93       	push	r16
 28e:	1f 93       	push	r17
 290:	cf 93       	push	r28
 292:	df 93       	push	r29
 294:	cd b7       	in	r28, 0x3d	; 61
 296:	de b7       	in	r29, 0x3e	; 62
 298:	60 97       	sbiw	r28, 0x10	; 16
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
 2a4:	18 2f       	mov	r17, r24
 2a6:	09 2f       	mov	r16, r25
	uint8_t data[2];
	data[0] = 0x00 | ((data_in >> 8) & 0x0F);
	data[1] = 0x00 | (data_in & 0xFF);
	i2c_start_wait(MCP_ADDR_0+I2C_WRITE);
 2a8:	80 ec       	ldi	r24, 0xC0	; 192
 2aa:	0e 94 ce 01 	call	0x39c	; 0x39c <i2c_start_wait>
	i2c_write(data[0]);
 2ae:	80 2f       	mov	r24, r16
 2b0:	8f 70       	andi	r24, 0x0F	; 15
 2b2:	0e 94 ff 01 	call	0x3fe	; 0x3fe <i2c_write>
	i2c_write(data[1]);
 2b6:	81 2f       	mov	r24, r17
 2b8:	0e 94 ff 01 	call	0x3fe	; 0x3fe <i2c_write>
	i2c_stop();
 2bc:	0e 94 f7 01 	call	0x3ee	; 0x3ee <i2c_stop>
	lcd_set_line(2);
 2c0:	82 e0       	ldi	r24, 0x02	; 2
 2c2:	0e 94 ae 02 	call	0x55c	; 0x55c <lcd_set_line>
	char buf[16];
	sprintf(buf,"Set to %d",data_in);
 2c6:	0f 93       	push	r16
 2c8:	1f 93       	push	r17
 2ca:	8a e2       	ldi	r24, 0x2A	; 42
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	9f 93       	push	r25
 2d0:	8f 93       	push	r24
 2d2:	8e 01       	movw	r16, r28
 2d4:	0f 5f       	subi	r16, 0xFF	; 255
 2d6:	1f 4f       	sbci	r17, 0xFF	; 255
 2d8:	1f 93       	push	r17
 2da:	0f 93       	push	r16
 2dc:	0e 94 53 03 	call	0x6a6	; 0x6a6 <sprintf>
	lcd_send_string(buf);
 2e0:	c8 01       	movw	r24, r16
 2e2:	0e 94 c2 02 	call	0x584	; 0x584 <lcd_send_string>
}
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	0f 90       	pop	r0
 2ec:	0f 90       	pop	r0
 2ee:	0f 90       	pop	r0
 2f0:	0f 90       	pop	r0
 2f2:	60 96       	adiw	r28, 0x10	; 16
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	f8 94       	cli
 2f8:	de bf       	out	0x3e, r29	; 62
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	cd bf       	out	0x3d, r28	; 61
 2fe:	df 91       	pop	r29
 300:	cf 91       	pop	r28
 302:	1f 91       	pop	r17
 304:	0f 91       	pop	r16
 306:	08 95       	ret

00000308 <fan_init>:
 */ 
#include "fan.h"

void fan_init(void)
{
	DDRB |= 1 << FAN_PWM_PORT;
 308:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= 1 << RELAY_PORT;
 30a:	22 9a       	sbi	0x04, 2	; 4
	
	ICR1 = 320;
 30c:	80 e4       	ldi	r24, 0x40	; 64
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
 314:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 160;
 318:	80 ea       	ldi	r24, 0xA0	; 160
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 320:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	TCCR1A |= (1 << COM1A1) | (1 << COM1A0);
 324:	e0 e8       	ldi	r30, 0x80	; 128
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	80 6c       	ori	r24, 0xC0	; 192
 32c:	80 83       	st	Z, r24
	TCCR1A |= (1 << WGM11);
 32e:	80 81       	ld	r24, Z
 330:	82 60       	ori	r24, 0x02	; 2
 332:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13);
 334:	e1 e8       	ldi	r30, 0x81	; 129
 336:	f0 e0       	ldi	r31, 0x00	; 0
 338:	80 81       	ld	r24, Z
 33a:	88 61       	ori	r24, 0x18	; 24
 33c:	80 83       	st	Z, r24
	//TCCR1A |= (1 << WGM11);
	//TCCR1A |= (1 << WGM12) | (1 << WGM13);
	
	TCCR1B &= ~((1 << CS11) | (1 << CS12));
 33e:	80 81       	ld	r24, Z
 340:	89 7f       	andi	r24, 0xF9	; 249
 342:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS10);
 344:	80 81       	ld	r24, Z
 346:	81 60       	ori	r24, 0x01	; 1
 348:	80 83       	st	Z, r24
 34a:	08 95       	ret

0000034c <i2c_init>:



void i2c_init(void)
{
	TWSR = 0x00; //Sets TWI Bit Rate Prescaler to 1
 34c:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	TWBR = 0x48; //Sets TWI Bit Rate Register to 72 (decimal)
 350:	88 e4       	ldi	r24, 0x48	; 72
 352:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
 356:	08 95       	ret

00000358 <i2c_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 358:	94 ea       	ldi	r25, 0xA4	; 164
 35a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 35e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 362:	97 ff       	sbrs	r25, 7
 364:	fc cf       	rjmp	.-8      	; 0x35e <i2c_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 366:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 36a:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != MT_START) && (twst != MT_REP_START)) return 1;
 36c:	98 30       	cpi	r25, 0x08	; 8
 36e:	21 f0       	breq	.+8      	; 0x378 <i2c_start+0x20>
 370:	90 31       	cpi	r25, 0x10	; 16
 372:	11 f0       	breq	.+4      	; 0x378 <i2c_start+0x20>
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	08 95       	ret

	// send device address
	TWDR = address;
 378:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 37c:	84 e8       	ldi	r24, 0x84	; 132
 37e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
 382:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 386:	87 ff       	sbrs	r24, 7
 388:	fc cf       	rjmp	.-8      	; 0x382 <i2c_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
 38a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 38e:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != MT_SLA_W_ACK) && (twst != MR_SLA_R_ACK) ) return 1;
 390:	88 31       	cpi	r24, 0x18	; 24
 392:	11 f0       	breq	.+4      	; 0x398 <i2c_start+0x40>
 394:	80 34       	cpi	r24, 0x40	; 64
 396:	71 f7       	brne	.-36     	; 0x374 <i2c_start+0x1c>

	return 0;
 398:	80 e0       	ldi	r24, 0x00	; 0

}/* i2c_start */
 39a:	08 95       	ret

0000039c <i2c_start_wait>:


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 39c:	24 ea       	ldi	r18, 0xA4	; 164
    	twst = TW_STATUS & 0xF8;
    	if ( (twst != MT_START) && (twst != MT_REP_START)) continue;
    
    	// send device address
    	TWDR = address;
    	TWCR = (1<<TWINT) | (1<<TWEN);
 39e:	34 e8       	ldi	r19, 0x84	; 132
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
    	if ( (twst == MT_SLA_W_NACK )||(twst ==MR_SLA_R_NACK) ) 
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 3a0:	44 e9       	ldi	r20, 0x94	; 148


    while ( 1 )
    {
	    // send START condition
	    TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
 3a2:	20 93 bc 00 	sts	0x00BC, r18	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    
    	// wait until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 3a6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3aa:	97 ff       	sbrs	r25, 7
 3ac:	fc cf       	rjmp	.-8      	; 0x3a6 <i2c_start_wait+0xa>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 3ae:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 3b2:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst != MT_START) && (twst != MT_REP_START)) continue;
 3b4:	98 30       	cpi	r25, 0x08	; 8
 3b6:	11 f0       	breq	.+4      	; 0x3bc <i2c_start_wait+0x20>
 3b8:	90 31       	cpi	r25, 0x10	; 16
 3ba:	99 f7       	brne	.-26     	; 0x3a2 <i2c_start_wait+0x6>
    
    	// send device address
    	TWDR = address;
 3bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    	TWCR = (1<<TWINT) | (1<<TWEN);
 3c0:	30 93 bc 00 	sts	0x00BC, r19	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    
    	// wail until transmission completed
    	while(!(TWCR & (1<<TWINT)));
 3c4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3c8:	97 ff       	sbrs	r25, 7
 3ca:	fc cf       	rjmp	.-8      	; 0x3c4 <i2c_start_wait+0x28>
    
    	// check value of TWI Status Register. Mask prescaler bits.
    	twst = TW_STATUS & 0xF8;
 3cc:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 3d0:	98 7f       	andi	r25, 0xF8	; 248
    	if ( (twst == MT_SLA_W_NACK )||(twst ==MR_SLA_R_NACK) ) 
 3d2:	90 32       	cpi	r25, 0x20	; 32
 3d4:	11 f0       	breq	.+4      	; 0x3da <i2c_start_wait+0x3e>
 3d6:	98 34       	cpi	r25, 0x48	; 72
 3d8:	39 f4       	brne	.+14     	; 0x3e8 <i2c_start_wait+0x4c>
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 3da:	40 93 bc 00 	sts	0x00BC, r20	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
 3de:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3e2:	94 fd       	sbrc	r25, 4
 3e4:	fc cf       	rjmp	.-8      	; 0x3de <i2c_start_wait+0x42>
 3e6:	dd cf       	rjmp	.-70     	; 0x3a2 <i2c_start_wait+0x6>
 3e8:	08 95       	ret

000003ea <i2c_rep_start>:
 Return:  0 device accessible
          1 failed to access device
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );
 3ea:	0c 94 ac 01 	jmp	0x358	; 0x358 <i2c_start>

000003ee <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
 3ee:	84 e9       	ldi	r24, 0x94	; 148
 3f0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
 3f4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 3f8:	84 fd       	sbrc	r24, 4
 3fa:	fc cf       	rjmp	.-8      	; 0x3f4 <i2c_stop+0x6>

}/* i2c_stop */
 3fc:	08 95       	ret

000003fe <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
 3fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 402:	84 e8       	ldi	r24, 0x84	; 132
 404:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
 408:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 40c:	87 ff       	sbrs	r24, 7
 40e:	fc cf       	rjmp	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
 410:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 414:	98 7f       	andi	r25, 0xF8	; 248
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	98 32       	cpi	r25, 0x28	; 40
 41a:	09 f4       	brne	.+2      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41c:	80 e0       	ldi	r24, 0x00	; 0
	if( twst != MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
 41e:	08 95       	ret

00000420 <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
 420:	84 ec       	ldi	r24, 0xC4	; 196
 422:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));    
 426:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 42a:	87 ff       	sbrs	r24, 7
 42c:	fc cf       	rjmp	.-8      	; 0x426 <i2c_readAck+0x6>

    return TWDR;
 42e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

}/* i2c_readAck */
 432:	08 95       	ret

00000434 <i2c_readNack>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNack(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
 434:	84 e8       	ldi	r24, 0x84	; 132
 436:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 43a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
 43e:	87 ff       	sbrs	r24, 7
 440:	fc cf       	rjmp	.-8      	; 0x43a <i2c_readNack+0x6>
	
    return TWDR;
 442:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>

 446:	08 95       	ret

00000448 <lcd_pin_init>:
{
	while(*str != '\0')
	{
		lcd_write_data((unsigned char)*str++);
	}
}
 448:	53 9a       	sbi	0x0a, 3	; 10
 44a:	8a b1       	in	r24, 0x0a	; 10
 44c:	80 6f       	ori	r24, 0xF0	; 240
 44e:	8a b9       	out	0x0a, r24	; 10
 450:	8a b1       	in	r24, 0x0a	; 10
 452:	86 60       	ori	r24, 0x06	; 6
 454:	8a b9       	out	0x0a, r24	; 10
 456:	08 95       	ret

00000458 <lcd_e_toggle>:
 458:	59 9a       	sbi	0x0b, 1	; 11
 45a:	83 ef       	ldi	r24, 0xF3	; 243
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	01 97       	sbiw	r24, 0x01	; 1
 460:	f1 f7       	brne	.-4      	; 0x45e <lcd_e_toggle+0x6>
 462:	00 c0       	rjmp	.+0      	; 0x464 <lcd_e_toggle+0xc>
 464:	00 00       	nop
 466:	59 98       	cbi	0x0b, 1	; 11
 468:	08 95       	ret

0000046a <lcd_rs_high>:
 46a:	5b 9a       	sbi	0x0b, 3	; 11
 46c:	08 95       	ret

0000046e <lcd_rs_low>:
 46e:	5b 98       	cbi	0x0b, 3	; 11
 470:	08 95       	ret

00000472 <lcd_rw_low>:
 472:	5a 98       	cbi	0x0b, 2	; 11
 474:	08 95       	ret

00000476 <lcd_send_byte>:
 476:	cf 93       	push	r28
 478:	c8 2f       	mov	r28, r24
 47a:	66 23       	and	r22, r22
 47c:	19 f0       	breq	.+6      	; 0x484 <lcd_send_byte+0xe>
 47e:	0e 94 35 02 	call	0x46a	; 0x46a <lcd_rs_high>
 482:	02 c0       	rjmp	.+4      	; 0x488 <lcd_send_byte+0x12>
 484:	0e 94 37 02 	call	0x46e	; 0x46e <lcd_rs_low>
 488:	0e 94 39 02 	call	0x472	; 0x472 <lcd_rw_low>
 48c:	5c 98       	cbi	0x0b, 4	; 11
 48e:	5f 98       	cbi	0x0b, 7	; 11
 490:	5e 98       	cbi	0x0b, 6	; 11
 492:	5d 98       	cbi	0x0b, 5	; 11
 494:	c4 fd       	sbrc	r28, 4
 496:	5c 9a       	sbi	0x0b, 4	; 11
 498:	c5 fd       	sbrc	r28, 5
 49a:	5f 9a       	sbi	0x0b, 7	; 11
 49c:	c6 fd       	sbrc	r28, 6
 49e:	5e 9a       	sbi	0x0b, 6	; 11
 4a0:	c7 fd       	sbrc	r28, 7
 4a2:	5d 9a       	sbi	0x0b, 5	; 11
 4a4:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_e_toggle>
 4a8:	5c 98       	cbi	0x0b, 4	; 11
 4aa:	5f 98       	cbi	0x0b, 7	; 11
 4ac:	5e 98       	cbi	0x0b, 6	; 11
 4ae:	5d 98       	cbi	0x0b, 5	; 11
 4b0:	c0 fd       	sbrc	r28, 0
 4b2:	5c 9a       	sbi	0x0b, 4	; 11
 4b4:	c1 fd       	sbrc	r28, 1
 4b6:	5f 9a       	sbi	0x0b, 7	; 11
 4b8:	c2 fd       	sbrc	r28, 2
 4ba:	5e 9a       	sbi	0x0b, 6	; 11
 4bc:	c3 fd       	sbrc	r28, 3
 4be:	5d 9a       	sbi	0x0b, 5	; 11
 4c0:	cf 91       	pop	r28
 4c2:	0c 94 2c 02 	jmp	0x458	; 0x458 <lcd_e_toggle>

000004c6 <lcd_write_cmd>:
 4c6:	60 e0       	ldi	r22, 0x00	; 0
 4c8:	0c 94 3b 02 	jmp	0x476	; 0x476 <lcd_send_byte>

000004cc <lcd_write_data>:
 4cc:	61 e0       	ldi	r22, 0x01	; 1
 4ce:	0c 94 3b 02 	jmp	0x476	; 0x476 <lcd_send_byte>

000004d2 <lcd_2004_init>:
 4d2:	83 ed       	ldi	r24, 0xD3	; 211
 4d4:	90 e3       	ldi	r25, 0x30	; 48
 4d6:	01 97       	sbiw	r24, 0x01	; 1
 4d8:	f1 f7       	brne	.-4      	; 0x4d6 <lcd_2004_init+0x4>
 4da:	00 c0       	rjmp	.+0      	; 0x4dc <lcd_2004_init+0xa>
 4dc:	00 00       	nop
 4de:	80 e3       	ldi	r24, 0x30	; 48
 4e0:	0e 94 63 02 	call	0x4c6	; 0x4c6 <lcd_write_cmd>
 4e4:	90 e1       	ldi	r25, 0x10	; 16
 4e6:	9a 95       	dec	r25
 4e8:	f1 f7       	brne	.-4      	; 0x4e6 <lcd_2004_init+0x14>
 4ea:	00 c0       	rjmp	.+0      	; 0x4ec <lcd_2004_init+0x1a>
 4ec:	80 e2       	ldi	r24, 0x20	; 32
 4ee:	0e 94 63 02 	call	0x4c6	; 0x4c6 <lcd_write_cmd>
 4f2:	80 ec       	ldi	r24, 0xC0	; 192
 4f4:	0e 94 63 02 	call	0x4c6	; 0x4c6 <lcd_write_cmd>
 4f8:	80 e1       	ldi	r24, 0x10	; 16
 4fa:	8a 95       	dec	r24
 4fc:	f1 f7       	brne	.-4      	; 0x4fa <lcd_2004_init+0x28>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <lcd_2004_init+0x2e>
 500:	80 e2       	ldi	r24, 0x20	; 32
 502:	0e 94 63 02 	call	0x4c6	; 0x4c6 <lcd_write_cmd>
 506:	80 ec       	ldi	r24, 0xC0	; 192
 508:	0e 94 63 02 	call	0x4c6	; 0x4c6 <lcd_write_cmd>
 50c:	90 e1       	ldi	r25, 0x10	; 16
 50e:	9a 95       	dec	r25
 510:	f1 f7       	brne	.-4      	; 0x50e <lcd_2004_init+0x3c>
 512:	00 c0       	rjmp	.+0      	; 0x514 <lcd_2004_init+0x42>
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	0e 94 63 02 	call	0x4c6	; 0x4c6 <lcd_write_cmd>
 51a:	80 ef       	ldi	r24, 0xF0	; 240
 51c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <lcd_write_cmd>
 520:	80 e1       	ldi	r24, 0x10	; 16
 522:	8a 95       	dec	r24
 524:	f1 f7       	brne	.-4      	; 0x522 <lcd_2004_init+0x50>
 526:	00 c0       	rjmp	.+0      	; 0x528 <lcd_2004_init+0x56>
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	0e 94 63 02 	call	0x4c6	; 0x4c6 <lcd_write_cmd>
 52e:	80 e1       	ldi	r24, 0x10	; 16
 530:	0e 94 63 02 	call	0x4c6	; 0x4c6 <lcd_write_cmd>
 534:	90 e1       	ldi	r25, 0x10	; 16
 536:	9a 95       	dec	r25
 538:	f1 f7       	brne	.-4      	; 0x536 <lcd_2004_init+0x64>
 53a:	00 c0       	rjmp	.+0      	; 0x53c <lcd_2004_init+0x6a>
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <lcd_write_cmd>
 542:	80 ef       	ldi	r24, 0xF0	; 240
 544:	0e 94 63 02 	call	0x4c6	; 0x4c6 <lcd_write_cmd>
 548:	80 e1       	ldi	r24, 0x10	; 16
 54a:	8a 95       	dec	r24
 54c:	f1 f7       	brne	.-4      	; 0x54a <lcd_2004_init+0x78>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <lcd_2004_init+0x7e>
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	0e 94 63 02 	call	0x4c6	; 0x4c6 <lcd_write_cmd>
 556:	80 ee       	ldi	r24, 0xE0	; 224
 558:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <lcd_write_cmd>

0000055c <lcd_set_line>:
 55c:	81 30       	cpi	r24, 0x01	; 1
 55e:	19 f0       	breq	.+6      	; 0x566 <lcd_set_line+0xa>
 560:	82 30       	cpi	r24, 0x02	; 2
 562:	19 f0       	breq	.+6      	; 0x56a <lcd_set_line+0xe>
 564:	08 95       	ret
 566:	80 e8       	ldi	r24, 0x80	; 128
 568:	01 c0       	rjmp	.+2      	; 0x56c <lcd_set_line+0x10>
 56a:	80 ec       	ldi	r24, 0xC0	; 192
 56c:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <lcd_write_cmd>

00000570 <lcd_clear_screen>:
 570:	81 e0       	ldi	r24, 0x01	; 1
 572:	0e 94 63 02 	call	0x4c6	; 0x4c6 <lcd_write_cmd>
 576:	83 ec       	ldi	r24, 0xC3	; 195
 578:	99 e0       	ldi	r25, 0x09	; 9
 57a:	01 97       	sbiw	r24, 0x01	; 1
 57c:	f1 f7       	brne	.-4      	; 0x57a <lcd_clear_screen+0xa>
 57e:	00 c0       	rjmp	.+0      	; 0x580 <lcd_clear_screen+0x10>
 580:	00 00       	nop
 582:	08 95       	ret

00000584 <lcd_send_string>:
void lcd_send_string(char* string)
{
 584:	cf 93       	push	r28
 586:	df 93       	push	r29
 588:	ec 01       	movw	r28, r24
	while(*string)
 58a:	89 91       	ld	r24, Y+
 58c:	88 23       	and	r24, r24
 58e:	19 f0       	breq	.+6      	; 0x596 <lcd_send_string+0x12>
	{
		//Send value of pointer as data to LCD
		lcd_write_data(*string);
 590:	0e 94 66 02 	call	0x4cc	; 0x4cc <lcd_write_data>
 594:	fa cf       	rjmp	.-12     	; 0x58a <lcd_send_string+0x6>
		//Increment string pointer
		string++;
	}
 596:	df 91       	pop	r29
 598:	cf 91       	pop	r28
 59a:	08 95       	ret

0000059c <main>:
	//int dutycycle = 0x3FFF;
	unsigned int dutycycle = 300;
	static char buffer[64];
	uint8_t val = 0x00;
	//buffer = "Hello world";
	sprintf(buffer,"hello world");
 59c:	64 e3       	ldi	r22, 0x34	; 52
 59e:	71 e0       	ldi	r23, 0x01	; 1
 5a0:	8a e4       	ldi	r24, 0x4A	; 74
 5a2:	91 e0       	ldi	r25, 0x01	; 1
 5a4:	0e 94 4c 03 	call	0x698	; 0x698 <strcpy>
 5a8:	2f ef       	ldi	r18, 0xFF	; 255
 5aa:	84 e3       	ldi	r24, 0x34	; 52
 5ac:	9c e0       	ldi	r25, 0x0C	; 12
 5ae:	21 50       	subi	r18, 0x01	; 1
 5b0:	80 40       	sbci	r24, 0x00	; 0
 5b2:	90 40       	sbci	r25, 0x00	; 0
 5b4:	e1 f7       	brne	.-8      	; 0x5ae <main+0x12>
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <main+0x1c>
 5b8:	00 00       	nop
	static unsigned char hello[] = "Hello WORLD";
	_delay_ms(500);
	lcd_pin_init();
 5ba:	0e 94 24 02 	call	0x448	; 0x448 <lcd_pin_init>
	lcd_2004_init();
 5be:	0e 94 69 02 	call	0x4d2	; 0x4d2 <lcd_2004_init>
	lcd_clear_screen();
 5c2:	0e 94 b8 02 	call	0x570	; 0x570 <lcd_clear_screen>
	fan_init();
 5c6:	0e 94 84 01 	call	0x308	; 0x308 <fan_init>
 5ca:	2f ef       	ldi	r18, 0xFF	; 255
 5cc:	84 e3       	ldi	r24, 0x34	; 52
 5ce:	9c e0       	ldi	r25, 0x0C	; 12
 5d0:	21 50       	subi	r18, 0x01	; 1
 5d2:	80 40       	sbci	r24, 0x00	; 0
 5d4:	90 40       	sbci	r25, 0x00	; 0
 5d6:	e1 f7       	brne	.-8      	; 0x5d0 <main+0x34>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <main+0x3e>
 5da:	00 00       	nop
	_delay_ms(500);
	adc_init();
 5dc:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
	
	dac_init();
 5e0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <dac_init>
	
	PORTB |= (1<<RELAY_PORT);
 5e4:	2a 9a       	sbi	0x05, 2	; 5
 5e6:	2f ef       	ldi	r18, 0xFF	; 255
 5e8:	84 e3       	ldi	r24, 0x34	; 52
 5ea:	9c e0       	ldi	r25, 0x0C	; 12
 5ec:	21 50       	subi	r18, 0x01	; 1
 5ee:	80 40       	sbci	r24, 0x00	; 0
 5f0:	90 40       	sbci	r25, 0x00	; 0
 5f2:	e1 f7       	brne	.-8      	; 0x5ec <main+0x50>
 5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <main+0x5a>
 5f6:	00 00       	nop
	_delay_ms(500);
	PORTB &= ~(1<<RELAY_PORT);
 5f8:	2a 98       	cbi	0x05, 2	; 5
 5fa:	2f ef       	ldi	r18, 0xFF	; 255
 5fc:	80 e7       	ldi	r24, 0x70	; 112
 5fe:	92 e0       	ldi	r25, 0x02	; 2
 600:	21 50       	subi	r18, 0x01	; 1
 602:	80 40       	sbci	r24, 0x00	; 0
 604:	90 40       	sbci	r25, 0x00	; 0
 606:	e1 f7       	brne	.-8      	; 0x600 <main+0x64>
 608:	00 c0       	rjmp	.+0      	; 0x60a <main+0x6e>
 60a:	00 00       	nop
	_delay_ms(100);
	PORTB |= (1<<RELAY_PORT);
 60c:	2a 9a       	sbi	0x05, 2	; 5
 60e:	2f ef       	ldi	r18, 0xFF	; 255
 610:	80 e7       	ldi	r24, 0x70	; 112
 612:	92 e0       	ldi	r25, 0x02	; 2
 614:	21 50       	subi	r18, 0x01	; 1
 616:	80 40       	sbci	r24, 0x00	; 0
 618:	90 40       	sbci	r25, 0x00	; 0
 61a:	e1 f7       	brne	.-8      	; 0x614 <main+0x78>
 61c:	00 c0       	rjmp	.+0      	; 0x61e <main+0x82>
 61e:	00 00       	nop
	_delay_ms(100);
	PORTB &= ~(1<<RELAY_PORT);
 620:	2a 98       	cbi	0x05, 2	; 5
void init(void);

int main(void)
{
	//int dutycycle = 0x3FFF;
	unsigned int dutycycle = 300;
 622:	cc e2       	ldi	r28, 0x2C	; 44
 624:	d1 e0       	ldi	r29, 0x01	; 1
		{
			dutycycle = 320;
		}
		OCR1A = dutycycle;
		
		sprintf(buffer,"hello %d",dutycycle);
 626:	80 e4       	ldi	r24, 0x40	; 64
 628:	e8 2e       	mov	r14, r24
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	f8 2e       	mov	r15, r24
 62e:	0a e4       	ldi	r16, 0x4A	; 74
 630:	11 e0       	ldi	r17, 0x01	; 1
		lcd_clear_screen();
		//_delay_ms(10);
		lcd_set_line(1);
		//_delay_ms(10);
		lcd_send_string(buffer);
		mcp_fast_write(dutycycle*15);
 632:	9f e0       	ldi	r25, 0x0F	; 15
 634:	d9 2e       	mov	r13, r25
 636:	2f ef       	ldi	r18, 0xFF	; 255
 638:	89 e6       	ldi	r24, 0x69	; 105
 63a:	98 e1       	ldi	r25, 0x18	; 24
 63c:	21 50       	subi	r18, 0x01	; 1
 63e:	80 40       	sbci	r24, 0x00	; 0
 640:	90 40       	sbci	r25, 0x00	; 0
 642:	e1 f7       	brne	.-8      	; 0x63c <main+0xa0>
 644:	00 c0       	rjmp	.+0      	; 0x646 <main+0xaa>
 646:	00 00       	nop
		//_delay_ms(10);
		lcd_send_string("b");
		lcd_send_string("o");
		lcd_send_string("p");*/
		_delay_ms(1000);
		PORTB &= ~(1<<RELAY_PORT);
 648:	2a 98       	cbi	0x05, 2	; 5
		//dutycycle += 0x00FF;
		dutycycle -= 10;
 64a:	2a 97       	sbiw	r28, 0x0a	; 10
		if (dutycycle <= 0)
 64c:	11 f4       	brne	.+4      	; 0x652 <main+0xb6>
		{
			dutycycle = 320;
 64e:	c0 e4       	ldi	r28, 0x40	; 64
 650:	d1 e0       	ldi	r29, 0x01	; 1
		}
		OCR1A = dutycycle;
 652:	d0 93 89 00 	sts	0x0089, r29	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 656:	c0 93 88 00 	sts	0x0088, r28	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
		
		sprintf(buffer,"hello %d",dutycycle);
 65a:	df 93       	push	r29
 65c:	cf 93       	push	r28
 65e:	ff 92       	push	r15
 660:	ef 92       	push	r14
 662:	1f 93       	push	r17
 664:	0f 93       	push	r16
 666:	0e 94 53 03 	call	0x6a6	; 0x6a6 <sprintf>
		lcd_clear_screen();
 66a:	0e 94 b8 02 	call	0x570	; 0x570 <lcd_clear_screen>
		//_delay_ms(10);
		lcd_set_line(1);
 66e:	81 e0       	ldi	r24, 0x01	; 1
 670:	0e 94 ae 02 	call	0x55c	; 0x55c <lcd_set_line>
		//_delay_ms(10);
		lcd_send_string(buffer);
 674:	8a e4       	ldi	r24, 0x4A	; 74
 676:	91 e0       	ldi	r25, 0x01	; 1
 678:	0e 94 c2 02 	call	0x584	; 0x584 <lcd_send_string>
		mcp_fast_write(dutycycle*15);
 67c:	dc 9e       	mul	r13, r28
 67e:	c0 01       	movw	r24, r0
 680:	dd 9e       	mul	r13, r29
 682:	90 0d       	add	r25, r0
 684:	11 24       	eor	r1, r1
 686:	0e 94 46 01 	call	0x28c	; 0x28c <mcp_fast_write>
		_delay_ms(10);*/
		/*PORTB |= (1<<FAN_PWM_PORT);
		_delay_us(30);
		PORTB &= ~(1<<FAN_PWM_PORT);
		_delay_us(10);*/
	}
 68a:	0f 90       	pop	r0
 68c:	0f 90       	pop	r0
 68e:	0f 90       	pop	r0
 690:	0f 90       	pop	r0
 692:	0f 90       	pop	r0
 694:	0f 90       	pop	r0
 696:	cf cf       	rjmp	.-98     	; 0x636 <main+0x9a>

00000698 <strcpy>:
 698:	fb 01       	movw	r30, r22
 69a:	dc 01       	movw	r26, r24
 69c:	01 90       	ld	r0, Z+
 69e:	0d 92       	st	X+, r0
 6a0:	00 20       	and	r0, r0
 6a2:	e1 f7       	brne	.-8      	; 0x69c <strcpy+0x4>
 6a4:	08 95       	ret

000006a6 <sprintf>:
 6a6:	ae e0       	ldi	r26, 0x0E	; 14
 6a8:	b0 e0       	ldi	r27, 0x00	; 0
 6aa:	e9 e5       	ldi	r30, 0x59	; 89
 6ac:	f3 e0       	ldi	r31, 0x03	; 3
 6ae:	0c 94 14 06 	jmp	0xc28	; 0xc28 <__prologue_saves__+0x1c>
 6b2:	0d 89       	ldd	r16, Y+21	; 0x15
 6b4:	1e 89       	ldd	r17, Y+22	; 0x16
 6b6:	86 e0       	ldi	r24, 0x06	; 6
 6b8:	8c 83       	std	Y+4, r24	; 0x04
 6ba:	1a 83       	std	Y+2, r17	; 0x02
 6bc:	09 83       	std	Y+1, r16	; 0x01
 6be:	8f ef       	ldi	r24, 0xFF	; 255
 6c0:	9f e7       	ldi	r25, 0x7F	; 127
 6c2:	9e 83       	std	Y+6, r25	; 0x06
 6c4:	8d 83       	std	Y+5, r24	; 0x05
 6c6:	ae 01       	movw	r20, r28
 6c8:	47 5e       	subi	r20, 0xE7	; 231
 6ca:	5f 4f       	sbci	r21, 0xFF	; 255
 6cc:	6f 89       	ldd	r22, Y+23	; 0x17
 6ce:	78 8d       	ldd	r23, Y+24	; 0x18
 6d0:	ce 01       	movw	r24, r28
 6d2:	01 96       	adiw	r24, 0x01	; 1
 6d4:	0e 94 75 03 	call	0x6ea	; 0x6ea <vfprintf>
 6d8:	ef 81       	ldd	r30, Y+7	; 0x07
 6da:	f8 85       	ldd	r31, Y+8	; 0x08
 6dc:	e0 0f       	add	r30, r16
 6de:	f1 1f       	adc	r31, r17
 6e0:	10 82       	st	Z, r1
 6e2:	2e 96       	adiw	r28, 0x0e	; 14
 6e4:	e4 e0       	ldi	r30, 0x04	; 4
 6e6:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__epilogue_restores__+0x1c>

000006ea <vfprintf>:
 6ea:	ab e0       	ldi	r26, 0x0B	; 11
 6ec:	b0 e0       	ldi	r27, 0x00	; 0
 6ee:	eb e7       	ldi	r30, 0x7B	; 123
 6f0:	f3 e0       	ldi	r31, 0x03	; 3
 6f2:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__prologue_saves__>
 6f6:	6c 01       	movw	r12, r24
 6f8:	7b 01       	movw	r14, r22
 6fa:	8a 01       	movw	r16, r20
 6fc:	fc 01       	movw	r30, r24
 6fe:	17 82       	std	Z+7, r1	; 0x07
 700:	16 82       	std	Z+6, r1	; 0x06
 702:	83 81       	ldd	r24, Z+3	; 0x03
 704:	81 ff       	sbrs	r24, 1
 706:	cc c1       	rjmp	.+920    	; 0xaa0 <__stack+0x1a1>
 708:	ce 01       	movw	r24, r28
 70a:	01 96       	adiw	r24, 0x01	; 1
 70c:	3c 01       	movw	r6, r24
 70e:	f6 01       	movw	r30, r12
 710:	93 81       	ldd	r25, Z+3	; 0x03
 712:	f7 01       	movw	r30, r14
 714:	93 fd       	sbrc	r25, 3
 716:	85 91       	lpm	r24, Z+
 718:	93 ff       	sbrs	r25, 3
 71a:	81 91       	ld	r24, Z+
 71c:	7f 01       	movw	r14, r30
 71e:	88 23       	and	r24, r24
 720:	09 f4       	brne	.+2      	; 0x724 <vfprintf+0x3a>
 722:	ba c1       	rjmp	.+884    	; 0xa98 <__stack+0x199>
 724:	85 32       	cpi	r24, 0x25	; 37
 726:	39 f4       	brne	.+14     	; 0x736 <vfprintf+0x4c>
 728:	93 fd       	sbrc	r25, 3
 72a:	85 91       	lpm	r24, Z+
 72c:	93 ff       	sbrs	r25, 3
 72e:	81 91       	ld	r24, Z+
 730:	7f 01       	movw	r14, r30
 732:	85 32       	cpi	r24, 0x25	; 37
 734:	29 f4       	brne	.+10     	; 0x740 <vfprintf+0x56>
 736:	b6 01       	movw	r22, r12
 738:	90 e0       	ldi	r25, 0x00	; 0
 73a:	0e 94 6c 05 	call	0xad8	; 0xad8 <fputc>
 73e:	e7 cf       	rjmp	.-50     	; 0x70e <vfprintf+0x24>
 740:	91 2c       	mov	r9, r1
 742:	21 2c       	mov	r2, r1
 744:	31 2c       	mov	r3, r1
 746:	ff e1       	ldi	r31, 0x1F	; 31
 748:	f3 15       	cp	r31, r3
 74a:	d8 f0       	brcs	.+54     	; 0x782 <vfprintf+0x98>
 74c:	8b 32       	cpi	r24, 0x2B	; 43
 74e:	79 f0       	breq	.+30     	; 0x76e <vfprintf+0x84>
 750:	38 f4       	brcc	.+14     	; 0x760 <vfprintf+0x76>
 752:	80 32       	cpi	r24, 0x20	; 32
 754:	79 f0       	breq	.+30     	; 0x774 <vfprintf+0x8a>
 756:	83 32       	cpi	r24, 0x23	; 35
 758:	a1 f4       	brne	.+40     	; 0x782 <vfprintf+0x98>
 75a:	23 2d       	mov	r18, r3
 75c:	20 61       	ori	r18, 0x10	; 16
 75e:	1d c0       	rjmp	.+58     	; 0x79a <vfprintf+0xb0>
 760:	8d 32       	cpi	r24, 0x2D	; 45
 762:	61 f0       	breq	.+24     	; 0x77c <vfprintf+0x92>
 764:	80 33       	cpi	r24, 0x30	; 48
 766:	69 f4       	brne	.+26     	; 0x782 <vfprintf+0x98>
 768:	23 2d       	mov	r18, r3
 76a:	21 60       	ori	r18, 0x01	; 1
 76c:	16 c0       	rjmp	.+44     	; 0x79a <vfprintf+0xb0>
 76e:	83 2d       	mov	r24, r3
 770:	82 60       	ori	r24, 0x02	; 2
 772:	38 2e       	mov	r3, r24
 774:	e3 2d       	mov	r30, r3
 776:	e4 60       	ori	r30, 0x04	; 4
 778:	3e 2e       	mov	r3, r30
 77a:	2a c0       	rjmp	.+84     	; 0x7d0 <vfprintf+0xe6>
 77c:	f3 2d       	mov	r31, r3
 77e:	f8 60       	ori	r31, 0x08	; 8
 780:	1d c0       	rjmp	.+58     	; 0x7bc <vfprintf+0xd2>
 782:	37 fc       	sbrc	r3, 7
 784:	2d c0       	rjmp	.+90     	; 0x7e0 <vfprintf+0xf6>
 786:	20 ed       	ldi	r18, 0xD0	; 208
 788:	28 0f       	add	r18, r24
 78a:	2a 30       	cpi	r18, 0x0A	; 10
 78c:	40 f0       	brcs	.+16     	; 0x79e <vfprintf+0xb4>
 78e:	8e 32       	cpi	r24, 0x2E	; 46
 790:	b9 f4       	brne	.+46     	; 0x7c0 <vfprintf+0xd6>
 792:	36 fc       	sbrc	r3, 6
 794:	81 c1       	rjmp	.+770    	; 0xa98 <__stack+0x199>
 796:	23 2d       	mov	r18, r3
 798:	20 64       	ori	r18, 0x40	; 64
 79a:	32 2e       	mov	r3, r18
 79c:	19 c0       	rjmp	.+50     	; 0x7d0 <vfprintf+0xe6>
 79e:	36 fe       	sbrs	r3, 6
 7a0:	06 c0       	rjmp	.+12     	; 0x7ae <vfprintf+0xc4>
 7a2:	8a e0       	ldi	r24, 0x0A	; 10
 7a4:	98 9e       	mul	r9, r24
 7a6:	20 0d       	add	r18, r0
 7a8:	11 24       	eor	r1, r1
 7aa:	92 2e       	mov	r9, r18
 7ac:	11 c0       	rjmp	.+34     	; 0x7d0 <vfprintf+0xe6>
 7ae:	ea e0       	ldi	r30, 0x0A	; 10
 7b0:	2e 9e       	mul	r2, r30
 7b2:	20 0d       	add	r18, r0
 7b4:	11 24       	eor	r1, r1
 7b6:	22 2e       	mov	r2, r18
 7b8:	f3 2d       	mov	r31, r3
 7ba:	f0 62       	ori	r31, 0x20	; 32
 7bc:	3f 2e       	mov	r3, r31
 7be:	08 c0       	rjmp	.+16     	; 0x7d0 <vfprintf+0xe6>
 7c0:	8c 36       	cpi	r24, 0x6C	; 108
 7c2:	21 f4       	brne	.+8      	; 0x7cc <vfprintf+0xe2>
 7c4:	83 2d       	mov	r24, r3
 7c6:	80 68       	ori	r24, 0x80	; 128
 7c8:	38 2e       	mov	r3, r24
 7ca:	02 c0       	rjmp	.+4      	; 0x7d0 <vfprintf+0xe6>
 7cc:	88 36       	cpi	r24, 0x68	; 104
 7ce:	41 f4       	brne	.+16     	; 0x7e0 <vfprintf+0xf6>
 7d0:	f7 01       	movw	r30, r14
 7d2:	93 fd       	sbrc	r25, 3
 7d4:	85 91       	lpm	r24, Z+
 7d6:	93 ff       	sbrs	r25, 3
 7d8:	81 91       	ld	r24, Z+
 7da:	7f 01       	movw	r14, r30
 7dc:	81 11       	cpse	r24, r1
 7de:	b3 cf       	rjmp	.-154    	; 0x746 <vfprintf+0x5c>
 7e0:	98 2f       	mov	r25, r24
 7e2:	9f 7d       	andi	r25, 0xDF	; 223
 7e4:	95 54       	subi	r25, 0x45	; 69
 7e6:	93 30       	cpi	r25, 0x03	; 3
 7e8:	28 f4       	brcc	.+10     	; 0x7f4 <vfprintf+0x10a>
 7ea:	0c 5f       	subi	r16, 0xFC	; 252
 7ec:	1f 4f       	sbci	r17, 0xFF	; 255
 7ee:	9f e3       	ldi	r25, 0x3F	; 63
 7f0:	99 83       	std	Y+1, r25	; 0x01
 7f2:	0d c0       	rjmp	.+26     	; 0x80e <vfprintf+0x124>
 7f4:	83 36       	cpi	r24, 0x63	; 99
 7f6:	31 f0       	breq	.+12     	; 0x804 <vfprintf+0x11a>
 7f8:	83 37       	cpi	r24, 0x73	; 115
 7fa:	71 f0       	breq	.+28     	; 0x818 <vfprintf+0x12e>
 7fc:	83 35       	cpi	r24, 0x53	; 83
 7fe:	09 f0       	breq	.+2      	; 0x802 <vfprintf+0x118>
 800:	59 c0       	rjmp	.+178    	; 0x8b4 <vfprintf+0x1ca>
 802:	21 c0       	rjmp	.+66     	; 0x846 <vfprintf+0x15c>
 804:	f8 01       	movw	r30, r16
 806:	80 81       	ld	r24, Z
 808:	89 83       	std	Y+1, r24	; 0x01
 80a:	0e 5f       	subi	r16, 0xFE	; 254
 80c:	1f 4f       	sbci	r17, 0xFF	; 255
 80e:	88 24       	eor	r8, r8
 810:	83 94       	inc	r8
 812:	91 2c       	mov	r9, r1
 814:	53 01       	movw	r10, r6
 816:	13 c0       	rjmp	.+38     	; 0x83e <vfprintf+0x154>
 818:	28 01       	movw	r4, r16
 81a:	f2 e0       	ldi	r31, 0x02	; 2
 81c:	4f 0e       	add	r4, r31
 81e:	51 1c       	adc	r5, r1
 820:	f8 01       	movw	r30, r16
 822:	a0 80       	ld	r10, Z
 824:	b1 80       	ldd	r11, Z+1	; 0x01
 826:	36 fe       	sbrs	r3, 6
 828:	03 c0       	rjmp	.+6      	; 0x830 <vfprintf+0x146>
 82a:	69 2d       	mov	r22, r9
 82c:	70 e0       	ldi	r23, 0x00	; 0
 82e:	02 c0       	rjmp	.+4      	; 0x834 <vfprintf+0x14a>
 830:	6f ef       	ldi	r22, 0xFF	; 255
 832:	7f ef       	ldi	r23, 0xFF	; 255
 834:	c5 01       	movw	r24, r10
 836:	0e 94 61 05 	call	0xac2	; 0xac2 <strnlen>
 83a:	4c 01       	movw	r8, r24
 83c:	82 01       	movw	r16, r4
 83e:	f3 2d       	mov	r31, r3
 840:	ff 77       	andi	r31, 0x7F	; 127
 842:	3f 2e       	mov	r3, r31
 844:	16 c0       	rjmp	.+44     	; 0x872 <vfprintf+0x188>
 846:	28 01       	movw	r4, r16
 848:	22 e0       	ldi	r18, 0x02	; 2
 84a:	42 0e       	add	r4, r18
 84c:	51 1c       	adc	r5, r1
 84e:	f8 01       	movw	r30, r16
 850:	a0 80       	ld	r10, Z
 852:	b1 80       	ldd	r11, Z+1	; 0x01
 854:	36 fe       	sbrs	r3, 6
 856:	03 c0       	rjmp	.+6      	; 0x85e <vfprintf+0x174>
 858:	69 2d       	mov	r22, r9
 85a:	70 e0       	ldi	r23, 0x00	; 0
 85c:	02 c0       	rjmp	.+4      	; 0x862 <vfprintf+0x178>
 85e:	6f ef       	ldi	r22, 0xFF	; 255
 860:	7f ef       	ldi	r23, 0xFF	; 255
 862:	c5 01       	movw	r24, r10
 864:	0e 94 56 05 	call	0xaac	; 0xaac <strnlen_P>
 868:	4c 01       	movw	r8, r24
 86a:	f3 2d       	mov	r31, r3
 86c:	f0 68       	ori	r31, 0x80	; 128
 86e:	3f 2e       	mov	r3, r31
 870:	82 01       	movw	r16, r4
 872:	33 fc       	sbrc	r3, 3
 874:	1b c0       	rjmp	.+54     	; 0x8ac <vfprintf+0x1c2>
 876:	82 2d       	mov	r24, r2
 878:	90 e0       	ldi	r25, 0x00	; 0
 87a:	88 16       	cp	r8, r24
 87c:	99 06       	cpc	r9, r25
 87e:	b0 f4       	brcc	.+44     	; 0x8ac <vfprintf+0x1c2>
 880:	b6 01       	movw	r22, r12
 882:	80 e2       	ldi	r24, 0x20	; 32
 884:	90 e0       	ldi	r25, 0x00	; 0
 886:	0e 94 6c 05 	call	0xad8	; 0xad8 <fputc>
 88a:	2a 94       	dec	r2
 88c:	f4 cf       	rjmp	.-24     	; 0x876 <vfprintf+0x18c>
 88e:	f5 01       	movw	r30, r10
 890:	37 fc       	sbrc	r3, 7
 892:	85 91       	lpm	r24, Z+
 894:	37 fe       	sbrs	r3, 7
 896:	81 91       	ld	r24, Z+
 898:	5f 01       	movw	r10, r30
 89a:	b6 01       	movw	r22, r12
 89c:	90 e0       	ldi	r25, 0x00	; 0
 89e:	0e 94 6c 05 	call	0xad8	; 0xad8 <fputc>
 8a2:	21 10       	cpse	r2, r1
 8a4:	2a 94       	dec	r2
 8a6:	21 e0       	ldi	r18, 0x01	; 1
 8a8:	82 1a       	sub	r8, r18
 8aa:	91 08       	sbc	r9, r1
 8ac:	81 14       	cp	r8, r1
 8ae:	91 04       	cpc	r9, r1
 8b0:	71 f7       	brne	.-36     	; 0x88e <vfprintf+0x1a4>
 8b2:	e8 c0       	rjmp	.+464    	; 0xa84 <__stack+0x185>
 8b4:	84 36       	cpi	r24, 0x64	; 100
 8b6:	11 f0       	breq	.+4      	; 0x8bc <vfprintf+0x1d2>
 8b8:	89 36       	cpi	r24, 0x69	; 105
 8ba:	41 f5       	brne	.+80     	; 0x90c <__stack+0xd>
 8bc:	f8 01       	movw	r30, r16
 8be:	37 fe       	sbrs	r3, 7
 8c0:	07 c0       	rjmp	.+14     	; 0x8d0 <vfprintf+0x1e6>
 8c2:	60 81       	ld	r22, Z
 8c4:	71 81       	ldd	r23, Z+1	; 0x01
 8c6:	82 81       	ldd	r24, Z+2	; 0x02
 8c8:	93 81       	ldd	r25, Z+3	; 0x03
 8ca:	0c 5f       	subi	r16, 0xFC	; 252
 8cc:	1f 4f       	sbci	r17, 0xFF	; 255
 8ce:	08 c0       	rjmp	.+16     	; 0x8e0 <vfprintf+0x1f6>
 8d0:	60 81       	ld	r22, Z
 8d2:	71 81       	ldd	r23, Z+1	; 0x01
 8d4:	07 2e       	mov	r0, r23
 8d6:	00 0c       	add	r0, r0
 8d8:	88 0b       	sbc	r24, r24
 8da:	99 0b       	sbc	r25, r25
 8dc:	0e 5f       	subi	r16, 0xFE	; 254
 8de:	1f 4f       	sbci	r17, 0xFF	; 255
 8e0:	f3 2d       	mov	r31, r3
 8e2:	ff 76       	andi	r31, 0x6F	; 111
 8e4:	3f 2e       	mov	r3, r31
 8e6:	97 ff       	sbrs	r25, 7
 8e8:	09 c0       	rjmp	.+18     	; 0x8fc <vfprintf+0x212>
 8ea:	90 95       	com	r25
 8ec:	80 95       	com	r24
 8ee:	70 95       	com	r23
 8f0:	61 95       	neg	r22
 8f2:	7f 4f       	sbci	r23, 0xFF	; 255
 8f4:	8f 4f       	sbci	r24, 0xFF	; 255
 8f6:	9f 4f       	sbci	r25, 0xFF	; 255
 8f8:	f0 68       	ori	r31, 0x80	; 128
 8fa:	3f 2e       	mov	r3, r31
 8fc:	2a e0       	ldi	r18, 0x0A	; 10
 8fe:	30 e0       	ldi	r19, 0x00	; 0
 900:	a3 01       	movw	r20, r6
 902:	0e 94 a8 05 	call	0xb50	; 0xb50 <__ultoa_invert>
 906:	88 2e       	mov	r8, r24
 908:	86 18       	sub	r8, r6
 90a:	45 c0       	rjmp	.+138    	; 0x996 <__stack+0x97>
 90c:	85 37       	cpi	r24, 0x75	; 117
 90e:	31 f4       	brne	.+12     	; 0x91c <__stack+0x1d>
 910:	23 2d       	mov	r18, r3
 912:	2f 7e       	andi	r18, 0xEF	; 239
 914:	b2 2e       	mov	r11, r18
 916:	2a e0       	ldi	r18, 0x0A	; 10
 918:	30 e0       	ldi	r19, 0x00	; 0
 91a:	25 c0       	rjmp	.+74     	; 0x966 <__stack+0x67>
 91c:	93 2d       	mov	r25, r3
 91e:	99 7f       	andi	r25, 0xF9	; 249
 920:	b9 2e       	mov	r11, r25
 922:	8f 36       	cpi	r24, 0x6F	; 111
 924:	c1 f0       	breq	.+48     	; 0x956 <__stack+0x57>
 926:	18 f4       	brcc	.+6      	; 0x92e <__stack+0x2f>
 928:	88 35       	cpi	r24, 0x58	; 88
 92a:	79 f0       	breq	.+30     	; 0x94a <__stack+0x4b>
 92c:	b5 c0       	rjmp	.+362    	; 0xa98 <__stack+0x199>
 92e:	80 37       	cpi	r24, 0x70	; 112
 930:	19 f0       	breq	.+6      	; 0x938 <__stack+0x39>
 932:	88 37       	cpi	r24, 0x78	; 120
 934:	21 f0       	breq	.+8      	; 0x93e <__stack+0x3f>
 936:	b0 c0       	rjmp	.+352    	; 0xa98 <__stack+0x199>
 938:	e9 2f       	mov	r30, r25
 93a:	e0 61       	ori	r30, 0x10	; 16
 93c:	be 2e       	mov	r11, r30
 93e:	b4 fe       	sbrs	r11, 4
 940:	0d c0       	rjmp	.+26     	; 0x95c <__stack+0x5d>
 942:	fb 2d       	mov	r31, r11
 944:	f4 60       	ori	r31, 0x04	; 4
 946:	bf 2e       	mov	r11, r31
 948:	09 c0       	rjmp	.+18     	; 0x95c <__stack+0x5d>
 94a:	34 fe       	sbrs	r3, 4
 94c:	0a c0       	rjmp	.+20     	; 0x962 <__stack+0x63>
 94e:	29 2f       	mov	r18, r25
 950:	26 60       	ori	r18, 0x06	; 6
 952:	b2 2e       	mov	r11, r18
 954:	06 c0       	rjmp	.+12     	; 0x962 <__stack+0x63>
 956:	28 e0       	ldi	r18, 0x08	; 8
 958:	30 e0       	ldi	r19, 0x00	; 0
 95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x67>
 95c:	20 e1       	ldi	r18, 0x10	; 16
 95e:	30 e0       	ldi	r19, 0x00	; 0
 960:	02 c0       	rjmp	.+4      	; 0x966 <__stack+0x67>
 962:	20 e1       	ldi	r18, 0x10	; 16
 964:	32 e0       	ldi	r19, 0x02	; 2
 966:	f8 01       	movw	r30, r16
 968:	b7 fe       	sbrs	r11, 7
 96a:	07 c0       	rjmp	.+14     	; 0x97a <__stack+0x7b>
 96c:	60 81       	ld	r22, Z
 96e:	71 81       	ldd	r23, Z+1	; 0x01
 970:	82 81       	ldd	r24, Z+2	; 0x02
 972:	93 81       	ldd	r25, Z+3	; 0x03
 974:	0c 5f       	subi	r16, 0xFC	; 252
 976:	1f 4f       	sbci	r17, 0xFF	; 255
 978:	06 c0       	rjmp	.+12     	; 0x986 <__stack+0x87>
 97a:	60 81       	ld	r22, Z
 97c:	71 81       	ldd	r23, Z+1	; 0x01
 97e:	80 e0       	ldi	r24, 0x00	; 0
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	0e 5f       	subi	r16, 0xFE	; 254
 984:	1f 4f       	sbci	r17, 0xFF	; 255
 986:	a3 01       	movw	r20, r6
 988:	0e 94 a8 05 	call	0xb50	; 0xb50 <__ultoa_invert>
 98c:	88 2e       	mov	r8, r24
 98e:	86 18       	sub	r8, r6
 990:	fb 2d       	mov	r31, r11
 992:	ff 77       	andi	r31, 0x7F	; 127
 994:	3f 2e       	mov	r3, r31
 996:	36 fe       	sbrs	r3, 6
 998:	0d c0       	rjmp	.+26     	; 0x9b4 <__stack+0xb5>
 99a:	23 2d       	mov	r18, r3
 99c:	2e 7f       	andi	r18, 0xFE	; 254
 99e:	a2 2e       	mov	r10, r18
 9a0:	89 14       	cp	r8, r9
 9a2:	58 f4       	brcc	.+22     	; 0x9ba <__stack+0xbb>
 9a4:	34 fe       	sbrs	r3, 4
 9a6:	0b c0       	rjmp	.+22     	; 0x9be <__stack+0xbf>
 9a8:	32 fc       	sbrc	r3, 2
 9aa:	09 c0       	rjmp	.+18     	; 0x9be <__stack+0xbf>
 9ac:	83 2d       	mov	r24, r3
 9ae:	8e 7e       	andi	r24, 0xEE	; 238
 9b0:	a8 2e       	mov	r10, r24
 9b2:	05 c0       	rjmp	.+10     	; 0x9be <__stack+0xbf>
 9b4:	b8 2c       	mov	r11, r8
 9b6:	a3 2c       	mov	r10, r3
 9b8:	03 c0       	rjmp	.+6      	; 0x9c0 <__stack+0xc1>
 9ba:	b8 2c       	mov	r11, r8
 9bc:	01 c0       	rjmp	.+2      	; 0x9c0 <__stack+0xc1>
 9be:	b9 2c       	mov	r11, r9
 9c0:	a4 fe       	sbrs	r10, 4
 9c2:	0f c0       	rjmp	.+30     	; 0x9e2 <__stack+0xe3>
 9c4:	fe 01       	movw	r30, r28
 9c6:	e8 0d       	add	r30, r8
 9c8:	f1 1d       	adc	r31, r1
 9ca:	80 81       	ld	r24, Z
 9cc:	80 33       	cpi	r24, 0x30	; 48
 9ce:	21 f4       	brne	.+8      	; 0x9d8 <__stack+0xd9>
 9d0:	9a 2d       	mov	r25, r10
 9d2:	99 7e       	andi	r25, 0xE9	; 233
 9d4:	a9 2e       	mov	r10, r25
 9d6:	09 c0       	rjmp	.+18     	; 0x9ea <__stack+0xeb>
 9d8:	a2 fe       	sbrs	r10, 2
 9da:	06 c0       	rjmp	.+12     	; 0x9e8 <__stack+0xe9>
 9dc:	b3 94       	inc	r11
 9de:	b3 94       	inc	r11
 9e0:	04 c0       	rjmp	.+8      	; 0x9ea <__stack+0xeb>
 9e2:	8a 2d       	mov	r24, r10
 9e4:	86 78       	andi	r24, 0x86	; 134
 9e6:	09 f0       	breq	.+2      	; 0x9ea <__stack+0xeb>
 9e8:	b3 94       	inc	r11
 9ea:	a3 fc       	sbrc	r10, 3
 9ec:	11 c0       	rjmp	.+34     	; 0xa10 <__stack+0x111>
 9ee:	a0 fe       	sbrs	r10, 0
 9f0:	06 c0       	rjmp	.+12     	; 0x9fe <__stack+0xff>
 9f2:	b2 14       	cp	r11, r2
 9f4:	88 f4       	brcc	.+34     	; 0xa18 <__stack+0x119>
 9f6:	28 0c       	add	r2, r8
 9f8:	92 2c       	mov	r9, r2
 9fa:	9b 18       	sub	r9, r11
 9fc:	0e c0       	rjmp	.+28     	; 0xa1a <__stack+0x11b>
 9fe:	b2 14       	cp	r11, r2
 a00:	60 f4       	brcc	.+24     	; 0xa1a <__stack+0x11b>
 a02:	b6 01       	movw	r22, r12
 a04:	80 e2       	ldi	r24, 0x20	; 32
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	0e 94 6c 05 	call	0xad8	; 0xad8 <fputc>
 a0c:	b3 94       	inc	r11
 a0e:	f7 cf       	rjmp	.-18     	; 0x9fe <__stack+0xff>
 a10:	b2 14       	cp	r11, r2
 a12:	18 f4       	brcc	.+6      	; 0xa1a <__stack+0x11b>
 a14:	2b 18       	sub	r2, r11
 a16:	02 c0       	rjmp	.+4      	; 0xa1c <__stack+0x11d>
 a18:	98 2c       	mov	r9, r8
 a1a:	21 2c       	mov	r2, r1
 a1c:	a4 fe       	sbrs	r10, 4
 a1e:	10 c0       	rjmp	.+32     	; 0xa40 <__stack+0x141>
 a20:	b6 01       	movw	r22, r12
 a22:	80 e3       	ldi	r24, 0x30	; 48
 a24:	90 e0       	ldi	r25, 0x00	; 0
 a26:	0e 94 6c 05 	call	0xad8	; 0xad8 <fputc>
 a2a:	a2 fe       	sbrs	r10, 2
 a2c:	17 c0       	rjmp	.+46     	; 0xa5c <__stack+0x15d>
 a2e:	a1 fc       	sbrc	r10, 1
 a30:	03 c0       	rjmp	.+6      	; 0xa38 <__stack+0x139>
 a32:	88 e7       	ldi	r24, 0x78	; 120
 a34:	90 e0       	ldi	r25, 0x00	; 0
 a36:	02 c0       	rjmp	.+4      	; 0xa3c <__stack+0x13d>
 a38:	88 e5       	ldi	r24, 0x58	; 88
 a3a:	90 e0       	ldi	r25, 0x00	; 0
 a3c:	b6 01       	movw	r22, r12
 a3e:	0c c0       	rjmp	.+24     	; 0xa58 <__stack+0x159>
 a40:	8a 2d       	mov	r24, r10
 a42:	86 78       	andi	r24, 0x86	; 134
 a44:	59 f0       	breq	.+22     	; 0xa5c <__stack+0x15d>
 a46:	a1 fe       	sbrs	r10, 1
 a48:	02 c0       	rjmp	.+4      	; 0xa4e <__stack+0x14f>
 a4a:	8b e2       	ldi	r24, 0x2B	; 43
 a4c:	01 c0       	rjmp	.+2      	; 0xa50 <__stack+0x151>
 a4e:	80 e2       	ldi	r24, 0x20	; 32
 a50:	a7 fc       	sbrc	r10, 7
 a52:	8d e2       	ldi	r24, 0x2D	; 45
 a54:	b6 01       	movw	r22, r12
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	0e 94 6c 05 	call	0xad8	; 0xad8 <fputc>
 a5c:	89 14       	cp	r8, r9
 a5e:	38 f4       	brcc	.+14     	; 0xa6e <__stack+0x16f>
 a60:	b6 01       	movw	r22, r12
 a62:	80 e3       	ldi	r24, 0x30	; 48
 a64:	90 e0       	ldi	r25, 0x00	; 0
 a66:	0e 94 6c 05 	call	0xad8	; 0xad8 <fputc>
 a6a:	9a 94       	dec	r9
 a6c:	f7 cf       	rjmp	.-18     	; 0xa5c <__stack+0x15d>
 a6e:	8a 94       	dec	r8
 a70:	f3 01       	movw	r30, r6
 a72:	e8 0d       	add	r30, r8
 a74:	f1 1d       	adc	r31, r1
 a76:	80 81       	ld	r24, Z
 a78:	b6 01       	movw	r22, r12
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	0e 94 6c 05 	call	0xad8	; 0xad8 <fputc>
 a80:	81 10       	cpse	r8, r1
 a82:	f5 cf       	rjmp	.-22     	; 0xa6e <__stack+0x16f>
 a84:	22 20       	and	r2, r2
 a86:	09 f4       	brne	.+2      	; 0xa8a <__stack+0x18b>
 a88:	42 ce       	rjmp	.-892    	; 0x70e <vfprintf+0x24>
 a8a:	b6 01       	movw	r22, r12
 a8c:	80 e2       	ldi	r24, 0x20	; 32
 a8e:	90 e0       	ldi	r25, 0x00	; 0
 a90:	0e 94 6c 05 	call	0xad8	; 0xad8 <fputc>
 a94:	2a 94       	dec	r2
 a96:	f6 cf       	rjmp	.-20     	; 0xa84 <__stack+0x185>
 a98:	f6 01       	movw	r30, r12
 a9a:	86 81       	ldd	r24, Z+6	; 0x06
 a9c:	97 81       	ldd	r25, Z+7	; 0x07
 a9e:	02 c0       	rjmp	.+4      	; 0xaa4 <__stack+0x1a5>
 aa0:	8f ef       	ldi	r24, 0xFF	; 255
 aa2:	9f ef       	ldi	r25, 0xFF	; 255
 aa4:	2b 96       	adiw	r28, 0x0b	; 11
 aa6:	e2 e1       	ldi	r30, 0x12	; 18
 aa8:	0c 94 22 06 	jmp	0xc44	; 0xc44 <__epilogue_restores__>

00000aac <strnlen_P>:
 aac:	fc 01       	movw	r30, r24
 aae:	05 90       	lpm	r0, Z+
 ab0:	61 50       	subi	r22, 0x01	; 1
 ab2:	70 40       	sbci	r23, 0x00	; 0
 ab4:	01 10       	cpse	r0, r1
 ab6:	d8 f7       	brcc	.-10     	; 0xaae <strnlen_P+0x2>
 ab8:	80 95       	com	r24
 aba:	90 95       	com	r25
 abc:	8e 0f       	add	r24, r30
 abe:	9f 1f       	adc	r25, r31
 ac0:	08 95       	ret

00000ac2 <strnlen>:
 ac2:	fc 01       	movw	r30, r24
 ac4:	61 50       	subi	r22, 0x01	; 1
 ac6:	70 40       	sbci	r23, 0x00	; 0
 ac8:	01 90       	ld	r0, Z+
 aca:	01 10       	cpse	r0, r1
 acc:	d8 f7       	brcc	.-10     	; 0xac4 <strnlen+0x2>
 ace:	80 95       	com	r24
 ad0:	90 95       	com	r25
 ad2:	8e 0f       	add	r24, r30
 ad4:	9f 1f       	adc	r25, r31
 ad6:	08 95       	ret

00000ad8 <fputc>:
 ad8:	0f 93       	push	r16
 ada:	1f 93       	push	r17
 adc:	cf 93       	push	r28
 ade:	df 93       	push	r29
 ae0:	fb 01       	movw	r30, r22
 ae2:	23 81       	ldd	r18, Z+3	; 0x03
 ae4:	21 fd       	sbrc	r18, 1
 ae6:	03 c0       	rjmp	.+6      	; 0xaee <fputc+0x16>
 ae8:	8f ef       	ldi	r24, 0xFF	; 255
 aea:	9f ef       	ldi	r25, 0xFF	; 255
 aec:	2c c0       	rjmp	.+88     	; 0xb46 <fputc+0x6e>
 aee:	22 ff       	sbrs	r18, 2
 af0:	16 c0       	rjmp	.+44     	; 0xb1e <fputc+0x46>
 af2:	46 81       	ldd	r20, Z+6	; 0x06
 af4:	57 81       	ldd	r21, Z+7	; 0x07
 af6:	24 81       	ldd	r18, Z+4	; 0x04
 af8:	35 81       	ldd	r19, Z+5	; 0x05
 afa:	42 17       	cp	r20, r18
 afc:	53 07       	cpc	r21, r19
 afe:	44 f4       	brge	.+16     	; 0xb10 <fputc+0x38>
 b00:	a0 81       	ld	r26, Z
 b02:	b1 81       	ldd	r27, Z+1	; 0x01
 b04:	9d 01       	movw	r18, r26
 b06:	2f 5f       	subi	r18, 0xFF	; 255
 b08:	3f 4f       	sbci	r19, 0xFF	; 255
 b0a:	31 83       	std	Z+1, r19	; 0x01
 b0c:	20 83       	st	Z, r18
 b0e:	8c 93       	st	X, r24
 b10:	26 81       	ldd	r18, Z+6	; 0x06
 b12:	37 81       	ldd	r19, Z+7	; 0x07
 b14:	2f 5f       	subi	r18, 0xFF	; 255
 b16:	3f 4f       	sbci	r19, 0xFF	; 255
 b18:	37 83       	std	Z+7, r19	; 0x07
 b1a:	26 83       	std	Z+6, r18	; 0x06
 b1c:	14 c0       	rjmp	.+40     	; 0xb46 <fputc+0x6e>
 b1e:	8b 01       	movw	r16, r22
 b20:	ec 01       	movw	r28, r24
 b22:	fb 01       	movw	r30, r22
 b24:	00 84       	ldd	r0, Z+8	; 0x08
 b26:	f1 85       	ldd	r31, Z+9	; 0x09
 b28:	e0 2d       	mov	r30, r0
 b2a:	09 95       	icall
 b2c:	89 2b       	or	r24, r25
 b2e:	e1 f6       	brne	.-72     	; 0xae8 <fputc+0x10>
 b30:	d8 01       	movw	r26, r16
 b32:	16 96       	adiw	r26, 0x06	; 6
 b34:	8d 91       	ld	r24, X+
 b36:	9c 91       	ld	r25, X
 b38:	17 97       	sbiw	r26, 0x07	; 7
 b3a:	01 96       	adiw	r24, 0x01	; 1
 b3c:	17 96       	adiw	r26, 0x07	; 7
 b3e:	9c 93       	st	X, r25
 b40:	8e 93       	st	-X, r24
 b42:	16 97       	sbiw	r26, 0x06	; 6
 b44:	ce 01       	movw	r24, r28
 b46:	df 91       	pop	r29
 b48:	cf 91       	pop	r28
 b4a:	1f 91       	pop	r17
 b4c:	0f 91       	pop	r16
 b4e:	08 95       	ret

00000b50 <__ultoa_invert>:
 b50:	fa 01       	movw	r30, r20
 b52:	aa 27       	eor	r26, r26
 b54:	28 30       	cpi	r18, 0x08	; 8
 b56:	51 f1       	breq	.+84     	; 0xbac <__ultoa_invert+0x5c>
 b58:	20 31       	cpi	r18, 0x10	; 16
 b5a:	81 f1       	breq	.+96     	; 0xbbc <__ultoa_invert+0x6c>
 b5c:	e8 94       	clt
 b5e:	6f 93       	push	r22
 b60:	6e 7f       	andi	r22, 0xFE	; 254
 b62:	6e 5f       	subi	r22, 0xFE	; 254
 b64:	7f 4f       	sbci	r23, 0xFF	; 255
 b66:	8f 4f       	sbci	r24, 0xFF	; 255
 b68:	9f 4f       	sbci	r25, 0xFF	; 255
 b6a:	af 4f       	sbci	r26, 0xFF	; 255
 b6c:	b1 e0       	ldi	r27, 0x01	; 1
 b6e:	3e d0       	rcall	.+124    	; 0xbec <__ultoa_invert+0x9c>
 b70:	b4 e0       	ldi	r27, 0x04	; 4
 b72:	3c d0       	rcall	.+120    	; 0xbec <__ultoa_invert+0x9c>
 b74:	67 0f       	add	r22, r23
 b76:	78 1f       	adc	r23, r24
 b78:	89 1f       	adc	r24, r25
 b7a:	9a 1f       	adc	r25, r26
 b7c:	a1 1d       	adc	r26, r1
 b7e:	68 0f       	add	r22, r24
 b80:	79 1f       	adc	r23, r25
 b82:	8a 1f       	adc	r24, r26
 b84:	91 1d       	adc	r25, r1
 b86:	a1 1d       	adc	r26, r1
 b88:	6a 0f       	add	r22, r26
 b8a:	71 1d       	adc	r23, r1
 b8c:	81 1d       	adc	r24, r1
 b8e:	91 1d       	adc	r25, r1
 b90:	a1 1d       	adc	r26, r1
 b92:	20 d0       	rcall	.+64     	; 0xbd4 <__ultoa_invert+0x84>
 b94:	09 f4       	brne	.+2      	; 0xb98 <__ultoa_invert+0x48>
 b96:	68 94       	set
 b98:	3f 91       	pop	r19
 b9a:	2a e0       	ldi	r18, 0x0A	; 10
 b9c:	26 9f       	mul	r18, r22
 b9e:	11 24       	eor	r1, r1
 ba0:	30 19       	sub	r19, r0
 ba2:	30 5d       	subi	r19, 0xD0	; 208
 ba4:	31 93       	st	Z+, r19
 ba6:	de f6       	brtc	.-74     	; 0xb5e <__ultoa_invert+0xe>
 ba8:	cf 01       	movw	r24, r30
 baa:	08 95       	ret
 bac:	46 2f       	mov	r20, r22
 bae:	47 70       	andi	r20, 0x07	; 7
 bb0:	40 5d       	subi	r20, 0xD0	; 208
 bb2:	41 93       	st	Z+, r20
 bb4:	b3 e0       	ldi	r27, 0x03	; 3
 bb6:	0f d0       	rcall	.+30     	; 0xbd6 <__ultoa_invert+0x86>
 bb8:	c9 f7       	brne	.-14     	; 0xbac <__ultoa_invert+0x5c>
 bba:	f6 cf       	rjmp	.-20     	; 0xba8 <__ultoa_invert+0x58>
 bbc:	46 2f       	mov	r20, r22
 bbe:	4f 70       	andi	r20, 0x0F	; 15
 bc0:	40 5d       	subi	r20, 0xD0	; 208
 bc2:	4a 33       	cpi	r20, 0x3A	; 58
 bc4:	18 f0       	brcs	.+6      	; 0xbcc <__ultoa_invert+0x7c>
 bc6:	49 5d       	subi	r20, 0xD9	; 217
 bc8:	31 fd       	sbrc	r19, 1
 bca:	40 52       	subi	r20, 0x20	; 32
 bcc:	41 93       	st	Z+, r20
 bce:	02 d0       	rcall	.+4      	; 0xbd4 <__ultoa_invert+0x84>
 bd0:	a9 f7       	brne	.-22     	; 0xbbc <__ultoa_invert+0x6c>
 bd2:	ea cf       	rjmp	.-44     	; 0xba8 <__ultoa_invert+0x58>
 bd4:	b4 e0       	ldi	r27, 0x04	; 4
 bd6:	a6 95       	lsr	r26
 bd8:	97 95       	ror	r25
 bda:	87 95       	ror	r24
 bdc:	77 95       	ror	r23
 bde:	67 95       	ror	r22
 be0:	ba 95       	dec	r27
 be2:	c9 f7       	brne	.-14     	; 0xbd6 <__ultoa_invert+0x86>
 be4:	00 97       	sbiw	r24, 0x00	; 0
 be6:	61 05       	cpc	r22, r1
 be8:	71 05       	cpc	r23, r1
 bea:	08 95       	ret
 bec:	9b 01       	movw	r18, r22
 bee:	ac 01       	movw	r20, r24
 bf0:	0a 2e       	mov	r0, r26
 bf2:	06 94       	lsr	r0
 bf4:	57 95       	ror	r21
 bf6:	47 95       	ror	r20
 bf8:	37 95       	ror	r19
 bfa:	27 95       	ror	r18
 bfc:	ba 95       	dec	r27
 bfe:	c9 f7       	brne	.-14     	; 0xbf2 <__ultoa_invert+0xa2>
 c00:	62 0f       	add	r22, r18
 c02:	73 1f       	adc	r23, r19
 c04:	84 1f       	adc	r24, r20
 c06:	95 1f       	adc	r25, r21
 c08:	a0 1d       	adc	r26, r0
 c0a:	08 95       	ret

00000c0c <__prologue_saves__>:
 c0c:	2f 92       	push	r2
 c0e:	3f 92       	push	r3
 c10:	4f 92       	push	r4
 c12:	5f 92       	push	r5
 c14:	6f 92       	push	r6
 c16:	7f 92       	push	r7
 c18:	8f 92       	push	r8
 c1a:	9f 92       	push	r9
 c1c:	af 92       	push	r10
 c1e:	bf 92       	push	r11
 c20:	cf 92       	push	r12
 c22:	df 92       	push	r13
 c24:	ef 92       	push	r14
 c26:	ff 92       	push	r15
 c28:	0f 93       	push	r16
 c2a:	1f 93       	push	r17
 c2c:	cf 93       	push	r28
 c2e:	df 93       	push	r29
 c30:	cd b7       	in	r28, 0x3d	; 61
 c32:	de b7       	in	r29, 0x3e	; 62
 c34:	ca 1b       	sub	r28, r26
 c36:	db 0b       	sbc	r29, r27
 c38:	0f b6       	in	r0, 0x3f	; 63
 c3a:	f8 94       	cli
 c3c:	de bf       	out	0x3e, r29	; 62
 c3e:	0f be       	out	0x3f, r0	; 63
 c40:	cd bf       	out	0x3d, r28	; 61
 c42:	09 94       	ijmp

00000c44 <__epilogue_restores__>:
 c44:	2a 88       	ldd	r2, Y+18	; 0x12
 c46:	39 88       	ldd	r3, Y+17	; 0x11
 c48:	48 88       	ldd	r4, Y+16	; 0x10
 c4a:	5f 84       	ldd	r5, Y+15	; 0x0f
 c4c:	6e 84       	ldd	r6, Y+14	; 0x0e
 c4e:	7d 84       	ldd	r7, Y+13	; 0x0d
 c50:	8c 84       	ldd	r8, Y+12	; 0x0c
 c52:	9b 84       	ldd	r9, Y+11	; 0x0b
 c54:	aa 84       	ldd	r10, Y+10	; 0x0a
 c56:	b9 84       	ldd	r11, Y+9	; 0x09
 c58:	c8 84       	ldd	r12, Y+8	; 0x08
 c5a:	df 80       	ldd	r13, Y+7	; 0x07
 c5c:	ee 80       	ldd	r14, Y+6	; 0x06
 c5e:	fd 80       	ldd	r15, Y+5	; 0x05
 c60:	0c 81       	ldd	r16, Y+4	; 0x04
 c62:	1b 81       	ldd	r17, Y+3	; 0x03
 c64:	aa 81       	ldd	r26, Y+2	; 0x02
 c66:	b9 81       	ldd	r27, Y+1	; 0x01
 c68:	ce 0f       	add	r28, r30
 c6a:	d1 1d       	adc	r29, r1
 c6c:	0f b6       	in	r0, 0x3f	; 63
 c6e:	f8 94       	cli
 c70:	de bf       	out	0x3e, r29	; 62
 c72:	0f be       	out	0x3f, r0	; 63
 c74:	cd bf       	out	0x3d, r28	; 61
 c76:	ed 01       	movw	r28, r26
 c78:	08 95       	ret

00000c7a <_exit>:
 c7a:	f8 94       	cli

00000c7c <__stop_program>:
 c7c:	ff cf       	rjmp	.-2      	; 0xc7c <__stop_program>
