
encasingcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c2  00800100  00000d18  00000dac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000042  008001c2  008001c2  00000e6e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000e6e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ecc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000f0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000217e  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b03  00000000  00000000  000031a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dd1  00000000  00000000  00003ca5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000244  00000000  00000000  00004a78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000536  00000000  00000000  00004cbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000010e6  00000000  00000000  000051f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000062d8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 e1       	ldi	r30, 0x18	; 24
  7c:	fd e0       	ldi	r31, 0x0D	; 13
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 3c       	cpi	r26, 0xC2	; 194
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 ec       	ldi	r26, 0xC2	; 194
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <main>
  9e:	0c 94 8a 06 	jmp	0xd14	; 0xd14 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <fan_init>:
 */ 
#include "fan.h"

void fan_init(void)
{
	DDRB |= 1 << FAN_PWM_PORT;
  a6:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= 1 << RELAY_PORT;
  a8:	22 9a       	sbi	0x04, 2	; 4
	
	ICR1 = 320;
  aa:	80 e4       	ldi	r24, 0x40	; 64
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  b2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 160;
  b6:	80 ea       	ldi	r24, 0xA0	; 160
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  be:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	TCCR1A |= (1 << COM1A1) | (1 << COM1A0);
  c2:	e0 e8       	ldi	r30, 0x80	; 128
  c4:	f0 e0       	ldi	r31, 0x00	; 0
  c6:	80 81       	ld	r24, Z
  c8:	80 6c       	ori	r24, 0xC0	; 192
  ca:	80 83       	st	Z, r24
	TCCR1A |= (1 << WGM11);
  cc:	80 81       	ld	r24, Z
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	80 83       	st	Z, r24
	TCCR1B |= (1 << WGM12) | (1 << WGM13);
  d2:	e1 e8       	ldi	r30, 0x81	; 129
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	80 81       	ld	r24, Z
  d8:	88 61       	ori	r24, 0x18	; 24
  da:	80 83       	st	Z, r24
	//TCCR1A |= (1 << WGM11);
	//TCCR1A |= (1 << WGM12) | (1 << WGM13);
	
	TCCR1B &= ~((1 << CS11) | (1 << CS12));
  dc:	80 81       	ld	r24, Z
  de:	89 7f       	andi	r24, 0xF9	; 249
  e0:	80 83       	st	Z, r24
	TCCR1B |= (1 << CS10);
  e2:	80 81       	ld	r24, Z
  e4:	81 60       	ori	r24, 0x01	; 1
  e6:	80 83       	st	Z, r24
  e8:	08 95       	ret

000000ea <i2c_init>:
void i2c_write_byte(uint8_t byte_in)
{
	TWDR = byte_in;
	TWCR = (1<<TWINT | 1<<TWEN);
	while(!(TWCR & (1<<TWINT)));
}
  ea:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
  ee:	88 e4       	ldi	r24, 0x48	; 72
  f0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
  f4:	08 95       	ret

000000f6 <i2c_read>:

int32_t i2c_read(uint8_t addr,uint16_t reg)
{
  f6:	af 92       	push	r10
  f8:	bf 92       	push	r11
  fa:	cf 92       	push	r12
  fc:	df 92       	push	r13
  fe:	ef 92       	push	r14
 100:	ff 92       	push	r15
 102:	0f 93       	push	r16
 104:	1f 93       	push	r17
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	cd b7       	in	r28, 0x3d	; 61
 10c:	de b7       	in	r29, 0x3e	; 62
 10e:	a0 97       	sbiw	r28, 0x20	; 32
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	f8 94       	cli
 114:	de bf       	out	0x3e, r29	; 62
 116:	0f be       	out	0x3f, r0	; 63
 118:	cd bf       	out	0x3d, r28	; 61
 11a:	18 2f       	mov	r17, r24
 11c:	06 2f       	mov	r16, r22
	char *string_buf[16];
	int32_t databuf;
	TWCR = (1<<TWINT | 1<<TWEN | 1<<TWSTA);
 11e:	84 ea       	ldi	r24, 0xA4	; 164
 120:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 124:	ec eb       	ldi	r30, 0xBC	; 188
 126:	f0 e0       	ldi	r31, 0x00	; 0
 128:	80 81       	ld	r24, Z
 12a:	88 23       	and	r24, r24
 12c:	ec f7       	brge	.-6      	; 0x128 <i2c_read+0x32>
	if ((TWSR & 0xF8) == MR_START)
 12e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 132:	88 7f       	andi	r24, 0xF8	; 248
 134:	88 30       	cpi	r24, 0x08	; 8
 136:	51 f4       	brne	.+20     	; 0x14c <i2c_read+0x56>
	{
		lcd_clear_screen();
 138:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		lcd_set_line(1);
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		lcd_send_string("MR_START Sent!");
 142:	80 e0       	ldi	r24, 0x00	; 0
 144:	91 e0       	ldi	r25, 0x01	; 1
 146:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 14a:	1e c0       	rjmp	.+60     	; 0x188 <i2c_read+0x92>
		//USART_send('\n');
	}
	else
	{
		sprintf(string_buf,"ERR0: %x",(TWSR & 0xF8));
 14c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 150:	88 7f       	andi	r24, 0xF8	; 248
 152:	1f 92       	push	r1
 154:	8f 93       	push	r24
 156:	8f e0       	ldi	r24, 0x0F	; 15
 158:	91 e0       	ldi	r25, 0x01	; 1
 15a:	9f 93       	push	r25
 15c:	8f 93       	push	r24
 15e:	ce 01       	movw	r24, r28
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	5c 01       	movw	r10, r24
 164:	9f 93       	push	r25
 166:	8f 93       	push	r24
 168:	0e 94 a0 03 	call	0x740	; 0x740 <sprintf>
		lcd_clear_screen();
 16c:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		lcd_set_line(1);
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		lcd_send_string(string_buf);
 176:	c5 01       	movw	r24, r10
 178:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 17c:	0f 90       	pop	r0
 17e:	0f 90       	pop	r0
 180:	0f 90       	pop	r0
 182:	0f 90       	pop	r0
 184:	0f 90       	pop	r0
 186:	0f 90       	pop	r0
	}
	TWDR = addr;
 188:	10 93 bb 00 	sts	0x00BB, r17	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
 18c:	84 e8       	ldi	r24, 0x84	; 132
 18e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 192:	ec eb       	ldi	r30, 0xBC	; 188
 194:	f0 e0       	ldi	r31, 0x00	; 0
 196:	80 81       	ld	r24, Z
 198:	88 23       	and	r24, r24
 19a:	ec f7       	brge	.-6      	; 0x196 <i2c_read+0xa0>
	if ((TWSR & 0xF8) == MR_SLA_R_ACK)
 19c:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1a0:	88 7f       	andi	r24, 0xF8	; 248
 1a2:	80 34       	cpi	r24, 0x40	; 64
 1a4:	51 f4       	brne	.+20     	; 0x1ba <i2c_read+0xc4>
	{
		lcd_clear_screen();
 1a6:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		lcd_set_line(1);
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		lcd_send_string("MR_SLA_R_ACK Sent!");
 1b0:	88 e1       	ldi	r24, 0x18	; 24
 1b2:	91 e0       	ldi	r25, 0x01	; 1
 1b4:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 1b8:	1e c0       	rjmp	.+60     	; 0x1f6 <i2c_read+0x100>
		//USART_send('\n');
	}
	else
	{
		sprintf(string_buf,"ERR1: 0x%x",(TWSR & 0xF8));
 1ba:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 1be:	88 7f       	andi	r24, 0xF8	; 248
 1c0:	1f 92       	push	r1
 1c2:	8f 93       	push	r24
 1c4:	8b e2       	ldi	r24, 0x2B	; 43
 1c6:	91 e0       	ldi	r25, 0x01	; 1
 1c8:	9f 93       	push	r25
 1ca:	8f 93       	push	r24
 1cc:	ce 01       	movw	r24, r28
 1ce:	01 96       	adiw	r24, 0x01	; 1
 1d0:	5c 01       	movw	r10, r24
 1d2:	9f 93       	push	r25
 1d4:	8f 93       	push	r24
 1d6:	0e 94 a0 03 	call	0x740	; 0x740 <sprintf>
		lcd_clear_screen();
 1da:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		lcd_set_line(1);
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		lcd_send_string(string_buf);
 1e4:	c5 01       	movw	r24, r10
 1e6:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 1ea:	0f 90       	pop	r0
 1ec:	0f 90       	pop	r0
 1ee:	0f 90       	pop	r0
 1f0:	0f 90       	pop	r0
 1f2:	0f 90       	pop	r0
 1f4:	0f 90       	pop	r0
	}
	TWDR = (uint8_t) ((reg & 0xFF) >> 8);
 1f6:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT | 1<<TWEN);
 1fa:	84 e8       	ldi	r24, 0x84	; 132
 1fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 200:	ec eb       	ldi	r30, 0xBC	; 188
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	88 23       	and	r24, r24
 208:	ec f7       	brge	.-6      	; 0x204 <i2c_read+0x10e>
	if ((TWSR & 0xF8) == MR_DATA_ACK)
 20a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 20e:	88 7f       	andi	r24, 0xF8	; 248
 210:	80 35       	cpi	r24, 0x50	; 80
 212:	51 f4       	brne	.+20     	; 0x228 <i2c_read+0x132>
	{
		lcd_clear_screen();
 214:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		lcd_set_line(1);
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		lcd_send_string("MR_DATA_ACK sent");
 21e:	86 e3       	ldi	r24, 0x36	; 54
 220:	91 e0       	ldi	r25, 0x01	; 1
 222:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 226:	1e c0       	rjmp	.+60     	; 0x264 <i2c_read+0x16e>
		//USART_send('\n');
	}
	else
	{
		sprintf(string_buf,"ERR2: 0x%x",(TWSR & 0xF8));
 228:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 22c:	88 7f       	andi	r24, 0xF8	; 248
 22e:	1f 92       	push	r1
 230:	8f 93       	push	r24
 232:	87 e4       	ldi	r24, 0x47	; 71
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	9f 93       	push	r25
 238:	8f 93       	push	r24
 23a:	ce 01       	movw	r24, r28
 23c:	01 96       	adiw	r24, 0x01	; 1
 23e:	5c 01       	movw	r10, r24
 240:	9f 93       	push	r25
 242:	8f 93       	push	r24
 244:	0e 94 a0 03 	call	0x740	; 0x740 <sprintf>
		lcd_clear_screen();
 248:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		lcd_set_line(1);
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		lcd_send_string(string_buf);
 252:	c5 01       	movw	r24, r10
 254:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 258:	0f 90       	pop	r0
 25a:	0f 90       	pop	r0
 25c:	0f 90       	pop	r0
 25e:	0f 90       	pop	r0
 260:	0f 90       	pop	r0
 262:	0f 90       	pop	r0
	}
	TWDR = (uint8_t) (reg & 0xFF);
 264:	00 93 bb 00 	sts	0x00BB, r16	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT | 1<<TWEN);
 268:	84 e8       	ldi	r24, 0x84	; 132
 26a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 26e:	ec eb       	ldi	r30, 0xBC	; 188
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	88 23       	and	r24, r24
 276:	ec f7       	brge	.-6      	; 0x272 <i2c_read+0x17c>
	if ((TWSR & 0xF8) == MR_DATA_ACK)
 278:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 27c:	88 7f       	andi	r24, 0xF8	; 248
 27e:	80 35       	cpi	r24, 0x50	; 80
 280:	51 f4       	brne	.+20     	; 0x296 <i2c_read+0x1a0>
	{
		lcd_clear_screen();
 282:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		lcd_set_line(1);
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		lcd_send_string("MR_DATA_ACK sent!");
 28c:	82 e5       	ldi	r24, 0x52	; 82
 28e:	91 e0       	ldi	r25, 0x01	; 1
 290:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 294:	1e c0       	rjmp	.+60     	; 0x2d2 <i2c_read+0x1dc>
		//USART_send('\n');
	}
	else
	{
		sprintf(string_buf,"ERR3: 0x%x",(TWSR & 0xF8));
 296:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 29a:	88 7f       	andi	r24, 0xF8	; 248
 29c:	1f 92       	push	r1
 29e:	8f 93       	push	r24
 2a0:	84 e6       	ldi	r24, 0x64	; 100
 2a2:	91 e0       	ldi	r25, 0x01	; 1
 2a4:	9f 93       	push	r25
 2a6:	8f 93       	push	r24
 2a8:	ce 01       	movw	r24, r28
 2aa:	01 96       	adiw	r24, 0x01	; 1
 2ac:	5c 01       	movw	r10, r24
 2ae:	9f 93       	push	r25
 2b0:	8f 93       	push	r24
 2b2:	0e 94 a0 03 	call	0x740	; 0x740 <sprintf>
		lcd_clear_screen();
 2b6:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		lcd_set_line(1);
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		lcd_send_string(string_buf);
 2c0:	c5 01       	movw	r24, r10
 2c2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 2c6:	0f 90       	pop	r0
 2c8:	0f 90       	pop	r0
 2ca:	0f 90       	pop	r0
 2cc:	0f 90       	pop	r0
 2ce:	0f 90       	pop	r0
 2d0:	0f 90       	pop	r0
	}
	TWDR = addr+0x01;
 2d2:	1f 5f       	subi	r17, 0xFF	; 255
 2d4:	10 93 bb 00 	sts	0x00BB, r17	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
	TWCR = (1<<TWINT | 1<<TWSTA | 1<<TWEN);
 2d8:	84 ea       	ldi	r24, 0xA4	; 164
 2da:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 2de:	ec eb       	ldi	r30, 0xBC	; 188
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	88 23       	and	r24, r24
 2e6:	ec f7       	brge	.-6      	; 0x2e2 <i2c_read+0x1ec>

	if ((TWSR & 0xF8) == MR_REP_START)
 2e8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 2ec:	88 7f       	andi	r24, 0xF8	; 248
 2ee:	80 31       	cpi	r24, 0x10	; 16
 2f0:	51 f4       	brne	.+20     	; 0x306 <i2c_read+0x210>
	{
		lcd_clear_screen();
 2f2:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		lcd_set_line(1);
 2f6:	81 e0       	ldi	r24, 0x01	; 1
 2f8:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		lcd_send_string("MR_REP_START sent!");
 2fc:	8f e6       	ldi	r24, 0x6F	; 111
 2fe:	91 e0       	ldi	r25, 0x01	; 1
 300:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 304:	1e c0       	rjmp	.+60     	; 0x342 <i2c_read+0x24c>
		//USART_putstring("High Byte Received NACK Sent!");
		//USART_send('\n');
	}
	else
	{
		sprintf(string_buf,"ERR4: 0x%x",(TWSR & 0xF8));
 306:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 30a:	88 7f       	andi	r24, 0xF8	; 248
 30c:	1f 92       	push	r1
 30e:	8f 93       	push	r24
 310:	82 e8       	ldi	r24, 0x82	; 130
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	9f 93       	push	r25
 316:	8f 93       	push	r24
 318:	8e 01       	movw	r16, r28
 31a:	0f 5f       	subi	r16, 0xFF	; 255
 31c:	1f 4f       	sbci	r17, 0xFF	; 255
 31e:	1f 93       	push	r17
 320:	0f 93       	push	r16
 322:	0e 94 a0 03 	call	0x740	; 0x740 <sprintf>
		lcd_clear_screen();
 326:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		lcd_set_line(1);
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		lcd_send_string(string_buf);
 330:	c8 01       	movw	r24, r16
 332:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 336:	0f 90       	pop	r0
 338:	0f 90       	pop	r0
 33a:	0f 90       	pop	r0
 33c:	0f 90       	pop	r0
 33e:	0f 90       	pop	r0
 340:	0f 90       	pop	r0
	}
	
	TWCR = (1<<TWINT | 1<<TWEN);
 342:	84 e8       	ldi	r24, 0x84	; 132
 344:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	
	while(!(TWCR & (1<<TWINT)));
 348:	ec eb       	ldi	r30, 0xBC	; 188
 34a:	f0 e0       	ldi	r31, 0x00	; 0
 34c:	80 81       	ld	r24, Z
 34e:	88 23       	and	r24, r24
 350:	ec f7       	brge	.-6      	; 0x34c <i2c_read+0x256>
	if ((TWSR & 0xF8) == MR_SLA_R_ACK)
 352:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 356:	88 7f       	andi	r24, 0xF8	; 248
 358:	80 34       	cpi	r24, 0x40	; 64
 35a:	69 f5       	brne	.+90     	; 0x3b6 <i2c_read+0x2c0>
	{
		databuf = (TWDR << 8);
 35c:	c0 90 bb 00 	lds	r12, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 360:	d1 2c       	mov	r13, r1
 362:	dc 2c       	mov	r13, r12
 364:	cc 24       	eor	r12, r12
 366:	0d 2c       	mov	r0, r13
 368:	00 0c       	add	r0, r0
 36a:	ee 08       	sbc	r14, r14
 36c:	ff 08       	sbc	r15, r15
		lcd_clear_screen();
 36e:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		lcd_set_line(1);
 372:	81 e0       	ldi	r24, 0x01	; 1
 374:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		lcd_send_string("MR_DATA_ACK sent!");
 378:	82 e5       	ldi	r24, 0x52	; 82
 37a:	91 e0       	ldi	r25, 0x01	; 1
 37c:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
		lcd_set_line(2);
 380:	82 e0       	ldi	r24, 0x02	; 2
 382:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		sprintf(string_buf,"val: 0x%02x",databuf);
 386:	ff 92       	push	r15
 388:	ef 92       	push	r14
 38a:	df 92       	push	r13
 38c:	cf 92       	push	r12
 38e:	8d e8       	ldi	r24, 0x8D	; 141
 390:	91 e0       	ldi	r25, 0x01	; 1
 392:	9f 93       	push	r25
 394:	8f 93       	push	r24
 396:	8e 01       	movw	r16, r28
 398:	0f 5f       	subi	r16, 0xFF	; 255
 39a:	1f 4f       	sbci	r17, 0xFF	; 255
 39c:	1f 93       	push	r17
 39e:	0f 93       	push	r16
 3a0:	0e 94 a0 03 	call	0x740	; 0x740 <sprintf>
		lcd_send_string(string_buf);
 3a4:	c8 01       	movw	r24, r16
 3a6:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	f8 94       	cli
 3ae:	de bf       	out	0x3e, r29	; 62
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	cd bf       	out	0x3d, r28	; 61
 3b4:	1e c0       	rjmp	.+60     	; 0x3f2 <i2c_read+0x2fc>
	}
	else
	{
		sprintf(string_buf,"ERR5: 0x%x",(TWSR & 0xF8));
 3b6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
 3ba:	88 7f       	andi	r24, 0xF8	; 248
 3bc:	1f 92       	push	r1
 3be:	8f 93       	push	r24
 3c0:	89 e9       	ldi	r24, 0x99	; 153
 3c2:	91 e0       	ldi	r25, 0x01	; 1
 3c4:	9f 93       	push	r25
 3c6:	8f 93       	push	r24
 3c8:	8e 01       	movw	r16, r28
 3ca:	0f 5f       	subi	r16, 0xFF	; 255
 3cc:	1f 4f       	sbci	r17, 0xFF	; 255
 3ce:	1f 93       	push	r17
 3d0:	0f 93       	push	r16
 3d2:	0e 94 a0 03 	call	0x740	; 0x740 <sprintf>
		lcd_clear_screen();
 3d6:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		lcd_set_line(1);
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		lcd_send_string(string_buf);
 3e0:	c8 01       	movw	r24, r16
 3e2:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 3e6:	0f 90       	pop	r0
 3e8:	0f 90       	pop	r0
 3ea:	0f 90       	pop	r0
 3ec:	0f 90       	pop	r0
 3ee:	0f 90       	pop	r0
 3f0:	0f 90       	pop	r0
	//itoa(databuf,buffer,10);
	//USART_putstring(buffer);
	//USART_send('\n');
	//databuf = TWDR;
	//databuf = (databuf << 8) && 0xFF00;
	TWCR = (1<<TWINT | 1<<TWEN);
 3f2:	84 e8       	ldi	r24, 0x84	; 132
 3f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
	while(!(TWCR & (1<<TWINT)));
 3f8:	ec eb       	ldi	r30, 0xBC	; 188
 3fa:	f0 e0       	ldi	r31, 0x00	; 0
 3fc:	80 81       	ld	r24, Z
 3fe:	88 23       	and	r24, r24
 400:	ec f7       	brge	.-6      	; 0x3fc <i2c_read+0x306>

	if ((TWSR & 0xf8) == 0x58)
 402:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
	{
		//USART_putstring("Low Byte Received NACK Sent!");
		//USART_send('\n');
	}
	LowByte = TWDR;
 406:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <LowByte+0x1>
 410:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <LowByte>
	databuf |= LowByte;// && 0xFF;
 414:	60 91 02 02 	lds	r22, 0x0202	; 0x800202 <LowByte>
 418:	70 91 03 02 	lds	r23, 0x0203	; 0x800203 <LowByte+0x1>
	//dtostrf(LowByte,10,5,buffer);
	//itoa(LowByte,buffer,10);
	//USART_putstring(buffer);
	//USART_send('\n');
	TWCR = (1 << TWINT ) | (1 << TWEN ) | (1 << TWSTO );
 41c:	84 e9       	ldi	r24, 0x94	; 148
 41e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
		//USART_putstring("NOT BAD!!");
		//USART_send('\n');
		//itoa(databuf,buffer,10);
		//USART_putstring(buffer);
	}
	return databuf;
 422:	cb 01       	movw	r24, r22
 424:	77 0f       	add	r23, r23
 426:	aa 0b       	sbc	r26, r26
 428:	bb 0b       	sbc	r27, r27
 42a:	bc 01       	movw	r22, r24
 42c:	cd 01       	movw	r24, r26
 42e:	6c 29       	or	r22, r12
 430:	7d 29       	or	r23, r13
 432:	8e 29       	or	r24, r14
 434:	9f 29       	or	r25, r15
 436:	a0 96       	adiw	r28, 0x20	; 32
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	f8 94       	cli
 43c:	de bf       	out	0x3e, r29	; 62
 43e:	0f be       	out	0x3f, r0	; 63
 440:	cd bf       	out	0x3d, r28	; 61
 442:	df 91       	pop	r29
 444:	cf 91       	pop	r28
 446:	1f 91       	pop	r17
 448:	0f 91       	pop	r16
 44a:	ff 90       	pop	r15
 44c:	ef 90       	pop	r14
 44e:	df 90       	pop	r13
 450:	cf 90       	pop	r12
 452:	bf 90       	pop	r11
 454:	af 90       	pop	r10
 456:	08 95       	ret

00000458 <lcd_pin_init>:
{
	while(*str != '\0')
	{
		lcd_write_data((unsigned char)*str++);
	}
}
 458:	53 9a       	sbi	0x0a, 3	; 10
 45a:	8a b1       	in	r24, 0x0a	; 10
 45c:	80 6f       	ori	r24, 0xF0	; 240
 45e:	8a b9       	out	0x0a, r24	; 10
 460:	8a b1       	in	r24, 0x0a	; 10
 462:	86 60       	ori	r24, 0x06	; 6
 464:	8a b9       	out	0x0a, r24	; 10
 466:	08 95       	ret

00000468 <lcd_e_toggle>:
 468:	59 9a       	sbi	0x0b, 1	; 11
 46a:	83 ef       	ldi	r24, 0xF3	; 243
 46c:	91 e0       	ldi	r25, 0x01	; 1
 46e:	01 97       	sbiw	r24, 0x01	; 1
 470:	f1 f7       	brne	.-4      	; 0x46e <lcd_e_toggle+0x6>
 472:	00 c0       	rjmp	.+0      	; 0x474 <lcd_e_toggle+0xc>
 474:	00 00       	nop
 476:	59 98       	cbi	0x0b, 1	; 11
 478:	08 95       	ret

0000047a <lcd_rs_high>:
 47a:	5b 9a       	sbi	0x0b, 3	; 11
 47c:	08 95       	ret

0000047e <lcd_rs_low>:
 47e:	5b 98       	cbi	0x0b, 3	; 11
 480:	08 95       	ret

00000482 <lcd_rw_low>:
 482:	5a 98       	cbi	0x0b, 2	; 11
 484:	08 95       	ret

00000486 <lcd_send_byte>:
 486:	cf 93       	push	r28
 488:	c8 2f       	mov	r28, r24
 48a:	66 23       	and	r22, r22
 48c:	19 f0       	breq	.+6      	; 0x494 <lcd_send_byte+0xe>
 48e:	0e 94 3d 02 	call	0x47a	; 0x47a <lcd_rs_high>
 492:	02 c0       	rjmp	.+4      	; 0x498 <lcd_send_byte+0x12>
 494:	0e 94 3f 02 	call	0x47e	; 0x47e <lcd_rs_low>
 498:	0e 94 41 02 	call	0x482	; 0x482 <lcd_rw_low>
 49c:	5c 98       	cbi	0x0b, 4	; 11
 49e:	5f 98       	cbi	0x0b, 7	; 11
 4a0:	5e 98       	cbi	0x0b, 6	; 11
 4a2:	5d 98       	cbi	0x0b, 5	; 11
 4a4:	c4 fd       	sbrc	r28, 4
 4a6:	5c 9a       	sbi	0x0b, 4	; 11
 4a8:	c5 fd       	sbrc	r28, 5
 4aa:	5f 9a       	sbi	0x0b, 7	; 11
 4ac:	c6 fd       	sbrc	r28, 6
 4ae:	5e 9a       	sbi	0x0b, 6	; 11
 4b0:	cc 23       	and	r28, r28
 4b2:	0c f4       	brge	.+2      	; 0x4b6 <lcd_send_byte+0x30>
 4b4:	5d 9a       	sbi	0x0b, 5	; 11
 4b6:	0e 94 34 02 	call	0x468	; 0x468 <lcd_e_toggle>
 4ba:	5c 98       	cbi	0x0b, 4	; 11
 4bc:	5f 98       	cbi	0x0b, 7	; 11
 4be:	5e 98       	cbi	0x0b, 6	; 11
 4c0:	5d 98       	cbi	0x0b, 5	; 11
 4c2:	c0 fd       	sbrc	r28, 0
 4c4:	5c 9a       	sbi	0x0b, 4	; 11
 4c6:	c1 fd       	sbrc	r28, 1
 4c8:	5f 9a       	sbi	0x0b, 7	; 11
 4ca:	c2 fd       	sbrc	r28, 2
 4cc:	5e 9a       	sbi	0x0b, 6	; 11
 4ce:	c3 fd       	sbrc	r28, 3
 4d0:	5d 9a       	sbi	0x0b, 5	; 11
 4d2:	0e 94 34 02 	call	0x468	; 0x468 <lcd_e_toggle>
 4d6:	cf 91       	pop	r28
 4d8:	08 95       	ret

000004da <lcd_write_cmd>:
 4da:	60 e0       	ldi	r22, 0x00	; 0
 4dc:	0e 94 43 02 	call	0x486	; 0x486 <lcd_send_byte>
 4e0:	08 95       	ret

000004e2 <lcd_write_data>:
 4e2:	61 e0       	ldi	r22, 0x01	; 1
 4e4:	0e 94 43 02 	call	0x486	; 0x486 <lcd_send_byte>
 4e8:	08 95       	ret

000004ea <lcd_2004_init>:
 4ea:	83 ed       	ldi	r24, 0xD3	; 211
 4ec:	90 e3       	ldi	r25, 0x30	; 48
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <lcd_2004_init+0x4>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <lcd_2004_init+0xa>
 4f4:	00 00       	nop
 4f6:	80 e3       	ldi	r24, 0x30	; 48
 4f8:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 4fc:	90 e1       	ldi	r25, 0x10	; 16
 4fe:	9a 95       	dec	r25
 500:	f1 f7       	brne	.-4      	; 0x4fe <lcd_2004_init+0x14>
 502:	00 c0       	rjmp	.+0      	; 0x504 <lcd_2004_init+0x1a>
 504:	80 e2       	ldi	r24, 0x20	; 32
 506:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 50a:	80 ec       	ldi	r24, 0xC0	; 192
 50c:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 510:	80 e1       	ldi	r24, 0x10	; 16
 512:	8a 95       	dec	r24
 514:	f1 f7       	brne	.-4      	; 0x512 <lcd_2004_init+0x28>
 516:	00 c0       	rjmp	.+0      	; 0x518 <lcd_2004_init+0x2e>
 518:	80 e2       	ldi	r24, 0x20	; 32
 51a:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 51e:	80 ec       	ldi	r24, 0xC0	; 192
 520:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 524:	90 e1       	ldi	r25, 0x10	; 16
 526:	9a 95       	dec	r25
 528:	f1 f7       	brne	.-4      	; 0x526 <lcd_2004_init+0x3c>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <lcd_2004_init+0x42>
 52c:	80 e0       	ldi	r24, 0x00	; 0
 52e:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 532:	80 ef       	ldi	r24, 0xF0	; 240
 534:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 538:	80 e1       	ldi	r24, 0x10	; 16
 53a:	8a 95       	dec	r24
 53c:	f1 f7       	brne	.-4      	; 0x53a <lcd_2004_init+0x50>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <lcd_2004_init+0x56>
 540:	80 e0       	ldi	r24, 0x00	; 0
 542:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 546:	80 e1       	ldi	r24, 0x10	; 16
 548:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 54c:	90 e1       	ldi	r25, 0x10	; 16
 54e:	9a 95       	dec	r25
 550:	f1 f7       	brne	.-4      	; 0x54e <lcd_2004_init+0x64>
 552:	00 c0       	rjmp	.+0      	; 0x554 <lcd_2004_init+0x6a>
 554:	80 e0       	ldi	r24, 0x00	; 0
 556:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 55a:	80 ef       	ldi	r24, 0xF0	; 240
 55c:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 560:	80 e1       	ldi	r24, 0x10	; 16
 562:	8a 95       	dec	r24
 564:	f1 f7       	brne	.-4      	; 0x562 <lcd_2004_init+0x78>
 566:	00 c0       	rjmp	.+0      	; 0x568 <lcd_2004_init+0x7e>
 568:	80 e0       	ldi	r24, 0x00	; 0
 56a:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 56e:	80 ee       	ldi	r24, 0xE0	; 224
 570:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 574:	08 95       	ret

00000576 <lcd_set_line>:
 576:	81 30       	cpi	r24, 0x01	; 1
 578:	19 f0       	breq	.+6      	; 0x580 <lcd_set_line+0xa>
 57a:	82 30       	cpi	r24, 0x02	; 2
 57c:	29 f0       	breq	.+10     	; 0x588 <lcd_set_line+0x12>
 57e:	08 95       	ret
 580:	80 e8       	ldi	r24, 0x80	; 128
 582:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 586:	08 95       	ret
 588:	80 ec       	ldi	r24, 0xC0	; 192
 58a:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 58e:	08 95       	ret

00000590 <lcd_clear_screen>:
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	0e 94 6d 02 	call	0x4da	; 0x4da <lcd_write_cmd>
 596:	83 ec       	ldi	r24, 0xC3	; 195
 598:	99 e0       	ldi	r25, 0x09	; 9
 59a:	01 97       	sbiw	r24, 0x01	; 1
 59c:	f1 f7       	brne	.-4      	; 0x59a <lcd_clear_screen+0xa>
 59e:	00 c0       	rjmp	.+0      	; 0x5a0 <lcd_clear_screen+0x10>
 5a0:	00 00       	nop
 5a2:	08 95       	ret

000005a4 <lcd_send_string>:
void lcd_send_string(char* string)
{
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	ec 01       	movw	r28, r24
	while(*string)
 5aa:	88 81       	ld	r24, Y
 5ac:	88 23       	and	r24, r24
 5ae:	31 f0       	breq	.+12     	; 0x5bc <lcd_send_string+0x18>
 5b0:	21 96       	adiw	r28, 0x01	; 1
	{
		//Send value of pointer as data to LCD
		lcd_write_data(*string);
 5b2:	0e 94 71 02 	call	0x4e2	; 0x4e2 <lcd_write_data>
		lcd_write_data((unsigned char)*str++);
	}
}
void lcd_send_string(char* string)
{
	while(*string)
 5b6:	89 91       	ld	r24, Y+
 5b8:	81 11       	cpse	r24, r1
 5ba:	fb cf       	rjmp	.-10     	; 0x5b2 <lcd_send_string+0xe>
		//Send value of pointer as data to LCD
		lcd_write_data(*string);
		//Increment string pointer
		string++;
	}
 5bc:	df 91       	pop	r29
 5be:	cf 91       	pop	r28
 5c0:	08 95       	ret

000005c2 <main>:
	//int dutycycle = 0x3FFF;
	unsigned int dutycycle = 300;
	static char buffer[64];
	uint8_t val = 0x00;
	//buffer = "Hello world";
	sprintf(buffer,"hello world");
 5c2:	c2 ec       	ldi	r28, 0xC2	; 194
 5c4:	d1 e0       	ldi	r29, 0x01	; 1
 5c6:	8c e0       	ldi	r24, 0x0C	; 12
 5c8:	e4 ea       	ldi	r30, 0xA4	; 164
 5ca:	f1 e0       	ldi	r31, 0x01	; 1
 5cc:	de 01       	movw	r26, r28
 5ce:	01 90       	ld	r0, Z+
 5d0:	0d 92       	st	X+, r0
 5d2:	8a 95       	dec	r24
 5d4:	e1 f7       	brne	.-8      	; 0x5ce <main+0xc>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d6:	2f ef       	ldi	r18, 0xFF	; 255
 5d8:	84 e3       	ldi	r24, 0x34	; 52
 5da:	9c e0       	ldi	r25, 0x0C	; 12
 5dc:	21 50       	subi	r18, 0x01	; 1
 5de:	80 40       	sbci	r24, 0x00	; 0
 5e0:	90 40       	sbci	r25, 0x00	; 0
 5e2:	e1 f7       	brne	.-8      	; 0x5dc <main+0x1a>
 5e4:	00 c0       	rjmp	.+0      	; 0x5e6 <main+0x24>
 5e6:	00 00       	nop
	static unsigned char hello[] = "Hello WORLD";
	_delay_ms(500);
	lcd_pin_init();
 5e8:	0e 94 2c 02 	call	0x458	; 0x458 <lcd_pin_init>
	lcd_2004_init();
 5ec:	0e 94 75 02 	call	0x4ea	; 0x4ea <lcd_2004_init>
	lcd_clear_screen();
 5f0:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
	fan_init();
 5f4:	0e 94 53 00 	call	0xa6	; 0xa6 <fan_init>
	i2c_init();
 5f8:	0e 94 75 00 	call	0xea	; 0xea <i2c_init>
 5fc:	ef ef       	ldi	r30, 0xFF	; 255
 5fe:	f4 e3       	ldi	r31, 0x34	; 52
 600:	2c e0       	ldi	r18, 0x0C	; 12
 602:	e1 50       	subi	r30, 0x01	; 1
 604:	f0 40       	sbci	r31, 0x00	; 0
 606:	20 40       	sbci	r18, 0x00	; 0
 608:	e1 f7       	brne	.-8      	; 0x602 <main+0x40>
 60a:	00 c0       	rjmp	.+0      	; 0x60c <main+0x4a>
 60c:	00 00       	nop
	_delay_ms(500);
	val = i2c_read(MCP_ADDR_0,0x0001);
 60e:	61 e0       	ldi	r22, 0x01	; 1
 610:	70 e0       	ldi	r23, 0x00	; 0
 612:	80 ec       	ldi	r24, 0xC0	; 192
 614:	0e 94 7b 00 	call	0xf6	; 0xf6 <i2c_read>
 618:	8f ef       	ldi	r24, 0xFF	; 255
 61a:	91 e1       	ldi	r25, 0x11	; 17
 61c:	ea e7       	ldi	r30, 0x7A	; 122
 61e:	81 50       	subi	r24, 0x01	; 1
 620:	90 40       	sbci	r25, 0x00	; 0
 622:	e0 40       	sbci	r30, 0x00	; 0
 624:	e1 f7       	brne	.-8      	; 0x61e <main+0x5c>
 626:	00 c0       	rjmp	.+0      	; 0x628 <main+0x66>
 628:	00 00       	nop
	_delay_ms(5000);
	val = i2c_read(ADS_ADDR_0,0x0000);
 62a:	60 e0       	ldi	r22, 0x00	; 0
 62c:	70 e0       	ldi	r23, 0x00	; 0
 62e:	80 e9       	ldi	r24, 0x90	; 144
 630:	0e 94 7b 00 	call	0xf6	; 0xf6 <i2c_read>
 634:	ff ef       	ldi	r31, 0xFF	; 255
 636:	21 e1       	ldi	r18, 0x11	; 17
 638:	8a e7       	ldi	r24, 0x7A	; 122
 63a:	f1 50       	subi	r31, 0x01	; 1
 63c:	20 40       	sbci	r18, 0x00	; 0
 63e:	80 40       	sbci	r24, 0x00	; 0
 640:	e1 f7       	brne	.-8      	; 0x63a <main+0x78>
 642:	00 c0       	rjmp	.+0      	; 0x644 <main+0x82>
 644:	00 00       	nop
	_delay_ms(5000);
	val = i2c_read(ADS_ADDR_1,0x0000);
 646:	60 e0       	ldi	r22, 0x00	; 0
 648:	70 e0       	ldi	r23, 0x00	; 0
 64a:	82 e9       	ldi	r24, 0x92	; 146
 64c:	0e 94 7b 00 	call	0xf6	; 0xf6 <i2c_read>
 650:	16 2f       	mov	r17, r22
	lcd_set_line(2);
 652:	82 e0       	ldi	r24, 0x02	; 2
 654:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
	sprintf(buffer,"val: %d",val);
 658:	1f 92       	push	r1
 65a:	1f 93       	push	r17
 65c:	80 eb       	ldi	r24, 0xB0	; 176
 65e:	91 e0       	ldi	r25, 0x01	; 1
 660:	9f 93       	push	r25
 662:	8f 93       	push	r24
 664:	df 93       	push	r29
 666:	cf 93       	push	r28
 668:	0e 94 a0 03 	call	0x740	; 0x740 <sprintf>
	lcd_send_string(buffer);
 66c:	ce 01       	movw	r24, r28
 66e:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
	PORTB |= (1<<RELAY_PORT);
 672:	2a 9a       	sbi	0x05, 2	; 5
 674:	ff ef       	ldi	r31, 0xFF	; 255
 676:	24 e3       	ldi	r18, 0x34	; 52
 678:	8c e0       	ldi	r24, 0x0C	; 12
 67a:	f1 50       	subi	r31, 0x01	; 1
 67c:	20 40       	sbci	r18, 0x00	; 0
 67e:	80 40       	sbci	r24, 0x00	; 0
 680:	e1 f7       	brne	.-8      	; 0x67a <main+0xb8>
 682:	00 c0       	rjmp	.+0      	; 0x684 <main+0xc2>
 684:	00 00       	nop
	_delay_ms(500);
	PORTB &= ~(1<<RELAY_PORT);
 686:	2a 98       	cbi	0x05, 2	; 5
 688:	9f ef       	ldi	r25, 0xFF	; 255
 68a:	e0 e7       	ldi	r30, 0x70	; 112
 68c:	f2 e0       	ldi	r31, 0x02	; 2
 68e:	91 50       	subi	r25, 0x01	; 1
 690:	e0 40       	sbci	r30, 0x00	; 0
 692:	f0 40       	sbci	r31, 0x00	; 0
 694:	e1 f7       	brne	.-8      	; 0x68e <main+0xcc>
 696:	00 c0       	rjmp	.+0      	; 0x698 <main+0xd6>
 698:	00 00       	nop
	_delay_ms(100);
	PORTB |= (1<<RELAY_PORT);
 69a:	2a 9a       	sbi	0x05, 2	; 5
 69c:	2f ef       	ldi	r18, 0xFF	; 255
 69e:	80 e7       	ldi	r24, 0x70	; 112
 6a0:	92 e0       	ldi	r25, 0x02	; 2
 6a2:	21 50       	subi	r18, 0x01	; 1
 6a4:	80 40       	sbci	r24, 0x00	; 0
 6a6:	90 40       	sbci	r25, 0x00	; 0
 6a8:	e1 f7       	brne	.-8      	; 0x6a2 <main+0xe0>
 6aa:	00 c0       	rjmp	.+0      	; 0x6ac <main+0xea>
 6ac:	00 00       	nop
	_delay_ms(100);
	PORTB &= ~(1<<RELAY_PORT);
 6ae:	2a 98       	cbi	0x05, 2	; 5
 6b0:	ef ef       	ldi	r30, 0xFF	; 255
 6b2:	f9 e6       	ldi	r31, 0x69	; 105
 6b4:	28 e1       	ldi	r18, 0x18	; 24
 6b6:	e1 50       	subi	r30, 0x01	; 1
 6b8:	f0 40       	sbci	r31, 0x00	; 0
 6ba:	20 40       	sbci	r18, 0x00	; 0
 6bc:	e1 f7       	brne	.-8      	; 0x6b6 <main+0xf4>
 6be:	00 c0       	rjmp	.+0      	; 0x6c0 <main+0xfe>
 6c0:	00 00       	nop
		//_delay_ms(10);
		lcd_send_string("b");
		lcd_send_string("o");
		lcd_send_string("p");*/
		_delay_ms(1000);
		PORTB &= ~(1<<RELAY_PORT);
 6c2:	2a 98       	cbi	0x05, 2	; 5
 6c4:	0f 90       	pop	r0
 6c6:	0f 90       	pop	r0
 6c8:	0f 90       	pop	r0
 6ca:	0f 90       	pop	r0
 6cc:	0f 90       	pop	r0
 6ce:	0f 90       	pop	r0
		//dutycycle += 0x00FF;
		dutycycle -= 10;
 6d0:	c2 e2       	ldi	r28, 0x22	; 34
 6d2:	d1 e0       	ldi	r29, 0x01	; 1
		if (dutycycle <= 0)
		{
			dutycycle = 320;
		}
		OCR1A = dutycycle;
 6d4:	0f 2e       	mov	r0, r31
 6d6:	f8 e8       	ldi	r31, 0x88	; 136
 6d8:	cf 2e       	mov	r12, r31
 6da:	d1 2c       	mov	r13, r1
 6dc:	f0 2d       	mov	r31, r0
		
		sprintf(buffer,"hello %d",dutycycle);
 6de:	0f 2e       	mov	r0, r31
 6e0:	f8 eb       	ldi	r31, 0xB8	; 184
 6e2:	ef 2e       	mov	r14, r31
 6e4:	f1 e0       	ldi	r31, 0x01	; 1
 6e6:	ff 2e       	mov	r15, r31
 6e8:	f0 2d       	mov	r31, r0
 6ea:	02 ec       	ldi	r16, 0xC2	; 194
 6ec:	11 e0       	ldi	r17, 0x01	; 1
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <main+0x132>
		PORTB &= ~(1<<RELAY_PORT);
		//dutycycle += 0x00FF;
		dutycycle -= 10;
		if (dutycycle <= 0)
		{
			dutycycle = 320;
 6f0:	c0 e4       	ldi	r28, 0x40	; 64
 6f2:	d1 e0       	ldi	r29, 0x01	; 1
		}
		OCR1A = dutycycle;
 6f4:	f6 01       	movw	r30, r12
 6f6:	d1 83       	std	Z+1, r29	; 0x01
 6f8:	c0 83       	st	Z, r28
		
		sprintf(buffer,"hello %d",dutycycle);
 6fa:	df 93       	push	r29
 6fc:	cf 93       	push	r28
 6fe:	ff 92       	push	r15
 700:	ef 92       	push	r14
 702:	1f 93       	push	r17
 704:	0f 93       	push	r16
 706:	0e 94 a0 03 	call	0x740	; 0x740 <sprintf>
		lcd_clear_screen();
 70a:	0e 94 c8 02 	call	0x590	; 0x590 <lcd_clear_screen>
		//_delay_ms(10);
		lcd_set_line(1);
 70e:	81 e0       	ldi	r24, 0x01	; 1
 710:	0e 94 bb 02 	call	0x576	; 0x576 <lcd_set_line>
		//_delay_ms(10);
		lcd_send_string(buffer);
 714:	c8 01       	movw	r24, r16
 716:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <lcd_send_string>
 71a:	8f ef       	ldi	r24, 0xFF	; 255
 71c:	99 e6       	ldi	r25, 0x69	; 105
 71e:	e8 e1       	ldi	r30, 0x18	; 24
 720:	81 50       	subi	r24, 0x01	; 1
 722:	90 40       	sbci	r25, 0x00	; 0
 724:	e0 40       	sbci	r30, 0x00	; 0
 726:	e1 f7       	brne	.-8      	; 0x720 <main+0x15e>
 728:	00 c0       	rjmp	.+0      	; 0x72a <main+0x168>
 72a:	00 00       	nop
		//_delay_ms(10);
		lcd_send_string("b");
		lcd_send_string("o");
		lcd_send_string("p");*/
		_delay_ms(1000);
		PORTB &= ~(1<<RELAY_PORT);
 72c:	2a 98       	cbi	0x05, 2	; 5
		//dutycycle += 0x00FF;
		dutycycle -= 10;
 72e:	2a 97       	sbiw	r28, 0x0a	; 10
		if (dutycycle <= 0)
 730:	0f 90       	pop	r0
 732:	0f 90       	pop	r0
 734:	0f 90       	pop	r0
 736:	0f 90       	pop	r0
 738:	0f 90       	pop	r0
 73a:	0f 90       	pop	r0
 73c:	c9 f2       	breq	.-78     	; 0x6f0 <main+0x12e>
 73e:	da cf       	rjmp	.-76     	; 0x6f4 <main+0x132>

00000740 <sprintf>:
 740:	ae e0       	ldi	r26, 0x0E	; 14
 742:	b0 e0       	ldi	r27, 0x00	; 0
 744:	e6 ea       	ldi	r30, 0xA6	; 166
 746:	f3 e0       	ldi	r31, 0x03	; 3
 748:	0c 94 61 06 	jmp	0xcc2	; 0xcc2 <__prologue_saves__+0x1c>
 74c:	0d 89       	ldd	r16, Y+21	; 0x15
 74e:	1e 89       	ldd	r17, Y+22	; 0x16
 750:	86 e0       	ldi	r24, 0x06	; 6
 752:	8c 83       	std	Y+4, r24	; 0x04
 754:	1a 83       	std	Y+2, r17	; 0x02
 756:	09 83       	std	Y+1, r16	; 0x01
 758:	8f ef       	ldi	r24, 0xFF	; 255
 75a:	9f e7       	ldi	r25, 0x7F	; 127
 75c:	9e 83       	std	Y+6, r25	; 0x06
 75e:	8d 83       	std	Y+5, r24	; 0x05
 760:	ae 01       	movw	r20, r28
 762:	47 5e       	subi	r20, 0xE7	; 231
 764:	5f 4f       	sbci	r21, 0xFF	; 255
 766:	6f 89       	ldd	r22, Y+23	; 0x17
 768:	78 8d       	ldd	r23, Y+24	; 0x18
 76a:	ce 01       	movw	r24, r28
 76c:	01 96       	adiw	r24, 0x01	; 1
 76e:	0e 94 c2 03 	call	0x784	; 0x784 <vfprintf>
 772:	ef 81       	ldd	r30, Y+7	; 0x07
 774:	f8 85       	ldd	r31, Y+8	; 0x08
 776:	e0 0f       	add	r30, r16
 778:	f1 1f       	adc	r31, r17
 77a:	10 82       	st	Z, r1
 77c:	2e 96       	adiw	r28, 0x0e	; 14
 77e:	e4 e0       	ldi	r30, 0x04	; 4
 780:	0c 94 7d 06 	jmp	0xcfa	; 0xcfa <__epilogue_restores__+0x1c>

00000784 <vfprintf>:
 784:	ab e0       	ldi	r26, 0x0B	; 11
 786:	b0 e0       	ldi	r27, 0x00	; 0
 788:	e8 ec       	ldi	r30, 0xC8	; 200
 78a:	f3 e0       	ldi	r31, 0x03	; 3
 78c:	0c 94 53 06 	jmp	0xca6	; 0xca6 <__prologue_saves__>
 790:	6c 01       	movw	r12, r24
 792:	7b 01       	movw	r14, r22
 794:	8a 01       	movw	r16, r20
 796:	fc 01       	movw	r30, r24
 798:	17 82       	std	Z+7, r1	; 0x07
 79a:	16 82       	std	Z+6, r1	; 0x06
 79c:	83 81       	ldd	r24, Z+3	; 0x03
 79e:	81 ff       	sbrs	r24, 1
 7a0:	cc c1       	rjmp	.+920    	; 0xb3a <__stack+0x23b>
 7a2:	ce 01       	movw	r24, r28
 7a4:	01 96       	adiw	r24, 0x01	; 1
 7a6:	3c 01       	movw	r6, r24
 7a8:	f6 01       	movw	r30, r12
 7aa:	93 81       	ldd	r25, Z+3	; 0x03
 7ac:	f7 01       	movw	r30, r14
 7ae:	93 fd       	sbrc	r25, 3
 7b0:	85 91       	lpm	r24, Z+
 7b2:	93 ff       	sbrs	r25, 3
 7b4:	81 91       	ld	r24, Z+
 7b6:	7f 01       	movw	r14, r30
 7b8:	88 23       	and	r24, r24
 7ba:	09 f4       	brne	.+2      	; 0x7be <vfprintf+0x3a>
 7bc:	ba c1       	rjmp	.+884    	; 0xb32 <__stack+0x233>
 7be:	85 32       	cpi	r24, 0x25	; 37
 7c0:	39 f4       	brne	.+14     	; 0x7d0 <vfprintf+0x4c>
 7c2:	93 fd       	sbrc	r25, 3
 7c4:	85 91       	lpm	r24, Z+
 7c6:	93 ff       	sbrs	r25, 3
 7c8:	81 91       	ld	r24, Z+
 7ca:	7f 01       	movw	r14, r30
 7cc:	85 32       	cpi	r24, 0x25	; 37
 7ce:	29 f4       	brne	.+10     	; 0x7da <vfprintf+0x56>
 7d0:	b6 01       	movw	r22, r12
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	0e 94 b9 05 	call	0xb72	; 0xb72 <fputc>
 7d8:	e7 cf       	rjmp	.-50     	; 0x7a8 <vfprintf+0x24>
 7da:	91 2c       	mov	r9, r1
 7dc:	21 2c       	mov	r2, r1
 7de:	31 2c       	mov	r3, r1
 7e0:	ff e1       	ldi	r31, 0x1F	; 31
 7e2:	f3 15       	cp	r31, r3
 7e4:	d8 f0       	brcs	.+54     	; 0x81c <vfprintf+0x98>
 7e6:	8b 32       	cpi	r24, 0x2B	; 43
 7e8:	79 f0       	breq	.+30     	; 0x808 <vfprintf+0x84>
 7ea:	38 f4       	brcc	.+14     	; 0x7fa <vfprintf+0x76>
 7ec:	80 32       	cpi	r24, 0x20	; 32
 7ee:	79 f0       	breq	.+30     	; 0x80e <vfprintf+0x8a>
 7f0:	83 32       	cpi	r24, 0x23	; 35
 7f2:	a1 f4       	brne	.+40     	; 0x81c <vfprintf+0x98>
 7f4:	23 2d       	mov	r18, r3
 7f6:	20 61       	ori	r18, 0x10	; 16
 7f8:	1d c0       	rjmp	.+58     	; 0x834 <vfprintf+0xb0>
 7fa:	8d 32       	cpi	r24, 0x2D	; 45
 7fc:	61 f0       	breq	.+24     	; 0x816 <vfprintf+0x92>
 7fe:	80 33       	cpi	r24, 0x30	; 48
 800:	69 f4       	brne	.+26     	; 0x81c <vfprintf+0x98>
 802:	23 2d       	mov	r18, r3
 804:	21 60       	ori	r18, 0x01	; 1
 806:	16 c0       	rjmp	.+44     	; 0x834 <vfprintf+0xb0>
 808:	83 2d       	mov	r24, r3
 80a:	82 60       	ori	r24, 0x02	; 2
 80c:	38 2e       	mov	r3, r24
 80e:	e3 2d       	mov	r30, r3
 810:	e4 60       	ori	r30, 0x04	; 4
 812:	3e 2e       	mov	r3, r30
 814:	2a c0       	rjmp	.+84     	; 0x86a <vfprintf+0xe6>
 816:	f3 2d       	mov	r31, r3
 818:	f8 60       	ori	r31, 0x08	; 8
 81a:	1d c0       	rjmp	.+58     	; 0x856 <vfprintf+0xd2>
 81c:	37 fc       	sbrc	r3, 7
 81e:	2d c0       	rjmp	.+90     	; 0x87a <vfprintf+0xf6>
 820:	20 ed       	ldi	r18, 0xD0	; 208
 822:	28 0f       	add	r18, r24
 824:	2a 30       	cpi	r18, 0x0A	; 10
 826:	40 f0       	brcs	.+16     	; 0x838 <vfprintf+0xb4>
 828:	8e 32       	cpi	r24, 0x2E	; 46
 82a:	b9 f4       	brne	.+46     	; 0x85a <vfprintf+0xd6>
 82c:	36 fc       	sbrc	r3, 6
 82e:	81 c1       	rjmp	.+770    	; 0xb32 <__stack+0x233>
 830:	23 2d       	mov	r18, r3
 832:	20 64       	ori	r18, 0x40	; 64
 834:	32 2e       	mov	r3, r18
 836:	19 c0       	rjmp	.+50     	; 0x86a <vfprintf+0xe6>
 838:	36 fe       	sbrs	r3, 6
 83a:	06 c0       	rjmp	.+12     	; 0x848 <vfprintf+0xc4>
 83c:	8a e0       	ldi	r24, 0x0A	; 10
 83e:	98 9e       	mul	r9, r24
 840:	20 0d       	add	r18, r0
 842:	11 24       	eor	r1, r1
 844:	92 2e       	mov	r9, r18
 846:	11 c0       	rjmp	.+34     	; 0x86a <vfprintf+0xe6>
 848:	ea e0       	ldi	r30, 0x0A	; 10
 84a:	2e 9e       	mul	r2, r30
 84c:	20 0d       	add	r18, r0
 84e:	11 24       	eor	r1, r1
 850:	22 2e       	mov	r2, r18
 852:	f3 2d       	mov	r31, r3
 854:	f0 62       	ori	r31, 0x20	; 32
 856:	3f 2e       	mov	r3, r31
 858:	08 c0       	rjmp	.+16     	; 0x86a <vfprintf+0xe6>
 85a:	8c 36       	cpi	r24, 0x6C	; 108
 85c:	21 f4       	brne	.+8      	; 0x866 <vfprintf+0xe2>
 85e:	83 2d       	mov	r24, r3
 860:	80 68       	ori	r24, 0x80	; 128
 862:	38 2e       	mov	r3, r24
 864:	02 c0       	rjmp	.+4      	; 0x86a <vfprintf+0xe6>
 866:	88 36       	cpi	r24, 0x68	; 104
 868:	41 f4       	brne	.+16     	; 0x87a <vfprintf+0xf6>
 86a:	f7 01       	movw	r30, r14
 86c:	93 fd       	sbrc	r25, 3
 86e:	85 91       	lpm	r24, Z+
 870:	93 ff       	sbrs	r25, 3
 872:	81 91       	ld	r24, Z+
 874:	7f 01       	movw	r14, r30
 876:	81 11       	cpse	r24, r1
 878:	b3 cf       	rjmp	.-154    	; 0x7e0 <vfprintf+0x5c>
 87a:	98 2f       	mov	r25, r24
 87c:	9f 7d       	andi	r25, 0xDF	; 223
 87e:	95 54       	subi	r25, 0x45	; 69
 880:	93 30       	cpi	r25, 0x03	; 3
 882:	28 f4       	brcc	.+10     	; 0x88e <vfprintf+0x10a>
 884:	0c 5f       	subi	r16, 0xFC	; 252
 886:	1f 4f       	sbci	r17, 0xFF	; 255
 888:	9f e3       	ldi	r25, 0x3F	; 63
 88a:	99 83       	std	Y+1, r25	; 0x01
 88c:	0d c0       	rjmp	.+26     	; 0x8a8 <vfprintf+0x124>
 88e:	83 36       	cpi	r24, 0x63	; 99
 890:	31 f0       	breq	.+12     	; 0x89e <vfprintf+0x11a>
 892:	83 37       	cpi	r24, 0x73	; 115
 894:	71 f0       	breq	.+28     	; 0x8b2 <vfprintf+0x12e>
 896:	83 35       	cpi	r24, 0x53	; 83
 898:	09 f0       	breq	.+2      	; 0x89c <vfprintf+0x118>
 89a:	59 c0       	rjmp	.+178    	; 0x94e <__stack+0x4f>
 89c:	21 c0       	rjmp	.+66     	; 0x8e0 <vfprintf+0x15c>
 89e:	f8 01       	movw	r30, r16
 8a0:	80 81       	ld	r24, Z
 8a2:	89 83       	std	Y+1, r24	; 0x01
 8a4:	0e 5f       	subi	r16, 0xFE	; 254
 8a6:	1f 4f       	sbci	r17, 0xFF	; 255
 8a8:	88 24       	eor	r8, r8
 8aa:	83 94       	inc	r8
 8ac:	91 2c       	mov	r9, r1
 8ae:	53 01       	movw	r10, r6
 8b0:	13 c0       	rjmp	.+38     	; 0x8d8 <vfprintf+0x154>
 8b2:	28 01       	movw	r4, r16
 8b4:	f2 e0       	ldi	r31, 0x02	; 2
 8b6:	4f 0e       	add	r4, r31
 8b8:	51 1c       	adc	r5, r1
 8ba:	f8 01       	movw	r30, r16
 8bc:	a0 80       	ld	r10, Z
 8be:	b1 80       	ldd	r11, Z+1	; 0x01
 8c0:	36 fe       	sbrs	r3, 6
 8c2:	03 c0       	rjmp	.+6      	; 0x8ca <vfprintf+0x146>
 8c4:	69 2d       	mov	r22, r9
 8c6:	70 e0       	ldi	r23, 0x00	; 0
 8c8:	02 c0       	rjmp	.+4      	; 0x8ce <vfprintf+0x14a>
 8ca:	6f ef       	ldi	r22, 0xFF	; 255
 8cc:	7f ef       	ldi	r23, 0xFF	; 255
 8ce:	c5 01       	movw	r24, r10
 8d0:	0e 94 ae 05 	call	0xb5c	; 0xb5c <strnlen>
 8d4:	4c 01       	movw	r8, r24
 8d6:	82 01       	movw	r16, r4
 8d8:	f3 2d       	mov	r31, r3
 8da:	ff 77       	andi	r31, 0x7F	; 127
 8dc:	3f 2e       	mov	r3, r31
 8de:	16 c0       	rjmp	.+44     	; 0x90c <__stack+0xd>
 8e0:	28 01       	movw	r4, r16
 8e2:	22 e0       	ldi	r18, 0x02	; 2
 8e4:	42 0e       	add	r4, r18
 8e6:	51 1c       	adc	r5, r1
 8e8:	f8 01       	movw	r30, r16
 8ea:	a0 80       	ld	r10, Z
 8ec:	b1 80       	ldd	r11, Z+1	; 0x01
 8ee:	36 fe       	sbrs	r3, 6
 8f0:	03 c0       	rjmp	.+6      	; 0x8f8 <vfprintf+0x174>
 8f2:	69 2d       	mov	r22, r9
 8f4:	70 e0       	ldi	r23, 0x00	; 0
 8f6:	02 c0       	rjmp	.+4      	; 0x8fc <vfprintf+0x178>
 8f8:	6f ef       	ldi	r22, 0xFF	; 255
 8fa:	7f ef       	ldi	r23, 0xFF	; 255
 8fc:	c5 01       	movw	r24, r10
 8fe:	0e 94 a3 05 	call	0xb46	; 0xb46 <strnlen_P>
 902:	4c 01       	movw	r8, r24
 904:	f3 2d       	mov	r31, r3
 906:	f0 68       	ori	r31, 0x80	; 128
 908:	3f 2e       	mov	r3, r31
 90a:	82 01       	movw	r16, r4
 90c:	33 fc       	sbrc	r3, 3
 90e:	1b c0       	rjmp	.+54     	; 0x946 <__stack+0x47>
 910:	82 2d       	mov	r24, r2
 912:	90 e0       	ldi	r25, 0x00	; 0
 914:	88 16       	cp	r8, r24
 916:	99 06       	cpc	r9, r25
 918:	b0 f4       	brcc	.+44     	; 0x946 <__stack+0x47>
 91a:	b6 01       	movw	r22, r12
 91c:	80 e2       	ldi	r24, 0x20	; 32
 91e:	90 e0       	ldi	r25, 0x00	; 0
 920:	0e 94 b9 05 	call	0xb72	; 0xb72 <fputc>
 924:	2a 94       	dec	r2
 926:	f4 cf       	rjmp	.-24     	; 0x910 <__stack+0x11>
 928:	f5 01       	movw	r30, r10
 92a:	37 fc       	sbrc	r3, 7
 92c:	85 91       	lpm	r24, Z+
 92e:	37 fe       	sbrs	r3, 7
 930:	81 91       	ld	r24, Z+
 932:	5f 01       	movw	r10, r30
 934:	b6 01       	movw	r22, r12
 936:	90 e0       	ldi	r25, 0x00	; 0
 938:	0e 94 b9 05 	call	0xb72	; 0xb72 <fputc>
 93c:	21 10       	cpse	r2, r1
 93e:	2a 94       	dec	r2
 940:	21 e0       	ldi	r18, 0x01	; 1
 942:	82 1a       	sub	r8, r18
 944:	91 08       	sbc	r9, r1
 946:	81 14       	cp	r8, r1
 948:	91 04       	cpc	r9, r1
 94a:	71 f7       	brne	.-36     	; 0x928 <__stack+0x29>
 94c:	e8 c0       	rjmp	.+464    	; 0xb1e <__stack+0x21f>
 94e:	84 36       	cpi	r24, 0x64	; 100
 950:	11 f0       	breq	.+4      	; 0x956 <__stack+0x57>
 952:	89 36       	cpi	r24, 0x69	; 105
 954:	41 f5       	brne	.+80     	; 0x9a6 <__stack+0xa7>
 956:	f8 01       	movw	r30, r16
 958:	37 fe       	sbrs	r3, 7
 95a:	07 c0       	rjmp	.+14     	; 0x96a <__stack+0x6b>
 95c:	60 81       	ld	r22, Z
 95e:	71 81       	ldd	r23, Z+1	; 0x01
 960:	82 81       	ldd	r24, Z+2	; 0x02
 962:	93 81       	ldd	r25, Z+3	; 0x03
 964:	0c 5f       	subi	r16, 0xFC	; 252
 966:	1f 4f       	sbci	r17, 0xFF	; 255
 968:	08 c0       	rjmp	.+16     	; 0x97a <__stack+0x7b>
 96a:	60 81       	ld	r22, Z
 96c:	71 81       	ldd	r23, Z+1	; 0x01
 96e:	07 2e       	mov	r0, r23
 970:	00 0c       	add	r0, r0
 972:	88 0b       	sbc	r24, r24
 974:	99 0b       	sbc	r25, r25
 976:	0e 5f       	subi	r16, 0xFE	; 254
 978:	1f 4f       	sbci	r17, 0xFF	; 255
 97a:	f3 2d       	mov	r31, r3
 97c:	ff 76       	andi	r31, 0x6F	; 111
 97e:	3f 2e       	mov	r3, r31
 980:	97 ff       	sbrs	r25, 7
 982:	09 c0       	rjmp	.+18     	; 0x996 <__stack+0x97>
 984:	90 95       	com	r25
 986:	80 95       	com	r24
 988:	70 95       	com	r23
 98a:	61 95       	neg	r22
 98c:	7f 4f       	sbci	r23, 0xFF	; 255
 98e:	8f 4f       	sbci	r24, 0xFF	; 255
 990:	9f 4f       	sbci	r25, 0xFF	; 255
 992:	f0 68       	ori	r31, 0x80	; 128
 994:	3f 2e       	mov	r3, r31
 996:	2a e0       	ldi	r18, 0x0A	; 10
 998:	30 e0       	ldi	r19, 0x00	; 0
 99a:	a3 01       	movw	r20, r6
 99c:	0e 94 f5 05 	call	0xbea	; 0xbea <__ultoa_invert>
 9a0:	88 2e       	mov	r8, r24
 9a2:	86 18       	sub	r8, r6
 9a4:	45 c0       	rjmp	.+138    	; 0xa30 <__stack+0x131>
 9a6:	85 37       	cpi	r24, 0x75	; 117
 9a8:	31 f4       	brne	.+12     	; 0x9b6 <__stack+0xb7>
 9aa:	23 2d       	mov	r18, r3
 9ac:	2f 7e       	andi	r18, 0xEF	; 239
 9ae:	b2 2e       	mov	r11, r18
 9b0:	2a e0       	ldi	r18, 0x0A	; 10
 9b2:	30 e0       	ldi	r19, 0x00	; 0
 9b4:	25 c0       	rjmp	.+74     	; 0xa00 <__stack+0x101>
 9b6:	93 2d       	mov	r25, r3
 9b8:	99 7f       	andi	r25, 0xF9	; 249
 9ba:	b9 2e       	mov	r11, r25
 9bc:	8f 36       	cpi	r24, 0x6F	; 111
 9be:	c1 f0       	breq	.+48     	; 0x9f0 <__stack+0xf1>
 9c0:	18 f4       	brcc	.+6      	; 0x9c8 <__stack+0xc9>
 9c2:	88 35       	cpi	r24, 0x58	; 88
 9c4:	79 f0       	breq	.+30     	; 0x9e4 <__stack+0xe5>
 9c6:	b5 c0       	rjmp	.+362    	; 0xb32 <__stack+0x233>
 9c8:	80 37       	cpi	r24, 0x70	; 112
 9ca:	19 f0       	breq	.+6      	; 0x9d2 <__stack+0xd3>
 9cc:	88 37       	cpi	r24, 0x78	; 120
 9ce:	21 f0       	breq	.+8      	; 0x9d8 <__stack+0xd9>
 9d0:	b0 c0       	rjmp	.+352    	; 0xb32 <__stack+0x233>
 9d2:	e9 2f       	mov	r30, r25
 9d4:	e0 61       	ori	r30, 0x10	; 16
 9d6:	be 2e       	mov	r11, r30
 9d8:	b4 fe       	sbrs	r11, 4
 9da:	0d c0       	rjmp	.+26     	; 0x9f6 <__stack+0xf7>
 9dc:	fb 2d       	mov	r31, r11
 9de:	f4 60       	ori	r31, 0x04	; 4
 9e0:	bf 2e       	mov	r11, r31
 9e2:	09 c0       	rjmp	.+18     	; 0x9f6 <__stack+0xf7>
 9e4:	34 fe       	sbrs	r3, 4
 9e6:	0a c0       	rjmp	.+20     	; 0x9fc <__stack+0xfd>
 9e8:	29 2f       	mov	r18, r25
 9ea:	26 60       	ori	r18, 0x06	; 6
 9ec:	b2 2e       	mov	r11, r18
 9ee:	06 c0       	rjmp	.+12     	; 0x9fc <__stack+0xfd>
 9f0:	28 e0       	ldi	r18, 0x08	; 8
 9f2:	30 e0       	ldi	r19, 0x00	; 0
 9f4:	05 c0       	rjmp	.+10     	; 0xa00 <__stack+0x101>
 9f6:	20 e1       	ldi	r18, 0x10	; 16
 9f8:	30 e0       	ldi	r19, 0x00	; 0
 9fa:	02 c0       	rjmp	.+4      	; 0xa00 <__stack+0x101>
 9fc:	20 e1       	ldi	r18, 0x10	; 16
 9fe:	32 e0       	ldi	r19, 0x02	; 2
 a00:	f8 01       	movw	r30, r16
 a02:	b7 fe       	sbrs	r11, 7
 a04:	07 c0       	rjmp	.+14     	; 0xa14 <__stack+0x115>
 a06:	60 81       	ld	r22, Z
 a08:	71 81       	ldd	r23, Z+1	; 0x01
 a0a:	82 81       	ldd	r24, Z+2	; 0x02
 a0c:	93 81       	ldd	r25, Z+3	; 0x03
 a0e:	0c 5f       	subi	r16, 0xFC	; 252
 a10:	1f 4f       	sbci	r17, 0xFF	; 255
 a12:	06 c0       	rjmp	.+12     	; 0xa20 <__stack+0x121>
 a14:	60 81       	ld	r22, Z
 a16:	71 81       	ldd	r23, Z+1	; 0x01
 a18:	80 e0       	ldi	r24, 0x00	; 0
 a1a:	90 e0       	ldi	r25, 0x00	; 0
 a1c:	0e 5f       	subi	r16, 0xFE	; 254
 a1e:	1f 4f       	sbci	r17, 0xFF	; 255
 a20:	a3 01       	movw	r20, r6
 a22:	0e 94 f5 05 	call	0xbea	; 0xbea <__ultoa_invert>
 a26:	88 2e       	mov	r8, r24
 a28:	86 18       	sub	r8, r6
 a2a:	fb 2d       	mov	r31, r11
 a2c:	ff 77       	andi	r31, 0x7F	; 127
 a2e:	3f 2e       	mov	r3, r31
 a30:	36 fe       	sbrs	r3, 6
 a32:	0d c0       	rjmp	.+26     	; 0xa4e <__stack+0x14f>
 a34:	23 2d       	mov	r18, r3
 a36:	2e 7f       	andi	r18, 0xFE	; 254
 a38:	a2 2e       	mov	r10, r18
 a3a:	89 14       	cp	r8, r9
 a3c:	58 f4       	brcc	.+22     	; 0xa54 <__stack+0x155>
 a3e:	34 fe       	sbrs	r3, 4
 a40:	0b c0       	rjmp	.+22     	; 0xa58 <__stack+0x159>
 a42:	32 fc       	sbrc	r3, 2
 a44:	09 c0       	rjmp	.+18     	; 0xa58 <__stack+0x159>
 a46:	83 2d       	mov	r24, r3
 a48:	8e 7e       	andi	r24, 0xEE	; 238
 a4a:	a8 2e       	mov	r10, r24
 a4c:	05 c0       	rjmp	.+10     	; 0xa58 <__stack+0x159>
 a4e:	b8 2c       	mov	r11, r8
 a50:	a3 2c       	mov	r10, r3
 a52:	03 c0       	rjmp	.+6      	; 0xa5a <__stack+0x15b>
 a54:	b8 2c       	mov	r11, r8
 a56:	01 c0       	rjmp	.+2      	; 0xa5a <__stack+0x15b>
 a58:	b9 2c       	mov	r11, r9
 a5a:	a4 fe       	sbrs	r10, 4
 a5c:	0f c0       	rjmp	.+30     	; 0xa7c <__stack+0x17d>
 a5e:	fe 01       	movw	r30, r28
 a60:	e8 0d       	add	r30, r8
 a62:	f1 1d       	adc	r31, r1
 a64:	80 81       	ld	r24, Z
 a66:	80 33       	cpi	r24, 0x30	; 48
 a68:	21 f4       	brne	.+8      	; 0xa72 <__stack+0x173>
 a6a:	9a 2d       	mov	r25, r10
 a6c:	99 7e       	andi	r25, 0xE9	; 233
 a6e:	a9 2e       	mov	r10, r25
 a70:	09 c0       	rjmp	.+18     	; 0xa84 <__stack+0x185>
 a72:	a2 fe       	sbrs	r10, 2
 a74:	06 c0       	rjmp	.+12     	; 0xa82 <__stack+0x183>
 a76:	b3 94       	inc	r11
 a78:	b3 94       	inc	r11
 a7a:	04 c0       	rjmp	.+8      	; 0xa84 <__stack+0x185>
 a7c:	8a 2d       	mov	r24, r10
 a7e:	86 78       	andi	r24, 0x86	; 134
 a80:	09 f0       	breq	.+2      	; 0xa84 <__stack+0x185>
 a82:	b3 94       	inc	r11
 a84:	a3 fc       	sbrc	r10, 3
 a86:	11 c0       	rjmp	.+34     	; 0xaaa <__stack+0x1ab>
 a88:	a0 fe       	sbrs	r10, 0
 a8a:	06 c0       	rjmp	.+12     	; 0xa98 <__stack+0x199>
 a8c:	b2 14       	cp	r11, r2
 a8e:	88 f4       	brcc	.+34     	; 0xab2 <__stack+0x1b3>
 a90:	28 0c       	add	r2, r8
 a92:	92 2c       	mov	r9, r2
 a94:	9b 18       	sub	r9, r11
 a96:	0e c0       	rjmp	.+28     	; 0xab4 <__stack+0x1b5>
 a98:	b2 14       	cp	r11, r2
 a9a:	60 f4       	brcc	.+24     	; 0xab4 <__stack+0x1b5>
 a9c:	b6 01       	movw	r22, r12
 a9e:	80 e2       	ldi	r24, 0x20	; 32
 aa0:	90 e0       	ldi	r25, 0x00	; 0
 aa2:	0e 94 b9 05 	call	0xb72	; 0xb72 <fputc>
 aa6:	b3 94       	inc	r11
 aa8:	f7 cf       	rjmp	.-18     	; 0xa98 <__stack+0x199>
 aaa:	b2 14       	cp	r11, r2
 aac:	18 f4       	brcc	.+6      	; 0xab4 <__stack+0x1b5>
 aae:	2b 18       	sub	r2, r11
 ab0:	02 c0       	rjmp	.+4      	; 0xab6 <__stack+0x1b7>
 ab2:	98 2c       	mov	r9, r8
 ab4:	21 2c       	mov	r2, r1
 ab6:	a4 fe       	sbrs	r10, 4
 ab8:	10 c0       	rjmp	.+32     	; 0xada <__stack+0x1db>
 aba:	b6 01       	movw	r22, r12
 abc:	80 e3       	ldi	r24, 0x30	; 48
 abe:	90 e0       	ldi	r25, 0x00	; 0
 ac0:	0e 94 b9 05 	call	0xb72	; 0xb72 <fputc>
 ac4:	a2 fe       	sbrs	r10, 2
 ac6:	17 c0       	rjmp	.+46     	; 0xaf6 <__stack+0x1f7>
 ac8:	a1 fc       	sbrc	r10, 1
 aca:	03 c0       	rjmp	.+6      	; 0xad2 <__stack+0x1d3>
 acc:	88 e7       	ldi	r24, 0x78	; 120
 ace:	90 e0       	ldi	r25, 0x00	; 0
 ad0:	02 c0       	rjmp	.+4      	; 0xad6 <__stack+0x1d7>
 ad2:	88 e5       	ldi	r24, 0x58	; 88
 ad4:	90 e0       	ldi	r25, 0x00	; 0
 ad6:	b6 01       	movw	r22, r12
 ad8:	0c c0       	rjmp	.+24     	; 0xaf2 <__stack+0x1f3>
 ada:	8a 2d       	mov	r24, r10
 adc:	86 78       	andi	r24, 0x86	; 134
 ade:	59 f0       	breq	.+22     	; 0xaf6 <__stack+0x1f7>
 ae0:	a1 fe       	sbrs	r10, 1
 ae2:	02 c0       	rjmp	.+4      	; 0xae8 <__stack+0x1e9>
 ae4:	8b e2       	ldi	r24, 0x2B	; 43
 ae6:	01 c0       	rjmp	.+2      	; 0xaea <__stack+0x1eb>
 ae8:	80 e2       	ldi	r24, 0x20	; 32
 aea:	a7 fc       	sbrc	r10, 7
 aec:	8d e2       	ldi	r24, 0x2D	; 45
 aee:	b6 01       	movw	r22, r12
 af0:	90 e0       	ldi	r25, 0x00	; 0
 af2:	0e 94 b9 05 	call	0xb72	; 0xb72 <fputc>
 af6:	89 14       	cp	r8, r9
 af8:	38 f4       	brcc	.+14     	; 0xb08 <__stack+0x209>
 afa:	b6 01       	movw	r22, r12
 afc:	80 e3       	ldi	r24, 0x30	; 48
 afe:	90 e0       	ldi	r25, 0x00	; 0
 b00:	0e 94 b9 05 	call	0xb72	; 0xb72 <fputc>
 b04:	9a 94       	dec	r9
 b06:	f7 cf       	rjmp	.-18     	; 0xaf6 <__stack+0x1f7>
 b08:	8a 94       	dec	r8
 b0a:	f3 01       	movw	r30, r6
 b0c:	e8 0d       	add	r30, r8
 b0e:	f1 1d       	adc	r31, r1
 b10:	80 81       	ld	r24, Z
 b12:	b6 01       	movw	r22, r12
 b14:	90 e0       	ldi	r25, 0x00	; 0
 b16:	0e 94 b9 05 	call	0xb72	; 0xb72 <fputc>
 b1a:	81 10       	cpse	r8, r1
 b1c:	f5 cf       	rjmp	.-22     	; 0xb08 <__stack+0x209>
 b1e:	22 20       	and	r2, r2
 b20:	09 f4       	brne	.+2      	; 0xb24 <__stack+0x225>
 b22:	42 ce       	rjmp	.-892    	; 0x7a8 <vfprintf+0x24>
 b24:	b6 01       	movw	r22, r12
 b26:	80 e2       	ldi	r24, 0x20	; 32
 b28:	90 e0       	ldi	r25, 0x00	; 0
 b2a:	0e 94 b9 05 	call	0xb72	; 0xb72 <fputc>
 b2e:	2a 94       	dec	r2
 b30:	f6 cf       	rjmp	.-20     	; 0xb1e <__stack+0x21f>
 b32:	f6 01       	movw	r30, r12
 b34:	86 81       	ldd	r24, Z+6	; 0x06
 b36:	97 81       	ldd	r25, Z+7	; 0x07
 b38:	02 c0       	rjmp	.+4      	; 0xb3e <__stack+0x23f>
 b3a:	8f ef       	ldi	r24, 0xFF	; 255
 b3c:	9f ef       	ldi	r25, 0xFF	; 255
 b3e:	2b 96       	adiw	r28, 0x0b	; 11
 b40:	e2 e1       	ldi	r30, 0x12	; 18
 b42:	0c 94 6f 06 	jmp	0xcde	; 0xcde <__epilogue_restores__>

00000b46 <strnlen_P>:
 b46:	fc 01       	movw	r30, r24
 b48:	05 90       	lpm	r0, Z+
 b4a:	61 50       	subi	r22, 0x01	; 1
 b4c:	70 40       	sbci	r23, 0x00	; 0
 b4e:	01 10       	cpse	r0, r1
 b50:	d8 f7       	brcc	.-10     	; 0xb48 <strnlen_P+0x2>
 b52:	80 95       	com	r24
 b54:	90 95       	com	r25
 b56:	8e 0f       	add	r24, r30
 b58:	9f 1f       	adc	r25, r31
 b5a:	08 95       	ret

00000b5c <strnlen>:
 b5c:	fc 01       	movw	r30, r24
 b5e:	61 50       	subi	r22, 0x01	; 1
 b60:	70 40       	sbci	r23, 0x00	; 0
 b62:	01 90       	ld	r0, Z+
 b64:	01 10       	cpse	r0, r1
 b66:	d8 f7       	brcc	.-10     	; 0xb5e <strnlen+0x2>
 b68:	80 95       	com	r24
 b6a:	90 95       	com	r25
 b6c:	8e 0f       	add	r24, r30
 b6e:	9f 1f       	adc	r25, r31
 b70:	08 95       	ret

00000b72 <fputc>:
 b72:	0f 93       	push	r16
 b74:	1f 93       	push	r17
 b76:	cf 93       	push	r28
 b78:	df 93       	push	r29
 b7a:	fb 01       	movw	r30, r22
 b7c:	23 81       	ldd	r18, Z+3	; 0x03
 b7e:	21 fd       	sbrc	r18, 1
 b80:	03 c0       	rjmp	.+6      	; 0xb88 <fputc+0x16>
 b82:	8f ef       	ldi	r24, 0xFF	; 255
 b84:	9f ef       	ldi	r25, 0xFF	; 255
 b86:	2c c0       	rjmp	.+88     	; 0xbe0 <fputc+0x6e>
 b88:	22 ff       	sbrs	r18, 2
 b8a:	16 c0       	rjmp	.+44     	; 0xbb8 <fputc+0x46>
 b8c:	46 81       	ldd	r20, Z+6	; 0x06
 b8e:	57 81       	ldd	r21, Z+7	; 0x07
 b90:	24 81       	ldd	r18, Z+4	; 0x04
 b92:	35 81       	ldd	r19, Z+5	; 0x05
 b94:	42 17       	cp	r20, r18
 b96:	53 07       	cpc	r21, r19
 b98:	44 f4       	brge	.+16     	; 0xbaa <fputc+0x38>
 b9a:	a0 81       	ld	r26, Z
 b9c:	b1 81       	ldd	r27, Z+1	; 0x01
 b9e:	9d 01       	movw	r18, r26
 ba0:	2f 5f       	subi	r18, 0xFF	; 255
 ba2:	3f 4f       	sbci	r19, 0xFF	; 255
 ba4:	31 83       	std	Z+1, r19	; 0x01
 ba6:	20 83       	st	Z, r18
 ba8:	8c 93       	st	X, r24
 baa:	26 81       	ldd	r18, Z+6	; 0x06
 bac:	37 81       	ldd	r19, Z+7	; 0x07
 bae:	2f 5f       	subi	r18, 0xFF	; 255
 bb0:	3f 4f       	sbci	r19, 0xFF	; 255
 bb2:	37 83       	std	Z+7, r19	; 0x07
 bb4:	26 83       	std	Z+6, r18	; 0x06
 bb6:	14 c0       	rjmp	.+40     	; 0xbe0 <fputc+0x6e>
 bb8:	8b 01       	movw	r16, r22
 bba:	ec 01       	movw	r28, r24
 bbc:	fb 01       	movw	r30, r22
 bbe:	00 84       	ldd	r0, Z+8	; 0x08
 bc0:	f1 85       	ldd	r31, Z+9	; 0x09
 bc2:	e0 2d       	mov	r30, r0
 bc4:	09 95       	icall
 bc6:	89 2b       	or	r24, r25
 bc8:	e1 f6       	brne	.-72     	; 0xb82 <fputc+0x10>
 bca:	d8 01       	movw	r26, r16
 bcc:	16 96       	adiw	r26, 0x06	; 6
 bce:	8d 91       	ld	r24, X+
 bd0:	9c 91       	ld	r25, X
 bd2:	17 97       	sbiw	r26, 0x07	; 7
 bd4:	01 96       	adiw	r24, 0x01	; 1
 bd6:	17 96       	adiw	r26, 0x07	; 7
 bd8:	9c 93       	st	X, r25
 bda:	8e 93       	st	-X, r24
 bdc:	16 97       	sbiw	r26, 0x06	; 6
 bde:	ce 01       	movw	r24, r28
 be0:	df 91       	pop	r29
 be2:	cf 91       	pop	r28
 be4:	1f 91       	pop	r17
 be6:	0f 91       	pop	r16
 be8:	08 95       	ret

00000bea <__ultoa_invert>:
 bea:	fa 01       	movw	r30, r20
 bec:	aa 27       	eor	r26, r26
 bee:	28 30       	cpi	r18, 0x08	; 8
 bf0:	51 f1       	breq	.+84     	; 0xc46 <__ultoa_invert+0x5c>
 bf2:	20 31       	cpi	r18, 0x10	; 16
 bf4:	81 f1       	breq	.+96     	; 0xc56 <__ultoa_invert+0x6c>
 bf6:	e8 94       	clt
 bf8:	6f 93       	push	r22
 bfa:	6e 7f       	andi	r22, 0xFE	; 254
 bfc:	6e 5f       	subi	r22, 0xFE	; 254
 bfe:	7f 4f       	sbci	r23, 0xFF	; 255
 c00:	8f 4f       	sbci	r24, 0xFF	; 255
 c02:	9f 4f       	sbci	r25, 0xFF	; 255
 c04:	af 4f       	sbci	r26, 0xFF	; 255
 c06:	b1 e0       	ldi	r27, 0x01	; 1
 c08:	3e d0       	rcall	.+124    	; 0xc86 <__ultoa_invert+0x9c>
 c0a:	b4 e0       	ldi	r27, 0x04	; 4
 c0c:	3c d0       	rcall	.+120    	; 0xc86 <__ultoa_invert+0x9c>
 c0e:	67 0f       	add	r22, r23
 c10:	78 1f       	adc	r23, r24
 c12:	89 1f       	adc	r24, r25
 c14:	9a 1f       	adc	r25, r26
 c16:	a1 1d       	adc	r26, r1
 c18:	68 0f       	add	r22, r24
 c1a:	79 1f       	adc	r23, r25
 c1c:	8a 1f       	adc	r24, r26
 c1e:	91 1d       	adc	r25, r1
 c20:	a1 1d       	adc	r26, r1
 c22:	6a 0f       	add	r22, r26
 c24:	71 1d       	adc	r23, r1
 c26:	81 1d       	adc	r24, r1
 c28:	91 1d       	adc	r25, r1
 c2a:	a1 1d       	adc	r26, r1
 c2c:	20 d0       	rcall	.+64     	; 0xc6e <__ultoa_invert+0x84>
 c2e:	09 f4       	brne	.+2      	; 0xc32 <__ultoa_invert+0x48>
 c30:	68 94       	set
 c32:	3f 91       	pop	r19
 c34:	2a e0       	ldi	r18, 0x0A	; 10
 c36:	26 9f       	mul	r18, r22
 c38:	11 24       	eor	r1, r1
 c3a:	30 19       	sub	r19, r0
 c3c:	30 5d       	subi	r19, 0xD0	; 208
 c3e:	31 93       	st	Z+, r19
 c40:	de f6       	brtc	.-74     	; 0xbf8 <__ultoa_invert+0xe>
 c42:	cf 01       	movw	r24, r30
 c44:	08 95       	ret
 c46:	46 2f       	mov	r20, r22
 c48:	47 70       	andi	r20, 0x07	; 7
 c4a:	40 5d       	subi	r20, 0xD0	; 208
 c4c:	41 93       	st	Z+, r20
 c4e:	b3 e0       	ldi	r27, 0x03	; 3
 c50:	0f d0       	rcall	.+30     	; 0xc70 <__ultoa_invert+0x86>
 c52:	c9 f7       	brne	.-14     	; 0xc46 <__ultoa_invert+0x5c>
 c54:	f6 cf       	rjmp	.-20     	; 0xc42 <__ultoa_invert+0x58>
 c56:	46 2f       	mov	r20, r22
 c58:	4f 70       	andi	r20, 0x0F	; 15
 c5a:	40 5d       	subi	r20, 0xD0	; 208
 c5c:	4a 33       	cpi	r20, 0x3A	; 58
 c5e:	18 f0       	brcs	.+6      	; 0xc66 <__ultoa_invert+0x7c>
 c60:	49 5d       	subi	r20, 0xD9	; 217
 c62:	31 fd       	sbrc	r19, 1
 c64:	40 52       	subi	r20, 0x20	; 32
 c66:	41 93       	st	Z+, r20
 c68:	02 d0       	rcall	.+4      	; 0xc6e <__ultoa_invert+0x84>
 c6a:	a9 f7       	brne	.-22     	; 0xc56 <__ultoa_invert+0x6c>
 c6c:	ea cf       	rjmp	.-44     	; 0xc42 <__ultoa_invert+0x58>
 c6e:	b4 e0       	ldi	r27, 0x04	; 4
 c70:	a6 95       	lsr	r26
 c72:	97 95       	ror	r25
 c74:	87 95       	ror	r24
 c76:	77 95       	ror	r23
 c78:	67 95       	ror	r22
 c7a:	ba 95       	dec	r27
 c7c:	c9 f7       	brne	.-14     	; 0xc70 <__ultoa_invert+0x86>
 c7e:	00 97       	sbiw	r24, 0x00	; 0
 c80:	61 05       	cpc	r22, r1
 c82:	71 05       	cpc	r23, r1
 c84:	08 95       	ret
 c86:	9b 01       	movw	r18, r22
 c88:	ac 01       	movw	r20, r24
 c8a:	0a 2e       	mov	r0, r26
 c8c:	06 94       	lsr	r0
 c8e:	57 95       	ror	r21
 c90:	47 95       	ror	r20
 c92:	37 95       	ror	r19
 c94:	27 95       	ror	r18
 c96:	ba 95       	dec	r27
 c98:	c9 f7       	brne	.-14     	; 0xc8c <__ultoa_invert+0xa2>
 c9a:	62 0f       	add	r22, r18
 c9c:	73 1f       	adc	r23, r19
 c9e:	84 1f       	adc	r24, r20
 ca0:	95 1f       	adc	r25, r21
 ca2:	a0 1d       	adc	r26, r0
 ca4:	08 95       	ret

00000ca6 <__prologue_saves__>:
 ca6:	2f 92       	push	r2
 ca8:	3f 92       	push	r3
 caa:	4f 92       	push	r4
 cac:	5f 92       	push	r5
 cae:	6f 92       	push	r6
 cb0:	7f 92       	push	r7
 cb2:	8f 92       	push	r8
 cb4:	9f 92       	push	r9
 cb6:	af 92       	push	r10
 cb8:	bf 92       	push	r11
 cba:	cf 92       	push	r12
 cbc:	df 92       	push	r13
 cbe:	ef 92       	push	r14
 cc0:	ff 92       	push	r15
 cc2:	0f 93       	push	r16
 cc4:	1f 93       	push	r17
 cc6:	cf 93       	push	r28
 cc8:	df 93       	push	r29
 cca:	cd b7       	in	r28, 0x3d	; 61
 ccc:	de b7       	in	r29, 0x3e	; 62
 cce:	ca 1b       	sub	r28, r26
 cd0:	db 0b       	sbc	r29, r27
 cd2:	0f b6       	in	r0, 0x3f	; 63
 cd4:	f8 94       	cli
 cd6:	de bf       	out	0x3e, r29	; 62
 cd8:	0f be       	out	0x3f, r0	; 63
 cda:	cd bf       	out	0x3d, r28	; 61
 cdc:	09 94       	ijmp

00000cde <__epilogue_restores__>:
 cde:	2a 88       	ldd	r2, Y+18	; 0x12
 ce0:	39 88       	ldd	r3, Y+17	; 0x11
 ce2:	48 88       	ldd	r4, Y+16	; 0x10
 ce4:	5f 84       	ldd	r5, Y+15	; 0x0f
 ce6:	6e 84       	ldd	r6, Y+14	; 0x0e
 ce8:	7d 84       	ldd	r7, Y+13	; 0x0d
 cea:	8c 84       	ldd	r8, Y+12	; 0x0c
 cec:	9b 84       	ldd	r9, Y+11	; 0x0b
 cee:	aa 84       	ldd	r10, Y+10	; 0x0a
 cf0:	b9 84       	ldd	r11, Y+9	; 0x09
 cf2:	c8 84       	ldd	r12, Y+8	; 0x08
 cf4:	df 80       	ldd	r13, Y+7	; 0x07
 cf6:	ee 80       	ldd	r14, Y+6	; 0x06
 cf8:	fd 80       	ldd	r15, Y+5	; 0x05
 cfa:	0c 81       	ldd	r16, Y+4	; 0x04
 cfc:	1b 81       	ldd	r17, Y+3	; 0x03
 cfe:	aa 81       	ldd	r26, Y+2	; 0x02
 d00:	b9 81       	ldd	r27, Y+1	; 0x01
 d02:	ce 0f       	add	r28, r30
 d04:	d1 1d       	adc	r29, r1
 d06:	0f b6       	in	r0, 0x3f	; 63
 d08:	f8 94       	cli
 d0a:	de bf       	out	0x3e, r29	; 62
 d0c:	0f be       	out	0x3f, r0	; 63
 d0e:	cd bf       	out	0x3d, r28	; 61
 d10:	ed 01       	movw	r28, r26
 d12:	08 95       	ret

00000d14 <_exit>:
 d14:	f8 94       	cli

00000d16 <__stop_program>:
 d16:	ff cf       	rjmp	.-2      	; 0xd16 <__stop_program>
