
encasingcontroller.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001b2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000015e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001b2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000008a5  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006df  00000000  00000000  00000b09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039d  00000000  00000000  000011e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001588  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003ac  00000000  00000000  000015d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000168  00000000  00000000  0000197c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001ae4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e5       	ldi	r30, 0x5E	; 94
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 6a 00 	call	0xd4	; 0xd4 <main>
  8e:	0c 94 ad 00 	jmp	0x15a	; 0x15a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <fan_init>:
 */ 
#include "fan.h"

void fan_init(void)
{
	DDRB |= 1 << FAN_PWM_PORT;
  96:	21 9a       	sbi	0x04, 1	; 4
	DDRB |= 1 << RELAY_PORT;
  98:	22 9a       	sbi	0x04, 2	; 4
	
	ICR1 = 0x5555;
  9a:	85 e5       	ldi	r24, 0x55	; 85
  9c:	95 e5       	ldi	r25, 0x55	; 85
  9e:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7e0087>
  a2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7e0086>
	OCR1A = 0x1C71;
  a6:	81 e7       	ldi	r24, 0x71	; 113
  a8:	9c e1       	ldi	r25, 0x1C	; 28
  aa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  ae:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
	
	TCCR1A |= (1 << COM1A1);// | (1 << COM1B1);
  b2:	e0 e8       	ldi	r30, 0x80	; 128
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	80 68       	ori	r24, 0x80	; 128
  ba:	80 83       	st	Z, r24
	TCCR1A |= (1 << WGM11);
  bc:	80 81       	ld	r24, Z
  be:	82 60       	ori	r24, 0x02	; 2
  c0:	80 83       	st	Z, r24
	TCCR1A |= (1 << WGM12) | (1 << WGM13);
  c2:	80 81       	ld	r24, Z
  c4:	88 61       	ori	r24, 0x18	; 24
  c6:	80 83       	st	Z, r24
	
	TCCR1B |= (1 << CS12) | (1 << CS10);
  c8:	e1 e8       	ldi	r30, 0x81	; 129
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	80 81       	ld	r24, Z
  ce:	85 60       	ori	r24, 0x05	; 5
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <main>:

int main(void)
{
	int dutycycle = 0x3FFF;
	//_delay_ms(5000);
	fan_init();
  d4:	0e 94 4b 00 	call	0x96	; 0x96 <fan_init>
	PORTB |= (1<<RELAY_PORT);
  d8:	2a 9a       	sbi	0x05, 2	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  da:	2f ef       	ldi	r18, 0xFF	; 255
  dc:	44 e3       	ldi	r20, 0x34	; 52
  de:	5c e0       	ldi	r21, 0x0C	; 12
  e0:	21 50       	subi	r18, 0x01	; 1
  e2:	40 40       	sbci	r20, 0x00	; 0
  e4:	50 40       	sbci	r21, 0x00	; 0
  e6:	e1 f7       	brne	.-8      	; 0xe0 <main+0xc>
  e8:	00 c0       	rjmp	.+0      	; 0xea <main+0x16>
  ea:	00 00       	nop
	_delay_ms(500);
	PORTB &= ~(1<<RELAY_PORT);
  ec:	2a 98       	cbi	0x05, 2	; 5
  ee:	6f ef       	ldi	r22, 0xFF	; 255
  f0:	89 e6       	ldi	r24, 0x69	; 105
  f2:	98 e1       	ldi	r25, 0x18	; 24
  f4:	61 50       	subi	r22, 0x01	; 1
  f6:	80 40       	sbci	r24, 0x00	; 0
  f8:	90 40       	sbci	r25, 0x00	; 0
  fa:	e1 f7       	brne	.-8      	; 0xf4 <main+0x20>
  fc:	00 c0       	rjmp	.+0      	; 0xfe <main+0x2a>
  fe:	00 00       	nop
	_delay_ms(1000);
	PORTB |= (1<<RELAY_PORT);
 100:	2a 9a       	sbi	0x05, 2	; 5
 102:	2f ef       	ldi	r18, 0xFF	; 255
 104:	49 e6       	ldi	r20, 0x69	; 105
 106:	58 e1       	ldi	r21, 0x18	; 24
 108:	21 50       	subi	r18, 0x01	; 1
 10a:	40 40       	sbci	r20, 0x00	; 0
 10c:	50 40       	sbci	r21, 0x00	; 0
 10e:	e1 f7       	brne	.-8      	; 0x108 <main+0x34>
 110:	00 c0       	rjmp	.+0      	; 0x112 <main+0x3e>
 112:	00 00       	nop
	_delay_ms(1000);
	PORTB &= ~(1<<RELAY_PORT);
 114:	2a 98       	cbi	0x05, 2	; 5
    /* Replace with your application code */
	while(1){
		_delay_ms(5000);
		PORTB |= (1<<RELAY_PORT);
		//dutycycle += 0x00FF;
		OCR1A = 0x5555;
 116:	a8 e8       	ldi	r26, 0x88	; 136
 118:	b0 e0       	ldi	r27, 0x00	; 0
 11a:	25 e5       	ldi	r18, 0x55	; 85
 11c:	35 e5       	ldi	r19, 0x55	; 85
		_delay_ms(5000);
		PORTB &= ~(1<<RELAY_PORT);
		//dutycycle += 0x00FF;
		OCR1B = 0x0010;
 11e:	ea e8       	ldi	r30, 0x8A	; 138
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 e1       	ldi	r24, 0x10	; 16
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	6f ef       	ldi	r22, 0xFF	; 255
 128:	41 e1       	ldi	r20, 0x11	; 17
 12a:	5a e7       	ldi	r21, 0x7A	; 122
 12c:	61 50       	subi	r22, 0x01	; 1
 12e:	40 40       	sbci	r20, 0x00	; 0
 130:	50 40       	sbci	r21, 0x00	; 0
 132:	e1 f7       	brne	.-8      	; 0x12c <main+0x58>
 134:	00 c0       	rjmp	.+0      	; 0x136 <main+0x62>
 136:	00 00       	nop
	_delay_ms(1000);
	PORTB &= ~(1<<RELAY_PORT);
    /* Replace with your application code */
	while(1){
		_delay_ms(5000);
		PORTB |= (1<<RELAY_PORT);
 138:	2a 9a       	sbi	0x05, 2	; 5
		//dutycycle += 0x00FF;
		OCR1A = 0x5555;
 13a:	11 96       	adiw	r26, 0x01	; 1
 13c:	3c 93       	st	X, r19
 13e:	2e 93       	st	-X, r18
 140:	6f ef       	ldi	r22, 0xFF	; 255
 142:	41 e1       	ldi	r20, 0x11	; 17
 144:	5a e7       	ldi	r21, 0x7A	; 122
 146:	61 50       	subi	r22, 0x01	; 1
 148:	40 40       	sbci	r20, 0x00	; 0
 14a:	50 40       	sbci	r21, 0x00	; 0
 14c:	e1 f7       	brne	.-8      	; 0x146 <main+0x72>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <main+0x7c>
 150:	00 00       	nop
		_delay_ms(5000);
		PORTB &= ~(1<<RELAY_PORT);
 152:	2a 98       	cbi	0x05, 2	; 5
		//dutycycle += 0x00FF;
		OCR1B = 0x0010;
 154:	91 83       	std	Z+1, r25	; 0x01
 156:	80 83       	st	Z, r24
 158:	e6 cf       	rjmp	.-52     	; 0x126 <main+0x52>

0000015a <_exit>:
 15a:	f8 94       	cli

0000015c <__stop_program>:
 15c:	ff cf       	rjmp	.-2      	; 0x15c <__stop_program>
